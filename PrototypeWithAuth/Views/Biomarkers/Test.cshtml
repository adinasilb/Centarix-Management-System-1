@using PrototypeWithAuth.AppData
@using PrototypeWithAuth.ViewModels
@model PrototypeWithAuth.ViewModels.TestViewModel
@{
    Layout = "~/Views/Shared/RequestNavView.cshtml";
}
<script src="~/js/biomarkerssave.js"></script>
@{ var listNumber = 0;}
<form action="" method="POST" enctype="multipart/form-data" class="test-forms on-form-modal bio-form" id="BioTestForm">
    @Html.HiddenFor(m => m.ExperimentEntry.ExperimentEntryID)
    @Html.HiddenFor(m => m.ExperimentEntry.ParticipantID)
    @Html.HiddenFor(m => m.ExperimentEntry.SiteID)
    @Html.HiddenFor(m => m.ExperimentEntry.VisitNumber)
    @Html.HiddenFor(m => m.ExperimentEntry.Participant.ExperimentID)
    @Html.HiddenFor(m => m.ExperimentID)
    <input type="hidden" value="@AppUtility.MenuItems.Biomarkers.ToString()" id="#masterSectionType" />

    @*@for (int e = 0; e < Model.FieldViewModels.Count; e++)
            {
        <div class="fieldviewmodelshiddenfor">
            @Html.HiddenFor(m => m.FieldViewModels[e].DataTypeEnum)
            @Html.HiddenFor(m => m.FieldViewModels[e].String)
            @Html.HiddenFor(m => m.FieldViewModels[e].FieldID)
            @Html.HiddenFor(m => m.FieldViewModels[e].TestHeader.TestHeaderID)
            @Html.HiddenFor(m => m.FieldViewModels[e].TestHeader.Name)
        </div>
            }*@
    <div class="row under-row-margin">
        <div class="col-6">
            @{ await Html.RenderPartialAsync("_participantsheader", Model.ExperimentEntry.Participant);}
        </div>
        <div class="col-6">
            <div class="entries-header font-weight-medium text float-right">
                Entry Number: <span class="biomarkers-color">@Model.ExperimentEntry.VisitNumber </span> |
                Date: <span class="biomarkers-color">@Model.ExperimentEntry.DateTime.GetElixirDateFormat() </span>
            </div>
        </div>
    </div>
    <div class="row under-row-margin">
        <div class="col-6">
            <button class="custom-button custom-button-font light-gray-background-color ml-0">
                <a href="@Url.Action("Entries", "Biomarkers", new { ParticipantID = Model.ExperimentEntry.ParticipantID })" class="text-black">
                    <i class="icon-arrow_back_ios-24px-1" style="font-size: 1.2rem;"></i>
                    Back
                </a>
            </button>
            <span class="col-2 heading-1">
                @Model.ExperimentEntry.Site.Name
            </span>
        </div>
        <div class="col-6 float-right">
            <div class=" row text-right mb- ">
                <div class="switch col-12 switch-margin">
                    <label>
                        <label class="edit-mode-label on">edit mode on</label>
                        <input type="checkbox" class="biomarkers-color biomarkers-test edit-mode-input on" checked="checked" value="true" productID="" name="edit">
                        <span class="lever"></span>
                    </label>
                </div>
            </div>
        </div>
    </div>
    <div class="card border">
        <div class="row">
            <div class="col-3 border-right p-4">
                <ul class="list-group">
                    @{ var origClasses = "biomarkers-test-name list-group-item mb-2";
                        var classes = origClasses + " selected";}
                    @for (int t = 0; t < Model.Tests.Count; t++)
                    {
                        var id = "BioTest" + t;
                        @Html.HiddenFor(m => m.Tests[t].TestID);
                        <li class="@classes" listnumber="@listNumber" testid="@Model.Tests[t].TestID" id="@id">@Model.Tests[t].Name</li>
                        classes = origClasses;
                        listNumber++;
                    }
                </ul>
            </div>
            <div class="col-7 small-modal-padding testvalues">
                @{
                    TestValuesViewModel testValuesViewModel = new TestValuesViewModel()
                    {
                        Test = Model.Tests.FirstOrDefault(),
                        TestValues = Model.TestValues,
                        ListNumber = 0
                    };
                    await Html.RenderPartialAsync("_TestValues", testValuesViewModel);
                }
            </div>
        </div>
    </div>
</form>

<script>
    $(".biomarkers-test-name").on("click", function (e) {
        console.log("inside of the click");
        if (!$(this).hasClass("selected")) {
            if ($("._testvalues").hasClass("changed")) {
                console.log("inside of if state")
                if ($(".edit-mode-input").hasClass("on")) {
                    $.ajax({
                        async: false,
                        url: "/Biomarkers/SaveTestModal?ID=" + $(this).attr("ID"),
                        type: 'GET',
                        cache: false,
                        success: function (data) {
                            $.fn.OpenModal('save-test-modal', 'save-bio-test-modal', data);
                        }
                    });
                }
                else {
                    console.log("change form");
                    $.fn.ChangeTest($(this));
                }
            }
            else {
                console.log("change form");
                $.fn.ChangeTest($(this));
            }
        }
    });


    $("body").on("change", "input", function (e) {
        if (!$("._testvalues").hasClass("changed")) {
            $("._testvalues").addClass("changed");
        }
    });
</script>