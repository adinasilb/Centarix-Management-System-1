@*@model IEnumerable<PrototypeWithAuth.ViewModels.ExpensesPaymentListViewModel>*@
@*@model IEnumerable<PrototypeWithAuth.ViewModels.MonthlyTotalsViewModel>*@

@{
    ViewData["Title"] = "ExpensesPaymentList";
    Layout = "~/Views/Shared/PaymentView.cshtml";
}
@{int[] parentCat = new int[] { };
    int index = 0;}
<h1>Expenses</h1>





@*<table class="table">
            <thead>
                <tr>
                   @foreach (var categoryName in Model.ParentCategory)
                    {
                    <th>
                        @Html.DisplayFor(category => categoryName.ParentCategoryDescription)
                    </th>
                    }
    </thead>
            @foreach (var parentRequest in Model.ParentRequests).GroupBy(x => new{x.OrderDate.Month, x.Requests.FirstOrDefault().Product.ProductSubcategory.ParentCategory }))
            {
                <tbody>
                    <tr>
                        @if (parentRequest.Requests.FirstOrDefault().Product.ProductSubcategory.ParentCategoryID == (parentCat[index]))
                        {
                            <td>
                                @Html.DisplayFor(modelItem => parentRequest.Requests.FirstOrDefault().Cost)

                                @Html.DisplayFor(modelItem => parentRequest.Requests.FirstOrDefault().Product.ProductSubcategory.ParentCategory.ParentCategoryDescription)
                            </td>
                        }
                        @{index++;}
                    </tr>
                </tbody>


                    <td>
                        <a asp-action="Edit" asp-route-id="@item.ParentRequestID">Edit</a> |
                        <a asp-action="Details" asp-route-id="@item.ParentRequestID">Details</a> |
                        <a asp-action="Delete" asp-route-id="@item.ParentRequestID">Delete</a>
                    </td>
            }
        </table>*@

@*@foreach (var group in Model.GroupBy(m => m.ParentCategory))
        {
    <div>
        <table style="float: left">

            <thead>
                <tr>
                    <th>
                        @Html.DisplayFor(groupModel => group.Key.ParentCategoryDescription)
                    </th>

            </thead>



            <tbody>
                <tr>

                    @foreach (var item in group)
                    {

                        <td>
                            @Html.DisplayFor(modelItem => item.Total)
                        </td>
                    }

                </tr>

            </tbody>

        </table>
        </div>
            }*@



@*<table style="float: left">
        <thead>
            <tr>
                @foreach (var parentCat in Model.First().ParentCategories)
                    {
                    <th>
                        @Html.DisplayFor(parentCat => parentCat.ParentCategoryDescription)
                    </th>
                    }
                <th>
                    @Html.DisplayNameFor(model => model.Month)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.GrandTotal)
                </th>

        </thead>
        @foreach (var group in Model.GroupBy(m => new { m.Year, m.Month, m.TotalsForCat.First().ParentCategory }))
        {
            <tbody>

                <tr>
                    @foreach (var item in group)
                    {
                        <td>
                            @Html.DisplayFor(modelItem => item.Month) /
                            @Html.DisplayFor(modelItem => item.Year)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.TotalsForCat.First().Total)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.GrandTotal)
                        </td>
                    }
                </tr>
            </tbody>
        }
    </table>*@



@*___this is the view that allows for monthly categorization and grant total per month*@


@*<table class="table">
        <thead>
            <tr>
                <th>
                    @Html.DisplayNameFor(model => model.Month)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.GrandTotal)
                </th>

        </thead>
        @foreach (var group in Model.GroupBy(m => new { m.Year, m.Month }))
    {
    <tbody>

        <tr>
            @foreach (var item in group)
            {
                <td>
                    @Html.DisplayFor(modelItem => item.Month) /
                    @Html.DisplayFor(modelItem => item.Year)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.GrandTotal)
                </td>
            }
        </tr>
    </tbody>
    }
    </table>*@

@*<table class="table">
        <tr>
            <th>File No.</th>
            <th>Client</th>
            <th>Grand Total</th>

            @foreach (var item in Model)
            {
                <th></th>
                foreach (var monthlyTotal in item.MonthlyTotals)
                {
                    <th>@Html.DisplayFor(model => monthlyTotal.Date)</th>
                }
            }
        </tr>

        @foreach (var item in Model)
        {
            <tr>

                <td>@item.GrandTotal</td>

                @foreach (var monthlyTotal in item.MonthlyTotals)
                {
                    <td>@Html.DisplayFor(model => monthlyTotal.Date)</td>
                    <td>@monthlyTotal.Amount</td>
                }
            </tr>
        }

    </table>*@
@*@foreach (var group in Model.GroupBy(m => m.Year))
    {
        <ul>
            <li>
                @group.Key
                <ul>
                    @foreach (var item in group)
                    {
                        <li>
                            @Html.DisplayFor(modelItem => item.GrandTotal)
                        </li>
                    }
                </ul>

            </li>
        </ul>
    }*@


@*@foreach (var group in Model.ParentRequests.GroupBy(x => new
    //{x.OrderDate.Month@*, x.Requests.FirstOrDefault().Product.ProductSubcategory.ParentCategory*@
@*@foreach (var categoryName in Model.ParentCategories)
        {
    <tr>
        @foreach (var parentRequest in Model.ParentRequests).GroupBy(x => new
    {
        x.OrderDate.Month, x.Requests.FirstOrDefault().Product.ProductSubcategory.ParentCategory }))
        {
            @if (parentRequest.Requests.FirstOrDefault().Product.ProductSubcategory.ParentCategoryID == (categoryName.ParentCategoryID))
            {
                <td>
                    @Html.DisplayFor(modelItem => parentRequest.Requests.FirstOrDefault().Cost)

                    @Html.DisplayFor(modelItem => parentRequest.Requests.FirstOrDefault().Product.ProductSubcategory.ParentCategory.ParentCategoryDescription)
                </td>
            }
            else
            {
                <td>
                </td>
            }
        }

    <td>
        <a asp-action="Edit" asp-route-id="@item.ParentRequestID">Edit</a> |
        <a asp-action="Details" asp-route-id="@item.ParentRequestID">Details</a> |
        <a asp-action="Delete" asp-route-id="@item.ParentRequestID">Delete</a>
    </td>
        }
    </tr>*@



@*</tbody>*@

