@model PrototypeWithAuth.ViewModels.RequestItemViewModel
@using PrototypeWithAuth.AppData
@{
    var color = "order-inv-color";
    var dollarDisabled = "disabled disabled-text";
    var shekelDisabledText = "";
    var shekelReadOnly = "false";
    var hideVat = "";
    var hasQuoteClass = "";
    var hasWarningClass = "";
    var submitOrderClass = " submitOrder ";
    if (TempData[AppUtility.TempDataTypes.MenuType.ToString()].Equals(AppUtility.MenuItems.LabManagement.ToString()))
    {
        color = "lab-man-color";
    }
    TempData.Keep();
    if (Model.Requests[0].Currency == "USD")
    {
        dollarDisabled = "";
        shekelDisabledText = "disabled-text";
        shekelReadOnly = "readonly";
    }
    if (Model.Requests[0].IncludeVAT == false)
    {
        hideVat = "d-none";
    }

  
    if (Model.HasWarnings)
    {
        submitOrderClass="";
        hasWarningClass="open-product-warnings";
    }
}

<script src="~/js/site.js" asp-append-version="true"></script>
<script src="~/js/validate.js" asp-append-version="true"></script>
<script src="~/js/Validation/ReorderFormValidation.js"></script>
<script src="~/js/SubUnit.js"></script>
<script src="~/js/IndexTablePartial.js"></script>
<div class="modal modal-view reorderModal fader on-form-modal " id="myModal" role="dialog" aria-labelledby="Request" data-backdrop="false" style="z-index: 6000;">

    <div class="modal-dialog-centered modal-xl mx-auto" role="document">

        <div class="modal-content d-inline-block modal-box-shadow modal-border-radius mx-auto">
            <button type="button" class="close modal-close-padding modal-close-style" @*data-dismiss="modal"*@ aria-label="Close" onclick="$.fn.CloseModal('reorder-item');">
                <span aria-hidden="true">&times;</span>
            </button>
            <form action="" id="myForm" method="post" enctype="multipart/form-data" style="height: 100%; overflow: auto;" class="modal-padding reorderForm">
                <!--<input type="hidden" asp-for="TempRequestListViewModel.GUID" class="hidden-guid" />--> @*for reloading the partial view*@

                @{ await Html.RenderPartialAsync("_TempRequestHiddenFors.cshtml", Model.TempRequestListViewModel); }

                @*
                    NOTE: The select boxes are disabled as they cannot be edited, yet in order to pass the values into the controlller-
                    they need the hiddenfors that are right underneath it
                *@

                @Html.HiddenFor(model => model.Requests.FirstOrDefault().RequestID)
                <input type="hidden" asp-for="Requests[0].ExchangeRate" id="exchangeRate" />
                <input type="hidden" asp-for="Requests[0].Currency" id="currency" />

                @Html.HiddenFor(model => model.PageType) @*JS shoulde be taking this as a string *@
                @Html.HiddenFor(model => model.Requests.FirstOrDefault().ApplicationUserCreatorID)

                <div asp-validation-summary="ModelOnly" class="text-danger-centarix"></div>
                <input type="hidden" asp-for="Requests[0].RequestID" />

                <!-- Modal Header -->
                <div class="new-modal-header no-box-shadow modal-header-padding " style="border-bottom:0 !important">

                    <div class="form-group mb-3 ">
                        <div class="row px-5 error-message">
                            @{ await Html.RenderPartialAsync("_ErrorMessage", Model.ErrorMessage); }
                        </div>
                        <div class="row modal-title-line">
                            <div class="col-1">
                                @if (Model.Requests[0].Product.ProductSubcategory.ImageURL != null)
                                {
                                    var imageurl = Model.Requests[0].Product.ProductSubcategory.ImageURL;<img src="@imageurl" alt="Image" width="75" class="category-image" />
                                }
                                else
                                {
                                    <img src="~/images/css/accounting/sample_image.png" alt="Image" width="75" class="category-image" />
                                }
                            </div>

                            <div class="col-5 heading-1">
                                @Model.Requests[0].Product.ProductName
                            </div>

                        </div>


                        <div class="row">
                            <hr class="col-12" />
                        </div>

                    </div>
                    <div class="modal-body">
                        @{await Html.RenderPartialAsync("_PriceTabPartial", Model);}

                        <div class="mt-3 pb-4">
                            <hr class="col-12" />
                        </div>
                    </div>

                    <div class="form-group mx-auto text-center mb-4">
                        <div class="row">
                            <div class="col-4">
                                @if (Model.HasQuote)
                                {
                                    <span class="text text-danger-centarix d-block">This product already has a quote</span>
                                }
                                else
                                {
                                    <span class="text d-block">&ensp;</span>
                                }
                                <button type="submit" name="OrderMethod" @*asp-action="ReOrderFloatModalView"*@ value="@AppUtility.OrderMethod.RequestPriceQuote"
                                        class="p-0 section-outline-color custom-button create-modal-submit @submitOrderClass @hasWarningClass" productID="@Model.Requests[0].ProductID">
                                    @AppUtility.GetDisplayNameOfEnumValue(AppUtility.OrderMethod.RequestPriceQuote.ToString())
                                </button>

                            </div>
                            <div class="col-4">
                                <span class="text d-block">&ensp;</span>
                                <button type="submit" name="OrderMethod" value="@AppUtility.OrderMethod.OrderNow"
                                        class="p-0 section-outline-color custom-button create-modal-submit  @submitOrderClass  @hasWarningClass"
                                        productID="@Model.Requests[0].ProductID">
                                    @AppUtility.GetDisplayNameOfEnumValue(AppUtility.OrderMethod.OrderNow.ToString())
                                </button>

                            </div>
                            <div class="col-4">
                                <span class="text d-block">&ensp;</span>
                                <button type="submit" name="OrderMethod" value="@AppUtility.OrderMethod.AddToCart"
                                        class="p-0 section-outline-color custom-button  create-modal-submit @submitOrderClass  @hasWarningClass"
                                        productID="@Model.Requests[0].ProductID">
                                    @AppUtility.GetDisplayNameOfEnumValue(AppUtility.OrderMethod.AddToCart.ToString())
                                </button>

                            </div>
                        </div>
                        <div class="row">
                            <div class="col-4">
                                <span class="small-text">Ask the secretary to get a price quote</span>
                              
                            </div>
                            <div class="col-4">
                                <span class="small-text">If you want to process a single order imediately</span>
                            </div>
                            <div class="col-4">
                                <span class="small-text">If you want to order multiple items</span>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-4">
                                <button type="submit" name="OrderMethod" value="@AppUtility.OrderMethod.AlreadyPurchased"
                                        class="p-0 section-outline-color custom-button create-modal-submit  @submitOrderClass  @hasWarningClass"
                                        productID="@Model.Requests[0].ProductID">
                                    @AppUtility.GetDisplayNameOfEnumValue(AppUtility.OrderMethod.AlreadyPurchased.ToString())
                                </button>

                            </div>

                            <div class="col-4">
                                <button type="button" class="custom-cancel custom-button create-modal-submit" @*data-dismiss="modal"*@ onclick="$.fn.CloseModal('reorder-item');">Cancel</button>

                            </div>
                        </div>
                        <div class="row">
                            <div class="col-4">
                                <span class="small-text">Update the purchase of an item</span>
                            </div>


                        </div>


                    </div>
                </div>
            </form>
        </div>
    </div>
</div>
<script>
    $(".submitOrder").off('click').on("click", function (e) {
        e.preventDefault();
        var orderMethod = $(this).val();
        $.fn.SubmitOrderFunction(orderMethod);
        //return false;
    });

    $.fn.SubmitOrderFunction = function (orderMethod)
    {
        console.log("submit reorder");
        //alert("validate form");
        $(".reorderForm").data("validator").settings.ignore = "";
        var valid = $(".reorderForm").valid();
        console.log("valid form: " + valid)
        if (!valid) {
            if (!$('.activeSubmit').hasClass('disabled-submit')) {
                $('.activeSubmit').addClass('disabled-submit')
            }
        }
        else {
            //$('.activeSubmit').removeClass('disabled-submit')
            $('.submitOrder').prop('disabled', true)
            $("#loading").show();
            var formData = new FormData($(".reorderForm")[0]);
            console.log(...formData)
             $.ajax({
                contentType: false,
                processData: false,
                async: true,
                 url: "/Requests/ReOrderFloatModalView?OrderMethod=" + orderMethod,
                data: formData,
                traditional: true,
                type: "POST",
                cache: false,
                success: function (data) {
                    $("#loading").hide();

                    if (orderMethod == 'RequestPriceQuote') {
                        $('.submitOrder').prop('disabled', false)
                        //this if is not necessary right now because everythin is always _indextabledata
                        var sidebarType = $('#masterSidebarType').val();
                        var viewClass = "_IndexTableData";
                        if (sidebarType == "Quotes" || sidebarType == "Orders" || sidebarType == "Cart") {
                            viewClass = "_IndexTableDataByVendor";
                        }
                        //if (sidebarType = "MyLists") {
                        //    viewClass = "_IndexTableWithListTabs";
                        //}
                        $.fn.ajaxPartialIndexTable("/Requests/" + viewClass, "." + viewClass, "POST", formData, "reorder-item");

                    }
                    else {
                        $(".modal .temprequesthiddenfors").html('');
                        //if (orderMethod == 'AddToCart') {
                        //    $("_IndexTableData").html(data);
                        //    $.fn.CloseModal('reorder-item');
                        //}
                        //else {
                        //alert("$.fn.OpenModal('modalStep1', 'step-1', data)");
                        $.fn.OpenModal('modalStep1', 'step-1', data)
                        $('.submitOrder').prop('disabled', false)
                        //}
                    }
                    return true;
                },
                error: function (jqxhr) {
                    /*if (jqxhr.status == 500) {
                        console.log('error');
                        $.fn.OpenModal('reorderModal', 'reorder-item', jqxhr.responseText)
                    }*/
                    $('.reorder-item .error-message').html(jqxhr.responseText)
                    $("#loading").hide();
                    $('.submitOrder').prop('disabled', false)
                    return true;
                }
            });
        }
        $(".reorderForm").data("validator").settings.ignore = ':not(select:hidden, .location-error:hidden,input:visible, textarea:visible)';

    }

    $(".open-product-warnings").off('click').on("click", function (e) {
            e.preventDefault();        
            $("#loading").show(); 
            var productID = $(this).attr("productID");
            $.ajax({
                async: true,
                url: "/Requests/ProductsWarningModal?productID=" + productID,
                type: "GET",
                cache: false,
                success: function (data) {
                    $("#loading").hide();
                    $.fn.OpenModal('productsWarningModal','products-warning-modal', data)
                    $(".open-product-warnings").addClass("submitOrder");
                    $(".open-product-warnings").off("click");
                    $(".submitOrder").removeClass("open-product-warnings");
                    $(".submitOrder").click(function (e) {
                        e.preventDefault();
                        
                        $.fn.SubmitOrderFunction($(this).val());
                      
                    });
                    return true;
                },
                error: function (jqxhr) {
                    
                    $('.reorder-item .error-message').html(jqxhr.responseText)
                    $("#loading").hide();
            
                    return true;
                }
            });
    });

</script>