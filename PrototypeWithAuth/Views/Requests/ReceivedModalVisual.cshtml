@model PrototypeWithAuth.ViewModels.ReceivedModalVisualViewModel

<table class="table table-sm border">
    @{
        int z = -1;
    }
    @for (int X = 0; X < Model.ParentLocationInstance.Height; X++)
    {
        <tr>
            @for (int y = 0; y < Model.ParentLocationInstance.Width; y++)
            {
                z++;
                var backgroundClass = " border";
                @if (Model.ChildrenLocationInstances.ToList().Count() >= z) //put this in an if statement so it won't run into an instance where it doesn't exist since it's not a foreach
                {
                    @Html.HiddenFor(vm => vm.ChildrenLocationInstances[z].LocationInstanceID);
                    @Html.HiddenFor(vm => vm.ChildrenLocationInstances[z].LocationInstanceParentID);
                    @Html.HiddenFor(vm => vm.ChildrenLocationInstances[z].Place);

                    if (Model.ChildrenLocationInstances[z].IsFull)
                    {
                        backgroundClass += " order-inv-background-color";
                        <td class="@backgroundClass" style="padding:0px; width:42px; height:42px;">
                            @Html.CheckBoxFor(m => m.ChildrenLocationInstances[z].IsFull, htmlAttributes: new { @checked = true, @disabled = "disabled" })
                        </td>
                    }
                    else
                    {
                        <td class="@backgroundClass" style="padding:0px;">
                            @Html.CheckBoxFor(m => m.ChildrenLocationInstances[z].IsFull, htmlAttributes: new { @checked = false, @class = "css-checkbox" })
                            @Html.LabelFor(m => m.ChildrenLocationInstances[z].IsFull, Model.ChildrenLocationInstances[z].Place + " ", htmlAttributes: new { @class = "css-label" })
                        </td>
                    }

                }

            }
        </tr>
    }
</table>