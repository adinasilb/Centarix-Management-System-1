@model PrototypeWithAuth.ViewModels.ConfirmEmailViewModel
@using PrototypeWithAuth.AppData
@{
    var bcColor = "order-inv-background-color";
    if (Model.TempRequestListViewModel.RequestIndexObject.SectionType == AppUtility.MenuItems.Operations)
    {
        bcColor = "oper-background-color";
    }
    else if (Model.TempRequestListViewModel.RequestIndexObject.SectionType == AppUtility.MenuItems.LabManagement)
    {
        bcColor = "lab-man-background-color";
    }
    else if (Model.TempRequestListViewModel.RequestIndexObject.SectionType == AppUtility.MenuItems.Requests)
    {
        bcColor = "order-inv-background-color";
    }
}


<div class="modal modal-view overflow-auto emailModal" id="myModal" role="dialog" aria-labelledby="Request" data-backdrop="false" style="z-index: 9200">

    <div class="modal-dialog modal-lg" role="document" style="max-height:100%; max-width:60rem; ">

        <div class="modal-content d-inline-block" style="width:58.96rem;">

            <div class="modal-header pb-0 border-bottom-0">
                <button type="button" class="close modal-close-padding modal-close-style cancelEmail" @*data-dismiss="modal"*@ aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>

            <form action="" method="post" enctype="multipart/form-data" style="height: 100%; " class="confirmEmailModalForm">
                <div class="row error-message">
                    @{ await Html.RenderPartialAsync("_ErrorMessage", Model.ErrorMessage); }
                </div>
                <input type="hidden" asp-for="TempRequestListViewModel.GUID" class="hidden-guid" />
                @Html.HiddenFor(model => model.TempRequestListViewModel.RequestIndexObject.PageType)
                @Html.HiddenFor(model => model.TempRequestListViewModel.RequestIndexObject.PageNumber)
                @Html.HiddenFor(model => model.TempRequestListViewModel.RequestIndexObject.SectionType)
                @Html.HiddenFor(model => model.TempRequestListViewModel.RequestIndexObject.SelectedCurrency)
                @*@Html.HiddenFor(model => modeTempRequestListViewModel.l.RequestIndexObject.SelectedPriceSort)*@
                @Html.HiddenFor(model => model.TempRequestListViewModel.RequestIndexObject.RequestStatusID)
                @Html.HiddenFor(model => model.TempRequestListViewModel.RequestIndexObject.SidebarFilterID)
                @Html.HiddenFor(model => model.TempRequestListViewModel.RequestIndexObject.SidebarType)
                @Html.HiddenFor(model => model.TempRequestListViewModel.RequestIndexObject.OrderType)
                @Html.HiddenFor(model => model.TempRequestListViewModel.RequestIndexObject.IsReorder)
                @Html.HiddenFor(model => model.TempRequestListViewModel.RequestIndexObject.ModalType)
                @Html.HiddenFor(model => model.TempRequestListViewModel.RequestIndexObject.ListID)
                @Html.HiddenFor(r => r.TempRequestListViewModel.TempRequestViewModels[0].Request.ParentRequestID)
                @Html.HiddenFor(r => r.TempRequestListViewModel.TempRequestViewModels[0].Request.ParentRequest.ParentRequestID)
                @Html.HiddenFor(r => r.TempRequestListViewModel.TempRequestViewModels[0].Request.ParentRequest.ApplicationUserID)
                @Html.HiddenFor(r => r.TempRequestListViewModel.TempRequestViewModels[0].Request.ParentRequest.Credit)
                @Html.HiddenFor(r => r.TempRequestListViewModel.TempRequestViewModels[0].Request.ParentRequest.OrderDate)
                @Html.HiddenFor(r => r.TempRequestListViewModel.TempRequestViewModels[0].Request.ParentRequest.OrderNumber)
                @Html.HiddenFor(r => r.TempRequestListViewModel.TempRequestViewModels[0].Request.ParentRequest.Shipping)
                @Html.HiddenFor(r => r.TempRequestListViewModel.TempRequestViewModels[0].Request.ParentRequest.SupplierOrderNumber)
                @Html.HiddenFor(r => r.TempRequestListViewModel.TempRequestViewModels[0].Request.ParentRequest.NoteToSupplier)
                @Html.HiddenFor(r => r.TempRequestListViewModel.TempRequestViewModels[0].Request.ParentRequest.Taxes)
                @*@{ await Html.RenderPartialAsync("_TempRequestHiddenFors.cshtml", Model.TempRequestListViewModel);}*@
                <input asp-for="RequestID" style="display: none;" />

                <div>
                    @{await Html.RenderPartialAsync("_OrderEmail", Model); }
                </div>

                <div class="modal-footer p-4">
                    <div class="m-auto">
                        <input type="button" class="custom-button custom-button-font @bcColor between-button-margin complete-order submitConfirmEmail" value="Confirm & Send Email" />

                        <input type="button" class="custom-cancel custom-button cancel-email cancelEmail" asp-action="CancelEmailModal @bcColor" value="Cancel Email" />
                    </div>
                </div>
                @*<script> //not sure why setting with js ????
            var today = new Date();
            var date = moment(today);
            document.getElementById("date").innerHTML = date.format("D MMM YYYY");
        </script>*@


            </form>

        </div>
    </div>
</div>
<script src="~/js/CreateItem.js"></script>
<script>
    $(".submitConfirmEmail").off('click').on("click", function (e) {
        e.preventDefault();
        console.log("submit confirm email");
        //alert("validate form");
   
        $('.activeSubmit').removeClass('disabled-submit')
        $(".confirmEmailModalForm").prop('disabled', true)
        $("#loading").show();
        $("#RedirectAction").val(window.location.href);
        //alert("window: " + window.location.href);
        console.log("$('#SectionType').val() : " + $("#masterSectionType").val())
        var formData = new FormData($(".confirmEmailModalForm")[0]);
        $.ajax({
            contentType: false,
            processData: false,
            async: true,
            url: "/Requests/ConfirmEmailModal",
            data: formData,
            traditional: true,
            type: "POST",
            cache: false,
            timeout: 7200000,
            success: function (data) {
                $(".submitConfirmEmail").prop('disabled', false)

                //this if is not necessary right now because everythin is always _indextabledata
                var sidebarType = $('#masterSidebarType').val();
                var viewClass = "_IndexTableData";
                if (sidebarType == "Quotes" || sidebarType == "Orders" || sidebarType == "Cart") {
                    viewClass = "_IndexTableDataByVendor";
                } 
                if (sidebarType == "Add") {
                    window.location.href ="/Requests/?PageType=RequestRequest&SectionType=Requests&SidebarType=List"
                }
                else {
                    $.fn.ajaxPartialIndexTable($(".request-status-id").val(), "/Requests/" + viewClass, "." + viewClass, "POST", formData, "terms, step-1, reorder-item, confirm-email");

                }
                                         
                $("#loading").hide();
                return true;
            },
            error: function (jqxhr) {
                console.log('confirm email modal error')
                /*if (jqxhr.status == 500) {
                    $.fn.OpenModal('termsModal', 'terms', jqxhr.responseText);
                }*/
                $('.confirmEmailModalForm .error-message').html(jqxhr.responseText)
                $(".submitConfirmEmail").prop('disabled', false)
                $("#loading").hide();
                return true;
            }
        });

     });

    $('.cancelEmail').off('click').on('click', function (e) {
        e.preventDefault();
        console.log("in cancel email");
        var guid = $('#GUID').val();
        var sequence = $("#SequencePosition").val();
        var e = $.fn.AddTempRequestHiddenFors(guid, sequence, '.termsModal .temprequesthiddenfors');
        if (!e) {
            $.fn.CloseModal('confirm-email');
        }
    })
</script>