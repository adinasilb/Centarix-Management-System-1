@model IPagedList<PrototypeWithAuth.Models.Request>
@using PrototypeWithAuth.AppData;

@using PrototypeWithAuth.Data;
@using Microsoft.AspNetCore.Identity
@inject SignInManager<ApplicationUser> SignInManager

@using X.PagedList.Mvc.Core; @* import this so we get our HTML Helper *@
@using X.PagedList; @* import this so we can cast our list to IPagedList (only necessary because ViewBag is dynamic)*@

<!-- import the included stylesheet for some (very basic) default styling -->
@*<link href="/Content/PagedList.css" rel="stylesheet" type="text/css" />*@


@{
    ViewData["Title"] = "Index";

    Layout = "~/Views/Shared/RequestNavView.cshtml";
    /*
     * BEGIN REMEMBERING DATA
     */
    if (TempData["TempPage"] != null)
    {
        TempData["TempPage"] = TempData["TempPage"];
    }
    if (TempData["TempRequestStatusID"] != null)
    {
        TempData["TempRequestStatusID"] = TempData["TempRequestStatusID"];
    }
    if (TempData["TempSubcategoryID"] != null)
    {
        TempData["TempSubcategoryID"] = TempData["TempSubcategoryID"];
    }
    if (TempData["TempVendorID"] != null)
    {
        TempData["TempVendorID"] = TempData["TempVendorID"];
    }
    if (TempData["TempApplicationUserID"] != null)
    {
        TempData["TempApplicationUserID"] = TempData["TempApplicationUserID"];
    }
    if (TempData["TempPageType"] != null)
    {
        TempData["TempPageType"] = TempData["TempPageType"];
    }
    /*RequestsSearchViewModel?
    TempData["TempRequestsSearchViewModel"] = requestsSearchViewModel;*/
    /*
     * BEGIN REMEMBERING DATA
     * follow through on the modals these will be remembered on top
     */

    bool search = false;
    if (TempData["Search"] != null)
    {
        if (TempData["Search"].ToString() == "True")
        {
            search = true;
        }
    }

    int vendorID = 0; int subcategoryID = 0; string applicationUserID = null;
    if (TempData["VendorID"] != null)
    {
        vendorID = (int)TempData["VendorID"];
    }
    else if (TempData["SubcategoryID"] != null)
    {
        subcategoryID = (int)TempData["SubcategoryID"];
    }
    else if (TempData["ApplicationUserID"] != null)
    {
        applicationUserID = TempData["ApplicationUserID"].ToString();
    }

    var PageType = TempData["PageType"];

    //saving the info in a bool so I don't need to retest it against the enum anytime i want to see it in the page
    bool Request = false;
    bool Inventory = false;
    if (PageType.Equals(AppUtility.RequestPageTypeEnum.Request))
    {
        Request = true;
    }
    else if (PageType.Equals(AppUtility.RequestPageTypeEnum.Inventory))
    {
        Inventory = true;
    }

    string newButtonText = "";
    string orderedButtonText = "";
    string receivedButtonText = "";

    string newActiveClass = "";
    string orderedActiveClass = "";
    string receivedActiveClass = "";

    if (!search)
    {
        newButtonText = "New [" + TempData["AmountNew"].ToString() + "]";
        orderedButtonText = "Ordered [" + TempData["AmountOrdered"].ToString() + "]";
        receivedButtonText = "Received [" + TempData["AmountReceived"].ToString() + "]";

        //newActiveClass = "btn btn-outline-secondary text-dark new-button"; //used to be this...
        newActiveClass = "new-button";
        orderedActiveClass = "new-button";
        receivedActiveClass = "new-button";

        //changing the classes for the action links based on the tempdata of request status
        int requestStatusID = 0;
        int.TryParse(TempData["RequestStatusID"].ToString(), out requestStatusID);
        switch (requestStatusID)
        {
            case 1:
            case 4:
            case 5:
                //newActiveClass = "btn btn-secondary text-dark new-button"; //used to be this...
                newActiveClass = "new-button active";
                break;
            case 2:
                orderedActiveClass = "new-button active";
                break;
            case 3:
                receivedActiveClass = "new-button active";
                break;
        }
    }

}

@*<h1>Index</h1>

    <p>
        <a asp-action="Create">Create New</a>
    </p>*@
@if (PageType.Equals(AppUtility.RequestPageTypeEnum.Request) && !search)
{
    <div class="row mt-5 ml-5">
        <div class="">
            <ul class="list-inline">
                <li class="list-inline-item active mr-3">

                    <a class="@newActiveClass" href="@Url.ActionLink("Index", "Requests", new { @applicationUserID = applicationUserID, @vendorID = vendorID, @subcategoryID = subcategoryID, @RequestStatusID = 1, @PageType = AppUtility.RequestPageTypeEnum.Request })"><i class="far fa-file-alt"></i> &nbsp;&nbsp;  @newButtonText </a>
                    @*<img src="~/images/css/inventory/icons/new_tab.png" alt="New" />*@

                    @*@Html.ActionLink(newButtonText, "Index", "Requests", new //used to be this...
                        {
                            @applicationUserID = applicationUserID,
                            @vendorID = vendorID,
                            @subcategoryID = subcategoryID,
                            @RequestStatusID = 1,
                            @PageType = AppUtility.RequestPageTypeEnum.Request
                        },
                         new {
                             @class = newActiveClass
                         })*@
                </li>
                <li class="list-inline-item mr-3">

                    <a class="@orderedActiveClass" href="@Url.ActionLink("Index", "Requests", new { @applicationUserID = applicationUserID, @vendorID = vendorID, @subcategoryID = subcategoryID, @RequestStatusID = 2, @PageType = AppUtility.RequestPageTypeEnum.Request })"> <i class="far fa-calendar-check"></i>  &nbsp;&nbsp; @orderedButtonText</a>

                    @*@Html.ActionLink(orderedButtonText, "Index", "Requests", new { @applicationUserID = applicationUserID, @vendorID = vendorID, @subcategoryID = subcategoryID, @RequestStatusID = 2, @PageType = AppUtility.RequestPageTypeEnum.Request }, new { @class = orderedActiveClass })*@

                </li>
                <li class="list-inline-item ">

                    <a class="@receivedActiveClass" href="@Url.ActionLink("Index", "Requests", new { @applicationUserID = applicationUserID, @vendorID = vendorID, @subcategoryID = subcategoryID, @RequestStatusID = 3, @PageType = AppUtility.RequestPageTypeEnum.Request })"> <i class="fas fa-check"></i> &nbsp;&nbsp;  @receivedButtonText</a>

                    @*@Html.ActionLink(receivedButtonText, "Index", "Requests", new { @applicationUserID = applicationUserID, @vendorID = vendorID, @subcategoryID = subcategoryID, @RequestStatusID = 3, @PageType = AppUtility.RequestPageTypeEnum.Request }, new { @class = receivedActiveClass })*@
                </li>
            </ul>
        </div>
    </div>
}
<div class="mx-5">
    <table class="table table-headerspaced table-noheaderlines table-hover">
        <thead>
            <tr class="text-center">
                @*<th>@Html.DisplayNameFor(model => model[0].Product.ProductMedia)</th>*@
                <th>Item Image</th>
                @*<th>@Html.DisplayNameFor(model => model[0].Product.ProductName)</th>*@
                <th>Item Name</th>
                @*<th>@Html.DisplayNameFor(m => m[0].Product.Vendor.VendorEnName)</th>*@
                <th>Vendor</th>
                <th>Amount</th> @*Placeholder until we insert total*@
                @*Later on should have a better location...*@
                @if (Inventory)
                {
                    <th> Location </th>
                }
                <th>@Html.DisplayNameFor(m => m[0].Product.ProductSubcategory.ProductSubcategoryDescription)</th>
                @*<th>@Html.DisplayNameFor(m => m[0].ParentRequest.ApplicationUser.FirstName) @Html.DisplayNameFor(m => m[0].ParentRequest.ApplicationUser.LastName)</th>*@
                <th>Owner</th>
                <th>@Html.DisplayNameFor(m => m[0].ParentRequest.OrderDate)</th>
                @*here for testing purposes*@
                <th>@Html.DisplayNameFor(m => m[0].RequestStatus.RequestStatusDescription)</th>
                <th></th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
                <tr class="text-center inv-list-item">
                    <td> <img src="~/images/css/inventory/Type/bottle.png" alt="Alternate Text" /> </td>

                    <td> <button class="btn btn-link load-product-details" value="@item.RequestID" data-target="item" href="item">@Html.DisplayFor(modelItem => item.Product.ProductName) </button></td>

                    <td> @Html.DisplayFor(modelItem => item.Product.Vendor.VendorEnName) </td>

                    <td>
                        <ul style="list-style: none;">

                            @if (item.Unit != null)
                            {
                                <li>
                                    @Html.DisplayFor(modelItem => item.Unit)
                                    @Html.DisplayFor(modelItem => item.UnitType.UnitTypeDescription)
                                </li>
                                @if (item.SubUnit != null)
                                {
                                    <li>
                                        @Html.DisplayFor(modelItem => item.SubUnit)
                                        @Html.DisplayFor(modelItem => item.SubUnitType.UnitTypeDescription)
                                    </li>
                                    @if (item.SubSubUnit != null)
                                    {
                                        <li>
                                            @Html.DisplayFor(modelItem => item.SubSubUnit)
                                            @Html.DisplayFor(modelItem => item.SubSubUnitType.UnitTypeDescription)
                                        </li>
                                    }
                                }

                            }

                            <li>
                                @*@Html.DisplayFor(modelItem => item.Cost)*@
                                @{
                                    decimal cost = (decimal)item.Cost;
                                    string formattedCost = cost.ToString("C02");
                                }
                                @formattedCost
                            </li>
                        </ul>
                    </td> @*Computed column?*@

                    @*Later on should have a better location...*@
                    @if (Inventory)
                    {
                        <td> (Freezer, Shelf, box...) </td>
                    }
                    <td> @Html.DisplayFor(modelItem => item.Product.ProductSubcategory.ProductSubcategoryDescription) </td>
                    <td> @Html.DisplayFor(modelItem => item.ParentRequest.ApplicationUser.FirstName) @Html.DisplayFor(modelItem => item.ParentRequest.ApplicationUser.LastName) </td>

                    <td> @Html.DisplayFor(modelItem => item.ParentRequest.OrderDate) </td>
                    @*here for testing purposes*@
                    <td> @Html.DisplayFor(modelItem => item.RequestStatus.RequestStatusDescription) </td>

                    <td>
                        @if (item.RequestStatusID == 1)
                        {
                            //this is a nested if b/c if user can't approve then i still don't want it to go the the else
                            if (SignInManager.IsSignedIn(User) & (User.IsInRole("Admin")))
                            {
                                @Html.ActionLink("Approve", "ConfirmEmailModal", new { id = item.RequestID, IsBeingApproved = true }, new { @class = "btn btn-link" });


                            }
                        }
                        else if (item.RequestStatusID == 2)
                        {
                            <button class="btn load-receive-and-location" value="@item.RequestID">Receive</button>
                        }
                        else
                        {
                            @*work on getting the correct syntax to create a new product with*@
                            <button class="btn btn-link load-order-details" value="@item.RequestID">Order</button>
                        }
                    </td>
                    <td>
                        <!-- Button to Open the Modals -->
                        @*<button class="btn btn-link load-product-details" value="@item.RequestID" data-target="item" href="item"> <img src="~/images/css/inventory/icons/view-eye.png" alt="Details" /> </button>*@
                        @*no need now that the item name link to the details modal*@
                        <button class="btn btn-link load-product-edit" value="@item.RequestID" data-target="item" href="item"> <img width="25" src="~/images/css/inventory/icons/comments_selected.png" alt="Edit" /> </button>
                   
                    </td>
                    <td>
                        <button class="btn btn-link" asp-action="Delete" value="@item.RequestID" data-target="item" href="item"> Delete </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

<!-- output a paging control that lets the user navigation to the previous page, next page, etc
page
    @Html.PagedListPager(Model, page => Url.Action("Index", new { page }))
    commented out for now, until can be CSSed back into place how shimon wants it
-->
