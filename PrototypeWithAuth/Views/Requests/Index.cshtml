@model PrototypeWithAuth.ViewModels.RequestIndexViewModel
@using PrototypeWithAuth.AppData;

@using PrototypeWithAuth.Data;
@using Microsoft.AspNetCore.Identity
@inject SignInManager<ApplicationUser> SignInManager

@using X.PagedList.Mvc.Core; @* import this so we get our HTML Helper *@
@using X.PagedList; @* import this so we can cast our list to IPagedList (only necessary because ViewBag is dynamic)*@

<!-- import the included stylesheet for some (very basic) default styling -->
@*<link href="/Content/PagedList.css" rel="stylesheet" type="text/css" />*@


@{
    ViewData["Title"] = "Index";

    Layout = "~/Views/Shared/RequestNavView.cshtml";
    /*
     * BEGIN REMEMBERING DATA
     */
    var backTextBool = false;
    string backText = "";
    string backLink = "";
    string pgt = "";

    //paged list booleans
    AppUtility.RequestPageTypeEnum plPageType = AppUtility.RequestPageTypeEnum.Request;
    int plRequestStatusID = 1;
    int plSubcategoryID = 0;
    int plVendorID = 0;
    string plApplicationUserID = null;
    int plParentLocationInstanceID = 0;


    if (TempData["TempPageType"] != null)
    {
        pgt = TempData["TempPageType"].ToString();
        TempData["TempPageType"] = TempData["TempPageType"];
    }
    <input type="hidden" asp-for=" Page" />
    <input type="hidden" asp-for="RequestStatusID" />
    <input type="hidden" asp-for="SubCategoryID" />
    <input type="hidden" asp-for="PageType" />
    <input type="hidden" asp-for="VendorID" />
    <input type="hidden" asp-for="ApplicationUserID" />
    <input type="hidden" asp-for="RequestParentLocationInstanceID" />
    if (Model.SubCategoryID > 0)
    {
        backTextBool = true;
        backText = Model.VendorID.ToString();
        backLink = Url.ActionLink("Index", "ProductSubcategories", new { @PageType = Model.PageType }).ToString();
    }
    if (Model.VendorID > 0)
    {
        backTextBool = true;
        backText = Model.VendorID.ToString();
        backLink = Url.ActionLink("Index", "Vendors", new { @PageType = Model.PageType }).ToString();
    }
    if (!string.IsNullOrEmpty(Model.ApplicationUserID))
    {
        backTextBool = true;
        backText = Model.ApplicationUserID;
        backLink = Url.ActionLink("Index", "ApplicationUsers", new { @PageType = pgt }).ToString();
    }


    bool search = false;
    if (TempData["Search"] != null)
    {
        if (TempData["Search"].ToString() == "True")
        {
            search = true;
        }
    }

    int vendorID = Model.VendorID; int subcategoryID = Model.SubCategoryID; string applicationUserID = Model.ApplicationUserID;


   

    //saving the info in a bool so I don't need to retest it against the enum anytime i want to see it in the page
    bool Request = false;
    bool Inventory = false;
    bool Summary = false;
    if (Model.PageType.Equals(AppUtility.RequestPageTypeEnum.Request))
    {
        Request = true;
    }
    else if (Model.PageType.Equals(AppUtility.RequestPageTypeEnum.Inventory))
    {
        Inventory = true;
    }
    else if (Model.PageType.Equals(AppUtility.RequestPageTypeEnum.Summary))
    {
        Summary = true;
    }

    string newButtonText = "";
    string orderedButtonText = "";
    string receivedButtonText = "";
    string approvedButtonText = "";

    string newActiveClass = "";
    string orderedActiveClass = "";
    string receivedActiveClass = "";
    string approvedActiveClass = "";
    int requestStatusID = 0;
    bool isEquipment =Model. PageType.Equals(AppUtility.LabManagementPageTypeEnum.Equipment);
    if (!search && !isEquipment)
    {
        newButtonText = "New [" + TempData["AmountNew"].ToString() + "]";
        orderedButtonText = "Ordered [" + TempData["AmountOrdered"].ToString() + "]";
        receivedButtonText = "Received [" + TempData["AmountReceived"].ToString() + "]";
        approvedButtonText = "Approved [" + TempData["AmountApproved"].ToString() + "]";

        //newActiveClass = "btn btn-outline-secondary text-dark new-button"; //used to be this...
        newActiveClass = "new-button pt-4 ";
        orderedActiveClass = "new-button pt-4 ";
        receivedActiveClass = "new-button pt-4 ";
        approvedActiveClass = "new-button pt-4 ";

        //changing the classes for the action links based on the tempdata of request status
        switch (Model.RequestStatusID)
        {
            case 1:
            case 4:
            case 5:
                //newActiveClass = "btn btn-secondary text-dark new-button"; //used to be this...
                newActiveClass = "new-button active  pt-4";
                break;
            case 2:
                orderedActiveClass = "new-button active pt-4";
                break;
            case 3:
                receivedActiveClass = "new-button active  pt-4";
                break;
            case 6:
                approvedActiveClass = "new-button active  pt-4";
                break;

        }
    }


}

@*<h1>Index</h1>

    <p>
        <a asp-action="Create">Create New</a>
    </p>*@
@if (TempData["OpenConfirmEmailModal"] != null)
{
    <input type="text" id="tdconfirmemail" class="hidden" value="@TempData["RequestID"]" />
}
@if (TempData["ParentRequestConfirmEmail"] != null)
{
    <input type="text" id="tdprconfirmemail" class="hidden" value="@TempData["ParentRequestID"]" />
}
@if (TempData["OpenTermsModal"] != null)
{
    var termsType = TempData["OpenTermsModal"].ToString();
    switch (termsType)
    {
        case "Single":
            <input type="text" id="tdterms" class="hidden" value="@TempData["RequestID"]" />
            break;
    }
}

@if (backTextBool)
{
    <div class="row">
        <a href="@backLink">
            <i class="fas fa-long-arrow-alt-left"></i> @backText
        </a>
    </div>
}

@if (TempData[AppUtility.TempDataTypes.PageType.ToString()].Equals(AppUtility.RequestPageTypeEnum.Request) && !search)
{
    <div class="">
        <div class="item-table">
            <ul class="pl-0">
                <li class="list-inline-item active m-0">
                    <a class="@newActiveClass " href="@Url.ActionLink("Index", "Requests", new { @applicationUserID = applicationUserID, @vendorID = vendorID, @subcategoryID = subcategoryID, @RequestStatusID = 1, @PageType = AppUtility.RequestPageTypeEnum.Request })"><i class="new-icon icon-centarix-icons-04"></i>  <label class="new-button-text">@newButtonText</label> </a>
                </li>
                <li class="list-inline-item m-0">
                    <a class="@approvedActiveClass " href="@Url.ActionLink("Index", "Requests", new { @applicationUserID = applicationUserID, @vendorID = vendorID, @subcategoryID = subcategoryID, @RequestStatusID = 6, @PageType = AppUtility.RequestPageTypeEnum.Request })"> <i class="new-icon icon-approve-24px"></i><label class="new-button-text">@approvedButtonText</label> </a>

                </li>

                <li class="list-inline-item m-0">
                    <a class="@orderedActiveClass " href="@Url.ActionLink("Index", "Requests", new { @applicationUserID = applicationUserID, @vendorID = vendorID, @subcategoryID = subcategoryID, @RequestStatusID = 2, @PageType = AppUtility.RequestPageTypeEnum.Request })"> <i class="new-icon icon-centarix-icons-03"></i><label class="new-button-text">@orderedButtonText</label> </a>
                </li>

                <li class="list-inline-item ">
                    <a class="@receivedActiveClass " href="@Url.ActionLink("Index", "Requests", new { @applicationUserID = applicationUserID, @vendorID = vendorID, @subcategoryID = subcategoryID, @RequestStatusID = 3, @PageType = AppUtility.RequestPageTypeEnum.Request })"> <i class="icon-done-24px new-icon"></i><label class="new-button-text">@receivedButtonText</label> </a>
                </li>
            </ul>
        </div>
    </div>
}
<table class="table table-headerspaced table-noheaderlines table-hover ">
    <thead>
        <tr class="text-center">
            @*<th>@Html.DisplayNameFor(model => model[0].Product.ProductMedia)</th>*@
            <th width="7%"></th>
            <th width="7%"></th>
            @*<th>@Html.DisplayNameFor(model => model[0].Product.ProductName)</th>*@
            <th width="15%">Item Name</th>
            @*<th>@Html.DisplayNameFor(m => m[0].Product.Vendor.VendorEnName)</th>*@
            <th width="7%">Vendor</th>
            @if (!Summary)
            {
                <th width="9%">
                    Amount

                </th>
            }

            @*Placeholder until we insert total*@
            <th width="10%">
                @Html.DisplayNameFor(m => m.PagedList[0].Cost)
                <span class="d-inline-block">
                    <ul class="list-unstyled p-0 m-0">
                        <li>
                            <button id="pricePopover" type="button" data-toggle="popover" data-placement="bottom" data-trigger="focus" data-container="body" class="btn p-0 m-0 no-box-shadow">
                                <i class="icon-centarix-icons-17" style="font-size:1.6rem;">
                                </i>
                            </button>
                        </li>
                        <div style="display:none;" id="priceSortContent" class="">
                            @for (int i = 0; i < Model.PriceSortEnums.Count; i++)
                            {
                                var val = (int)(Model.PriceSortEnums[i].PriceSortEnum);
                                var id = "PriceSortEnums_" + i + "__Selected";
                                <div class="custom-control custom-checkbox order-inv-form" onclick="callIndexWithNewFilter(@val, @id)">
                                    <input type="checkbox" class="custom-control-input priceSort" enum="@Model.PriceSortEnums[i].PriceSortEnum" asp-for="PriceSortEnums[i].Selected" />
                                    <label class="custom-control-label" asp-for="PriceSortEnums[i].Selected">@Html.DisplayFor(e => Model.PriceSortEnums[i].PriceSortEnum)</label>
                                </div>
                            }

                        </div>

                    </ul>
                </span>
            </th>
            @*Later on should have a better location...*@
            @if (Inventory)
            {
                <th> Location </th>
            }
            <th width="10%">@Html.DisplayNameFor(m => m.PagedList[0].Product.ProductSubcategory.ProductSubcategoryDescription)</th>
            @*<th>@Html.DisplayNameFor(m => m[0].ParentRequest.ApplicationUser.FirstName) @Html.DisplayNameFor(m => m[0].ParentRequest.ApplicationUser.LastName)</th>*@

            @if (!Summary)
            {
                <th width="10%">Owner</th>
                if (Model.PagedList[0].RequestStatusID == 2)
                {
                    <th width="9%">
                        @Html.DisplayNameFor(m => m.PagedList[0].ParentRequest.OrderDate)
                    </th>
                }
                else if (Model.PagedList[0].RequestStatusID == 3)
                {
                    <th width="9%">@Html.DisplayNameFor(m => m.PagedList[0].ArrivalDate)</th>
                }
                else
                {
                    <th width="9%">Request Date</th>
                }
            }
            else
            {
                <th width="9%">Last Ordered</th>
            }
            <th width="9%"></th>

        </tr>
    </thead>
</table>
<div class="index-partial">
    @{
        await Html.RenderPartialAsync("_IndexTable", Model);

    }
</div>

<script>

        function callIndexWithNewFilter(val, id) {
            $(id).attr('checked', $(id).val());
            var selectedPriceSort = [];
            $(".priceSort:checked").each(function (e) {

                    selectedPriceSort.push($(this).attr("enum"));
                })
         //  alert(selectedPriceSort);
            $.ajax({
                async: true,
                url: "/Requests/_IndexTable",
                data: {
                    viewModel: JSON.stringify('@Html.Raw(Model)'),
                    selectedPriceSort : selectedPriceSort
                },
                contentType: 'application/json;',
                type: 'GET',
                cache: true,
                success: function (data) {
                    $(".index-partial").html(data);

                    return false;
                }
            });
            return false;
            }
</script>
