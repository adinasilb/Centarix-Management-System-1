@model IPagedList<PrototypeWithAuth.Models.Request>
@using PrototypeWithAuth.AppData;

@using PrototypeWithAuth.Data;
@using Microsoft.AspNetCore.Identity
@inject SignInManager<ApplicationUser> SignInManager

@using X.PagedList.Mvc.Core; @* import this so we get our HTML Helper *@
@using X.PagedList; @* import this so we can cast our list to IPagedList (only necessary because ViewBag is dynamic)*@

<!-- import the included stylesheet for some (very basic) default styling -->
@*<link href="/Content/PagedList.css" rel="stylesheet" type="text/css" />*@


@{
    ViewData["Title"] = "Index";

    Layout = "~/Views/Shared/RequestNavView.cshtml";
    /*
     * BEGIN REMEMBERING DATA
     */
    var backTextBool = false;
    string backText = "";
    string backLink = "";
    string pgt = "";

    //paged list booleans
    AppUtility.RequestPageTypeEnum plPageType = AppUtility.RequestPageTypeEnum.Request;
    int plRequestStatusID = 1;
    int plSubcategoryID = 0;
    int plVendorID = 0;
    string plApplicationUserID = null;
    int plParentLocationInstanceID = 0;


    if (TempData["TempPageType"] != null)
    {
        pgt = TempData["TempPageType"].ToString();
        TempData["TempPageType"] = TempData["TempPageType"];
    }
    if (TempData["TempPage"] != null)
    {
        TempData["TempPage"] = TempData["TempPage"];
    }
    if (TempData["TempRequestStatusID"] != null)
    {
        TempData["TempRequestStatusID"] = TempData["TempRequestStatusID"];
    }
    if (TempData["TempSubcategoryID"] != null)
    {
        if ((Int32)TempData["TempSubcategoryID"] > 0)
        {
            backTextBool = true;
            backText = TempData["TempSubcategoryID"].ToString();
            backLink = Url.ActionLink("Index", "ProductSubcategories", new { @PageType = pgt }).ToString();
        }
        TempData["TempSubcategoryID"] = TempData["TempSubcategoryID"];
    }
    if (TempData["TempVendorID"] != null)
    {
        if ((Int32)TempData["TempVendorID"] > 0)
        {
            backTextBool = true;
            backText = TempData["TempVendorID"].ToString();
            backLink = Url.ActionLink("Index", "Vendors", new { @PageType = pgt }).ToString();
        }
        TempData["TempVendorID"] = TempData["TempVendorID"];
    }
    if (TempData["TempApplicationUserID"] != null)
    {
        if (!string.IsNullOrEmpty(TempData["TempApplicationUserID"].ToString()))
        {
            backTextBool = true;
            backText = TempData["TempApplicationUserID"].ToString();
            backLink = Url.ActionLink("Index", "ApplicationUsers", new { @PageType = pgt }).ToString();
        }
        TempData["TempApplicationUserID"] = TempData["TempApplicationUserID"];
    }
    if (TempData["ParentLocationInstanceID"] != null)
    {
        TempData["ParentLocationInstanceID"] = TempData["ParentLocationInstanceID"];
    }
    /*RequestsSearchViewModel?
    TempData["TempRequestsSearchViewModel"] = requestsSearchViewModel;*/
    /*
     * BEGIN REMEMBERING DATA
     * follow through on the modals these will be remembered on top
     */

    bool search = false;
    if (TempData["Search"] != null)
    {
        if (TempData["Search"].ToString() == "True")
        {
            search = true;
        }
    }

    int vendorID = 0; int subcategoryID = 0; string applicationUserID = null;
    if (TempData["VendorID"] != null)
    {
        vendorID = (int)TempData["VendorID"];
    }
    else if (TempData["SubcategoryID"] != null)
    {
        subcategoryID = (int)TempData["SubcategoryID"];
    }
    else if (TempData["ApplicationUserID"] != null)
    {
        applicationUserID = TempData["ApplicationUserID"].ToString();
    }

    var PageType = TempData[AppUtility.TempDataTypes.PageType.ToString()];

    //saving the info in a bool so I don't need to retest it against the enum anytime i want to see it in the page
    bool Request = false;
    bool Inventory = false;
    bool Summary = false;
    if (PageType.Equals(AppUtility.RequestPageTypeEnum.Request))
    {
        Request = true;
    }
    else if (PageType.Equals(AppUtility.RequestPageTypeEnum.Inventory))
    {
        Inventory = true;
    }
    else if (PageType.Equals(AppUtility.RequestPageTypeEnum.Summary))
    {
        Summary = true;
    }

    string newButtonText = "";
    string orderedButtonText = "";
    string receivedButtonText = "";
    string approvedButtonText = "";

    string newActiveClass = "";
    string orderedActiveClass = "";
    string receivedActiveClass = "";
    string approvedActiveClass = "";
    int requestStatusID = 0;
    bool isEquipment = PageType.Equals(AppUtility.LabManagementPageTypeEnum.Equipment);
    if (!search && !isEquipment)
    {
        newButtonText = "New [" + TempData["AmountNew"].ToString() + "]";
        orderedButtonText = "Ordered [" + TempData["AmountOrdered"].ToString() + "]";
        receivedButtonText = "Received [" + TempData["AmountReceived"].ToString() + "]";
        approvedButtonText = "Approved [" + TempData["AmountApproved"].ToString() + "]";

        //newActiveClass = "btn btn-outline-secondary text-dark new-button"; //used to be this...
        newActiveClass = "new-button pt-4 ";
        orderedActiveClass = "new-button pt-4 ";
        receivedActiveClass = "new-button pt-4 ";
        approvedActiveClass = "new-button pt-4 ";

        //changing the classes for the action links based on the tempdata of request status

        int.TryParse(TempData["RequestStatusID"].ToString(), out requestStatusID);
        switch (requestStatusID)
        {
            case 1:
            case 4:
            case 5:
                //newActiveClass = "btn btn-secondary text-dark new-button"; //used to be this...
                newActiveClass = "new-button active  pt-4";
                break;
            case 2:
                orderedActiveClass = "new-button active pt-4";
                break;
            case 3:
                receivedActiveClass = "new-button active  pt-4";
                break;
            case 6:
                approvedActiveClass = "new-button active  pt-4";
                break;

        }
    }


}

@*<h1>Index</h1>

    <p>
        <a asp-action="Create">Create New</a>
    </p>*@
@if (TempData["OpenConfirmEmailModal"] != null)
{
    <input type="text" id="tdconfirmemail" class="hidden" value="@TempData["RequestID"]" />
}
@if (TempData["ParentRequestConfirmEmail"] != null)
{
    <input type="text" id="tdprconfirmemail" class="hidden" value="@TempData["ParentRequestID"]" />
}
@if (TempData["OpenTermsModal"] != null)
{
    var termsType = TempData["OpenTermsModal"].ToString();
    switch (termsType)
    {
        case "Single":
            <input type="text" id="tdterms" class="hidden" value="@TempData["RequestID"]" />
            break;
    }
}

@if (backTextBool)
{
    <div class="row">
        <a href="@backLink">
            <i class="fas fa-long-arrow-alt-left"></i> @backText
        </a>
    </div>
}

@if (PageType.Equals(AppUtility.RequestPageTypeEnum.Request) && !search)
{
    <div class="">
        <div class="item-table">
            <ul class="pl-0">
                <li class="list-inline-item active m-0">
                    <a class="@newActiveClass" href="@Url.ActionLink("Index", "Requests", new { @applicationUserID = applicationUserID, @vendorID = vendorID, @subcategoryID = subcategoryID, @RequestStatusID = 1, @PageType = AppUtility.RequestPageTypeEnum.Request })"><i class="new-icon icon-centarix-icons-04"></i>  <label class="new-button-text">@newButtonText</label> </a>
                </li>
                <li class="list-inline-item m-0">
                    <a class="@approvedActiveClass" href="@Url.ActionLink("Index", "Requests", new { @applicationUserID = applicationUserID, @vendorID = vendorID, @subcategoryID = subcategoryID, @RequestStatusID = 6, @PageType = AppUtility.RequestPageTypeEnum.Request })"> <i class="new-icon icon-approve-24px"></i><label class="new-button-text">@approvedButtonText</label> </a>

                </li>

                <li class="list-inline-item m-0">
                    <a class="@orderedActiveClass" href="@Url.ActionLink("Index", "Requests", new { @applicationUserID = applicationUserID, @vendorID = vendorID, @subcategoryID = subcategoryID, @RequestStatusID = 2, @PageType = AppUtility.RequestPageTypeEnum.Request })"> <i class="new-icon icon-centarix-icons-03"></i><label class="new-button-text">@orderedButtonText</label> </a>
                </li>

                <li class="list-inline-item ">
                    <a class="@receivedActiveClass" href="@Url.ActionLink("Index", "Requests", new { @applicationUserID = applicationUserID, @vendorID = vendorID, @subcategoryID = subcategoryID, @RequestStatusID = 3, @PageType = AppUtility.RequestPageTypeEnum.Request })"> <i class="icon-done-24px new-icon"></i><label class="new-button-text">@receivedButtonText</label> </a>
                </li>
            </ul>
        </div>
    </div>
}


@{
    await Html.RenderPartialAsync("_IndexTable", new PrototypeWithAuth.ViewModels._IndexTableViewModel()
    {
        PagedList = Model,
        Request = Request,
        Inventory = Inventory,
        Summary = Summary,
        RequestStatusID = requestStatusID,
        IsEquipment = isEquipment
    });
}