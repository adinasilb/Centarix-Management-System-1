@model PrototypeWithAuth.ViewModels.RequestItemViewModel

@using Microsoft.AspNetCore.Identity
@using PrototypeWithAuth.Data
@using PrototypeWithAuth.AppData
@using PrototypeWithAuth.ViewModels

@{
    var markReadOnlyClass = "";
    if (Model.ModalType == AppUtility.RequestModalType.Edit || Model.ModalType == AppUtility.RequestModalType.Summary)
    {
        markReadOnlyClass = "mark-readonly";
    }

    var color = "order-inv-color";

    if (Model.SectionType == AppUtility.MenuItems.Operations)
    {

        color = "oper-color";
    }
}
<div class="row">
    <div class="col-10"><span class="heading-1 modal-tab-name text-left">Comments and ratings</span></div>

    <div class="col-2 container p-0 text-right">
        <ul class="list-unstyled">
            <li>
                <button href="#" id="addRequestComment" type="button" data-toggle="popover" data-placement="bottom" data-container="body" data-trigger="focus" class="no-box-shadow btn p-0 m-0 @markReadOnlyClass">
                    <i class="@color icon-add_circle-24px" style="
    font-size: 3rem;
"></i>
                </button>
            </li>

            <div style="display:none;" id="popover-content">

                @foreach (var item in Model.CommentTypes)
                {<div class="row px-3 comment-btn">
                        @if (item.Equals(AppUtility.CommentTypeEnum.Comment))
                        {
                            <i class="icon-comment-24px" style="color: #30BCC9; padding-top: .55rem; font-size: 1.25rem;"></i>
                        }
                        else
                        {
                            <i class="icon-report_problem-24px" style="color: var(--danger-color); padding-top: .55rem; font-size: 1.25rem;"></i>
                        }
                        <button type="button" id="@item" class="no-box-shadow btn bg-transparent row p-0 text-capitalize text-dark" style="font-size:1rem; font-weight:400;" onclick="$.fn.addRequestComment('@item')">@item</button><hr class="m-0" />

                    </div>
                }
            </div>

        </ul>
    </div>
</div>

<div id="comment-info">
    <input type="hidden" value="@Model.Comments.Count" id="index" />
    @for (int i = 0; i < Model.Comments.Count; i++)
    {
        await Html.RenderPartialAsync(Url.Content("../Requests/CommentInfoPartialView"), new CommentsInfoViewModel { Comment = Model.Comments[i], Index = i, IsEdit = true });
    }
</div>