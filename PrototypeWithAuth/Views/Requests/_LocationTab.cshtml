@model PrototypeWithAuth.ViewModels.RequestItemViewModel

@using Microsoft.AspNetCore.Identity
@using PrototypeWithAuth.Data
@using PrototypeWithAuth.AppData

<script src="~/js/customDropdown.js"></script>
@{
    var disabled = "mark-readonly disable-custom-mdbselect";
    var disable = "";
    if (Model.PageType == AppUtility.PageTypeEnum.RequestSummary)
    {
        disabled = "";

    }
    if (Model.Requests[0].RequestStatusID == 3)
    {
        disable = "disabled";
    }
}

<div class="row modal-tab-name" style="margin-bottom:0px">
    <span class="heading-1 col-4">Location</span>
    @{
        if (Model.ModalType == AppUtility.RequestModalType.Summary && Model.IsHistory == false && Model.Requests.FirstOrDefault().IsArchived == false && Model.SectionType != AppUtility.MenuItems.Protocols)
        {
            <div class="switch col-4 offset-4 switch-margin text-right">
                <label>
                    <label class="edit-mode-switch-description">Edit Mode Off</label>
                    <input type="checkbox" class="turn-edit-on-off  locations has-location-tab " section-type="@Model.SectionType" value="@Model.Requests.FirstOrDefault().RequestID" productID="@Model.Requests.FirstOrDefault().ProductID" name="details">
                    <span class="lever"></span>
                </label>
            </div>
        }
    }
</div>

<div class="row" style="min-height:42px;">
    @{
        var name = "";
        if (Model.ReceivedModalSublocationsViewModel != null)
        {
            name = Model.ReceivedModalSublocationsViewModel.locationInstancesSelected.ElementAt(0).LocationInstanceName;
        }
        <div class="col-12 heading-1 text-center locationFullName">@name</div>


    }
</div>
<div>
    @{
        var locationTypeSelected = "true";
        if (Model.ParentDepthZeroOfSelected == null)
        {
            locationTypeSelected = "";
        }
    }

        <input type="hidden" class="location-error mark-readonly" id="locationTypeSelected" name="locationTypeSelected" data-val="@locationTypeSelected" />

</div>
<div class="row choose-locations">
    <div class="col-2">
        <div class="form-group">
            <label class="control-label" asp-for="ReceivedLocationViewModel.locationTypesDepthZero">Location Type</label>
            <div class=" form-control-plaintext border-bottom p-0">
                <span class="choose p-0"></span>
                <div class="dropdown choose-location dropdown-main @disabled">
                    <div class="select d-inline-flex">
                        <span class="caret py-0">
                            ▼
                        </span>
                        <span class="overflow-hidden">@Model.ParentDepthZeroOfSelected?.LocationTypeName</span>

                    </div>

                    <ul class="p-0 locationinstance dropdown-menu ">
                        @if (@*Model.ReceivedLocationViewModel != null*@ Model.ModalType == AppUtility.RequestModalType.Edit && Model.Requests[0].RequestStatusID == 3)
                        {
                            foreach (var locationType in Model.ReceivedLocationViewModel.locationTypesDepthZero)
                            {

                                <li id="@locationType.LocationTypeID" class="open-sublocations-types" description>
                                    @locationType.LocationTypeName
                                </li>
                            }
                        }
                    </ul>

                </div>
            </div>
        </div>

    </div>
    <div class="col-10">
        <div class="divSublocations container-fluid">
            @if (Model.ReceivedModalSublocationsViewModel != null)
            {

                <div class="row">
                    @{ var count = Model.ReceivedModalSublocationsViewModel.locationTypeNames.Count; }
                    @for (int i = 0; i < count - 1; i++) //do count - 1 because we don't want them to select the smallest instances
                    {
                        var id = "locationInstancesSelected[" + i + "]";
                        var depth = Model.ReceivedModalSublocationsViewModel.locationInstancesSelected.Count;
                        name = "";
                        <div class="form-group col-3 ">
                            <label class="control-label">@Model.ReceivedModalSublocationsViewModel.locationTypeNames[i]</label>
                            @if (i == 0)
                            {
                                <div class="">
                                    <div class=" form-control-plaintext border-bottom p-0">
                                        <span class="choose p-0"></span>
                                        <div class="dropdown choose-location dropdown-main @disabled ">
                                            <div class="select d-inline-flex">
                                                <span class="caret py-0">
                                                    ▼
                                                </span>
                                                @if (i < depth)
                                                {
                                                    name = Model.ReceivedModalSublocationsViewModel.locationInstancesSelected[depth - 1 - ((i + (count - (count - depth))) - depth)].LocationInstanceName;
                                                }
                                                <span class="overflow-hidden">@name</span>

                                            </div>

                                            <ul class="p-0 locationinstance dropdown-menu ">
                                                @foreach (var locationType in Model.ReceivedModalSublocationsViewModel.locationInstancesDepthZero)
                                                {
                                                    var description = locationType.LocationInstanceAbbrev;
                                                    if (locationType.LocationInstanceParent == null)
                                                    {
                                                        description = locationType.LocationInstanceName;
                                                    }
                                                    <li id="@locationType.LocationInstanceID" class="SLI-click" data-string="@description" value="@locationType.LocationInstanceID">
                                                        @locationType.LocationInstanceName
                                                    </li>
                                                }
                                            </ul>

                                        </div>
                                    </div>
                                </div>

                            }

                            else
                            {
                                <div class="">
                                    <div class=" form-control-plaintext border-bottom p-0">
                                        <span class="choose p-0"></span>
                                        <div class="dropdown choose-location dropdown-main @disabled">
                                            <div class="select d-inline-flex " style="padding-right:1.25rem;">
                                                <span class="caret py-0">
                                                    ▼
                                                </span>
                                                @if (i < depth)
                                                {
                                                    name = Model.ReceivedModalSublocationsViewModel.locationInstancesSelected[depth - 1 - ((i + (count - (count - depth))) - depth)].LocationInstanceAbbrev;
                                                }
                                                <span class="overflow-hidden ">@name</span>

                                            </div>

                                            <ul class="p-0 locationinstance dropdown-menu ">
                                                @if (i < depth)
                                                {
                                                    @foreach (var location in Model.ChildrenLocationInstances[depth - 1 - ((i + (count - (count - depth))) - depth)])
                                                    {
                                                        var description = location.LocationInstanceAbbrev;
                                                        if (location.LocationInstanceParent == null)
                                                        {
                                                            description = location.LocationInstanceAbbrev;
                                                        }
                                                        <li id="@location.LocationInstanceID" class="SLI-click" data-string="@description" value="@location.LocationInstanceID">
                                                            @location.LocationInstanceAbbrev
                                                        </li>
                                                    }
                                                }
                                            </ul>

                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                </div>
            }
        </div>
    </div>
</div>
@*    string value = "";
    @{
                if (Model.PageType != AppUtility.PageTypeEnum.RequestSummary)
                {
                    value = "true";
                }
            }
            <div class="row"><input type="hidden" style="pointer-events:none" class="mark-readonly" id="locationSelected" name="locationSelected" value="@value" /></div>*@
<div class="row">
    <div id="location-error-msg"></div>
</div>
<div class="row">
    <div class="visualView col-6 m-auto text-center">
        @if (Model.ReceivedModalVisualViewModel != null)
        {
            <input type="hidden" class="location-error mark-readonly" id="subLocationSelected" name="subLocationSelected" data-val="true" />

            @*@if (Model.ReceivedModalVisualViewModel.ParentLocationInstance.Width == 9 || Model.ReceivedModalVisualViewModel.ParentLocationInstance.Width == 12)
            {
                <div class="row">
                    <div class="col-12">
                        <button class="btn visual-locations-zoom
                    float-lg-right mr-4" style="text-decoration:none; font-size:1.3rem;" value="@Model.ReceivedModalVisualViewModel.ParentLocationInstance.LocationInstanceID">
                            <i class="icon-zoom_in-24px font-weight-bold"></i> Zoom In
                        </button>
                    </div>
                </div>
            }*@
            <div>
                @{ await Html.RenderPartialAsync("ReceivedModalVisual", Model.ReceivedModalVisualViewModel); }
            </div>
        }
    </div>

</div>
@if (Model.ModalType != AppUtility.RequestModalType.Create && Model.IsProprietary && Model.Requests[0].IsArchived == false)
{
    <div class="row justify-content-center">
        <div class="">
            <button class="open-archive-modal mark-readonly  disabled-background-color custom-button" disabled style="/*background: #8080809e*/ color: white; height: auto !important">Archive</button>
        </div>
    </div>
}
<script src="~/js/receivedmodal.js"></script>
<script src="~/js/site.js"></script>
