@model PrototypeWithAuth.ViewModels.UploadQuoteViewModel
@using PrototypeWithAuth.AppData
@{
    Layout = null;
    var markDisabled = "details";

    var color = "order-inv-color";
    var deleteDocumentClass = "";
    var sectionType = AppUtility.MenuItems.Requests.ToString();

    //else if (Model.SectionType == AppUtility.MenuItems.LabManagement)
    //{

   //    color = "lab-man-filter";
         //    sectionType = AppUtility.MenuItems.LabManagement.ToString();
         //}
}

@*<script src="~/Scripts/jquery.unobtrusive-ajax.js"></script>*@

<script src="~/js/site.js"></script>

<script src="~/js/WarantySupplyDateCalc.js"></script>
<div class="modal modal-document fader modalStep1 on-form-modal" @*role="dialog" aria-labelledby="Request"*@ data-backdrop="false" style="z-index: 9000">
    <div class="modal-dialog-centered mx-auto  modal-xl " role="document">
        <div class="modal-content d-inline-block modal-border-radius modal-box-shadow ">
            <button type="button" class="close modal-close-padding modal-close-style cancel-quote" @*data-dismiss="modal"*@ aria-label="Close">
                <span aria-hidden="true">&times;</span>
            </button>
            <form action="" data-string="Requests/DocumentsModal" method="post" enctype="multipart/form-data" style="height: 100%; overflow: auto;" class="m-5 modal-padding uploadQuoteForm" id="myForm">

                <div>
                    <div class="modal-header modal-header-padding">
                        <div class="container-fluid">
                            <div class="row error-message">
                                @{ await Html.RenderPartialAsync("_ErrorMessage", Model.ErrorMessage); }
                            </div>
                            <div class="row ">
                                <div class="col-4">
                                    <div class="heading-1">Upload Quote</div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                @{ await Html.RenderPartialAsync("_TempRequestHiddenFors.cshtml", Model.TempRequestListViewModel);}

                <div class="modal-body mt-5 ">


                    <div class=" _UploadQuoteModal ">
                        @{ await Html.RenderPartialAsync("_UploadQuoteModal", Model);}
                    </div>
                    @if (Model.TempRequestListViewModel.RequestIndexObject.IsReorder)
                    {
                        <input type="hidden" class="for-supply-date-calc" value="@DateTime.Now.GetElixirDateFormat()" />


                        <div class="container">

                            <div class="row ">
                                <div class=" offset-4 text-center">
                                    <input type="button" class="btn  btn-rounded border no-box-shadow pt-1 pb-1 pr-4 pl-4 text-capitalize change-quote" value="Change Quote" />
                                </div>
                                <div class=" col-6 pl-5 ">
                                    <div class="row">
                                        <div class=" col-4 ">
                                            <div class="form-group ">
                                                <label asp-for="@Model.ExpectedSupplyDays" class=" control-label m-0 mt-2" style="width:100%;"></label>
                                                <input asp-for="@Model.ExpectedSupplyDays" class="no-arrow-input form-control-plaintext border-bottom align-with-select timeline-light-item-orange p-0 m-0 expected-supply-days" min="1" />
                                                <span asp-validation-for="@Model.ExpectedSupplyDays" class="text-danger-centarix"></span>
                                            </div>
                                        </div>

                                        <div class=" col-6">
                                            <div class="form-group">
                                                <label class="control-label">Expected supply date</label>
                                                <input value="" class="form-control-plaintext border-bottom datepicker expected-supply-date" type="text" name="expected-supply-days" />
                                            </div>
                                        </div>
                                    </div>
                                </div>




                            </div>

                            </div>
                    }

                    <div class="modal-footer border-0 p-0">
                        <div class="mx-auto modal-footer-mt">
                            <input type="hidden" asp-for="OrderTypeEnum" />
                            <input type="submit" class="custom-button custom-button-font section-bg-color between-button-margin submitQuote" @*asp-action="UploadQuoteModal"*@ />
                            <button type="button" class="custom-button custom-cancel cancel-quote">Cancel</button>
                        </div>
                    </div>
                </div>
            </form>
        </div>
    </div>
</div>
<script src="~/js/DeleteDocModal.js"></script>
<script src="~/js/validate.js"></script>
<script src="~/js/Validation/ValidateUploadQuoteForm.js"></script>
<script>
    $(".change-quote").click(function () {
        $.ajax({
            //processData: true,
            //contentType: true,
            async: true,
            url: "/Requests/_UploadQuoteModal?guid=" + $(".hidden-guid").val(),
            type: 'GET',
            cache: false,
            //data: formData,
            success: function (data) {
                $("._UploadQuoteModal").html(data);
            }
        });
    });
</script>
<script>
    $(".cancel-quote").on("click", function (e) {
        e.preventDefault();
        //alert("in cancel quote");
        var guid = $("#GUID").val();
        var sequence = $("#SequencePosition").val();
        console.log("guid: " + guid);
        console.log("sequence: " + sequence);
        var selector = '.temprequesthiddenfors';
        if ($('#RequestIndexObject_IsReorder').val() === 'True') {
            selector = '.modal .temprequesthiddenfors';
        }
        console.log(selector)
        var e = $.fn.AddTempRequestHiddenFors(guid, sequence, selector, true);
        if (!e) {
            $.fn.CloseModal('step-1');
        }
    });

    $(".submitQuote").off('click').on("click", function (e) {
        e.preventDefault();
        console.log("submit quote");
        //alert("validate form");
        $(".uploadQuoteForm").data("validator").settings.ignore = "";
        var valid = $(".uploadQuoteForm").valid();
        console.log("valid form: " + valid)
        if (!valid) {

            if (!$('.activeSubmit').hasClass('disabled-submit')) {
                $('.activeSubmit').addClass('disabled-submit')
            }

        }
        else {
            $('.activeSubmit').removeClass('disabled-submit')
            $('.submitQuote').prop('disabled', true);
            $("#loading").show();
            var formData = new FormData($(".uploadQuoteForm")[0]);
            $.ajax({
                contentType: false,
                processData: false,
                async: true,
                url: "/Requests/UploadQuoteModal",
                data: formData,
                traditional: true,
                type: "POST",
                cache: false,
                success: function (data, textStatus, jqxhr) {
                    //console.log(data)
                    console.log("status code" + jqxhr.status)
                    $('.modal .temprequesthiddenfors').html('');
                    console.log($("#OrderTypeEnum").val())
                    $('.submitQuote').prop('disabled', false);
                    var sidebarType = $('#masterSidebarType').val();
                    var viewClass = "_IndexTableData";
                    if (sidebarType == "Quotes" || sidebarType == "Orders" || sidebarType == "Cart") {
                        viewClass = "_IndexTableDataByVendor";
                    }
                    if (data == "") {
                        if (sidebarType == "Add") {
                            window.location.href = "/Requests/?PageType=RequestRequest&SectionType=Requests&SidebarType=List"
                        }
                        else {
                            $.fn.ajaxPartialIndexTable($(".request-status-id").val(), "/Requests/" + viewClass, "." + viewClass, "POST", formData, "step-1, reorder-item");
                        }
                        $(".save-item").removeClass("save-item").off('click')
                    }
                    else {
                        $.fn.OpenModal('termsModal', 'terms', data);
                    }

                    $("#loading").hide();
                    return true;
                },
                error: function (jqxhr) {
                    /*if (jqxhr.status == 500) {
                        $.fn.OpenModal('modalStep1', 'step-1', jqxhr.responseText)
                    }*/
                    $('.step-1 .error-message').html(jqxhr.responseText);
                    $('.submitQuote').prop('disabled', false);
                    $("#loading").hide();
                    return true;
                }
            });
        }
        $(".uploadQuoteForm").data("validator").settings.ignore = ':not(select:hidden, .location-error:hidden,input:visible, textarea:visible)';

    });
    //$(".cancel-quote").click(function (e) {
    //    console.log("cancel quote")
    //    var formData = new FormData($(".uploadQuoteForm")[0]);
    //    $.ajax({
    //        contentType: false,
    //        processData: false,
    //        async: true,
    //        url: "/Requests/UploadQuoteModal?isCancel=true",
    //        data: formData,
    //        traditional: true,
    //        type: "POST",
    //        cache: false,
    //        success: function (data) {
    //            $.fn.CloseModal("step-1");
    //            $.fn.RemoveColorsOfDocs("Quote");
    //            return true;
    //        }
    //    })

    //});
</script>
