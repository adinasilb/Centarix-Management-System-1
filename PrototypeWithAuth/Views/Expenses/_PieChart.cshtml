@model PrototypeWithAuth.ViewModels.ChartViewModel
@using System.Text.Json
@*<div id="labelChart" style="width: 900px; height: 500px;"></div>*@
@*<script type="text/javascript" src="~/lib/canvasjs.min.js"></script>*@


@*<script type="text/javascript">
    $(function () {



    @*var myPieChart = new Chart(ctxP, {

        plugins: [ChartDataLabels],
        type: 'pie',
        data: {
            labels: [@Html.Raw(Model.SectionName)],
            //ChartDataLabels: ["1", "2", "3", "4", "5"],
            datasets: [{
                data: [@Html.Raw(Model.SectionValue)],
                backgroundColor: [@Html.Raw(Model.SectionColor)],
                borderWidth: 6,
                //hoverBackgroundColor: [@Html.Raw(Model.SectionColor)],
            },
            ]
        },
        options: {
            hover: false,
            tooltips: {
                // Disable the on-canvas tooltip
                enabled: false,
            },
            legend: {
                display: false
            },
            responsive: true,

            plugins: {
                datalabels: {
                    display: function (ctx) {
                        //only displays labels with values
                        return ctx.chart.data.datasets[0].data[ctx.dataIndex] != 0;

                    },
                    //anchor: 'end',
                    //clamp: false,

                    //align:'end',
                    formatter: (value, ctx) => {
                        var sum = 0;
                        var dataArr = ctx.chart.data.datasets[0].data;
                        dataArr.map(data => {
                            sum += parseFloat(data);
                        });
                        //alert(sum)
                        var percentage = (value * 100 / sum).toFixed(2) + "%";
                        //alert("value"+(value * 100)+ "sum"+sum)
                        return ctx.chart.data.labels[ctx.dataIndex] + "\n" + percentage + "\n" + parseFloat(ctx.chart.data.datasets[0].data[ctx.dataIndex]).toFixed(2) ;
                    },
                    color: 'black',
                    labels: {
                        title: {
                            font: {
                                size: 18,
                                textAlign: 'center'
                            },
                            text: "Custom TEgt"


                        }
                    },

                }
            }
        }
    });
    var colors = JSON.parse('@Html.Raw(Json.Serialize(Model.SectionColor))')
    var values = JSON.parse('@Html.Raw(Json.Serialize(Model.SectionValue))')
    var names = JSON.parse('@Html.Raw(Json.Serialize(Model.SectionName))')
    var currency = JSON.parse('@Html.Raw(Json.Serialize(Model.Currency))')
    var datapoints =[]
    for (var i = 0, len = values.length; i < len; i++) {
    datapoints.push({ y: values[i], indexLabel: names[i] })
    }
    CanvasJS.addColorSet("colors",
    colors);

    var chart = new CanvasJS.Chart("labelChart",
    {
    colorSet: "colors",
    title: {

    },
    legend: {

    },

    data: [
    {
    indexLabelFontSize: 12,
    indexLabelPlacement: "outside",
    indexLabelOrientation: "horizontal",
    toolTipContent: currency+"{y} - #percent %",
    indexLabel: "{indexLabel} {y}%",
    type: "pie",
    showInLegend: false,

    dataPoints: datapoints
    }
    ]
    });
    chart.render();



    })</script>*@
<script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
<div id="piechart" style="        width: 100%;
        height: 100%;"></div>
<script>

    $(function () {


        function drawChart() {
               //google.charts.setOnLoadCallback(drawChart);
        var colors = JSON.parse('@Html.Raw(Json.Serialize(Model.SectionColor))')
        var values = JSON.parse('@Html.Raw(Json.Serialize(Model.SectionValue))')
        var names = JSON.parse('@Html.Raw(Json.Serialize(Model.SectionName))')
        var currency = JSON.parse('@Html.Raw(Json.Serialize(Model.Currency))')

        var data = new google.visualization.DataTable();
        data.addColumn('string', 'Element');
            data.addColumn('number', 'Percentage');
        var slices = {}
        for (var i = 0, len = values.length; i < len; i++) {
            data.addRow([names[i], values[i]])
            slices[i] = {color: colors[i]}
            }
            var formatter = new google.visualization.NumberFormat({
                prefix: currency
            });
            formatter.format(data, 1);
        var options = {
            title: '',
            sliceVisibilityThreshold: 0,
            slices: slices,
            pieSliceBorderColor: 'white',
            chartArea: { width: 1000, height: 1000, left: "15%" },
            legend: { position: 'right', labeledValueText: 'both', },
            pieSliceText: 'both',
            pieSliceTextStyle: {
                bold: true,}
                 

                };

                var chart = new google.visualization.PieChart($('#piechart')[0]);
                chart.draw(data, options);
                }

        google.charts.load('current', { packages: ['corechart'] }).then(drawChart);
    });
</script>
<style type="text/css">
    path {
        stroke-width: 5;
    }
    g {
       
    }
</style>