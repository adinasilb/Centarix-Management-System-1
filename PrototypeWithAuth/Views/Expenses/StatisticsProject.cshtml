@using PrototypeWithAuth.AppData;
@using PrototypeWithAuth.ViewModels;
@model StatisticsProjectViewModel;

@{
    ViewData["Title"] = "StatisticsProject";
    Layout = "~/Views/Shared/RequestNavView.cshtml";
}
<script src="~/js/statisticsproject.js"></script>

<input type="hidden" class="setupdropdowns" value="true" />

@*Hidden fors so the correct subproject requests will be called*@
@*<div class="my-hiddenvalues-1">
        <input type="hidden" asp-for="Year" />
        @for (int i = 0; i < Model.Months.Count; i++)
        {
            <input type="hidden" asp-for="Months[i]" class="months-selected" />
        }
    </div>*@

<div class="container-fluid">
    <div class="row under-row-margin">
        <div class="col-7 heading-1 p-0">
            @*<button class="float-right custom-button-small-font custom-button click-me" id="click-me">Click Me</button>*@
        </div>
        <div class="col-3 offset-2">
            @*<select class="expenses mdb-select custom select-dropdown form-control-plaintext adjust-small-width float-left mr-4 change-months" multiple
                        id="select-months" searchable="Search Months">
                    @for (int i = 1; i <= 12; i++)
                    {
                        var selected = "";
                        if (Model.Months.Contains(i))
                        {
                            selected = "selected";
                        }
                        <option value="@i" selected="@selected">@System.Globalization.CultureInfo.InvariantCulture.DateTimeFormat.GetMonthName(i)</option>
                    }
                </select>*@
            @{var months = new List<int>() { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 }; }
            @Html.DropDownListFor(vm => vm.Months, months.Select(m =>
                new SelectListItem
                {
                    Text = System.Globalization.CultureInfo.InvariantCulture.DateTimeFormat.GetMonthName(m),
                    Value = m.ToString(),
                    //Selected = Model.Months
                }),
                htmlAttributes: new { @class = "expenses mdb-select  custom select-dropdown form-control-plaintext adjust-small-width float-left mr-3 change-month",
                    @searchable = "Search here...", @multiple = "multiple", @onload = "ChangeCheckboxesToFilledIn()" })
            @*</div>
                <div class="col-1 p-0 monthsHours">*@

            @{
                var years = Enumerable.Range(2010, DateTime.Today.Year - 2009);
                int curYear = DateTime.Today.Year /*Model.CurrentYear*/;
            }

            @Html.DropDownList("select-years", years.Select(x =>
 new SelectListItem
 {
     Text = x.ToString(),
     Value = x.ToString(),
     Selected = (x == curYear)
 }
), htmlAttributes: new { @class = "expenses mdb-select  custom select-dropdown form-control-plaintext adjust-small-width float-left ml-3 change-year", @name = "SelectedYear", @searchable = "Search here.." })
        </div>

    </div>
    <div class="row">
        <div class="col-6 projects-table px-0">
            @{ await Html.RenderPartialAsync("_StatisticsProjects", Model);}
        </div>
        <div class="col-6 subprojects-table px-0">

        </div>
    </div>
</div>


<script type="text/javascript">
    $(function () {
        $.fn.SetUpDropdowns = function () {
            $("input[data-activates='select-options-Months']").attr('placeholder', "Months")
            $("input[data-activates='select-options-Months']").val('')

            $(".months-selected").each(function () {
                $("#Months option[value='" + $(this).val() + "']").attr("selected", true);
            });
        };

        //$("#click-me").on("click", function () {
        //    var searchvalue = $("span[role='searchbox'] input");
        //    alert("searchvalue: " + searchvalue.val());
        //    //searchvalue.focus();
        //    //searchvalue.parent().addClass("hidden"); <--works just need to do the other part first
        //    //$(".change-month").val("3");
        //});

        $.fn.ChangeCheckboxesToFilledIn = function () {
            console.log("in change checkboxes to filled in");
            var dropdown = $(".multiple-select-dropdown li span input.form-check-input");
            console.log
            dropdown.addClass("filled-in");
            $(".multiple-select-dropdown li span").replaceWith(function () {
                return "<div class='form-check pl-0 py-2'>" + this.innerHTML + "</div>";
            });

        };


    })
</script>
