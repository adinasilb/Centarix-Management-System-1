@model PrototypeWithAuth.ViewModels.CommentsInfoViewModel
@using Microsoft.AspNetCore.Identity
@using PrototypeWithAuth.Data
@using PrototypeWithAuth.AppData
@using React.AspNet
@inject UserManager<ApplicationUser> _userManager
@{

    var disabled = "";
    if (Model.IsEdit)
    {
        disabled = "disabled";
    }
}

@{
    var commentRemoveID = "Comments_" + Model.Index + "__IsDeleted";
    var commentRemoveName = "Comments[" + Model.Index + "].IsDeleted";
    var commentTypeID = "Comments_" + Model.Index + "__CommentTypeID";
    var commentTypeName = "Comments[" + Model.Index + "].CommentTypeID";
    var commentIDID = "Comments_" + Model.Index + "__CommentID";
    var commentIDName = "Comments[" + Model.Index + "].CommentID";
    var commentUserID = "Comments_" + Model.Index + "__ApplicationUserID";
    var commentUserName = "Comments[" + Model.Index + "].ApplicationUserID";
    var commentTimeStampID = "Comments_" + Model.Index + "__CommentTimeStamp";
    var commentTimeStampName = "Comments[" + Model.Index + "].CommentTimeStamp";
}
<input type="hidden" id="@commentRemoveID" name="@commentRemoveName" value="@Model.Comment.IsDeleted" class="removeComment@(Model.Index)" />
<input type="hidden" id="@commentIDID" name="@commentIDName" value="@Model.Comment.CommentID" class="comment-type" />
<input type="hidden" id="@commentTypeID" name="@commentTypeName" value="@Model.Comment.CommentTypeID" class="comment-type" />
<input type="hidden" id="@commentUserID" name="@commentUserName" value="@Model.Comment.ApplicationUserID" class="comment-type" />
<input type="hidden" id="@commentTimeStampID" name="@commentTimeStampName" value="@Model.Comment.CommentTimeStamp" class="comment-type" />
<div class="table comment-info border p-2 mb-3">


    <div class="float-right pr-1">
        <button type="button" class="close  delete-comment mark-readonly" value="@Model.Index" aria-label="Close" @disabled>
            <span aria-hidden="true">&times;</span>
        </button>
    </div>
    <div class="row ml-2  border-bottom-0 mb-0">
        <div class="col-1 mt-auto mb-auto ">
            <button href="#" type="button" class="btn btn-link p-0 ">
                @{
                    var src = "/UserImages/user-image-placeholder.png";
                    if (Model.Comment.ApplicationUser.UserImage != null)
                    {
                        src = "\\" + AppUtility.GetLastFiles(Model.Comment.ApplicationUser.UserImage, 2);
                    }
                }
                <img src="@src" class=" ml-0 circular-profile-img circular-profile-img-50" alt="default User image" />
            </button>
        </div>
        <div class="col-9 ">
            <div class=" p-3 ">
                <label class="m-0"> @Model.Comment.ApplicationUser.FirstName</label>
                <label class="m-0">@Model.Comment.ApplicationUser.LastName</label>
                <label class="m-0">@Model.Comment.CommentTimeStamp.ToString("MMMM") @Model.Comment.CommentTimeStamp.Day, @Model.Comment.CommentTimeStamp.Year @Model.Comment.CommentTimeStamp.ToString("hh:mm tt") </label>
                @{
                    var commentTextID = "Comments_" + Model.Index + "__CommentText";
                    var commentTextName = "Comments[" + Model.Index + "].CommentText";
                    var commentTextValue = Model.Comment.CommentText;
                }
                <input name="@commentTextName" id="@commentTextID" value="@commentTextValue" class="form-control-plaintext border-bottom m-0 p-0 comment-text mark-readonly" @disabled />
                @Html.React("CommentInput", new { users = new List<string> { "Adina", "Rachel", "Debbie"} });
            </div>

        </div>
        <div class=" col-2 ">
            <i class="@Model.Comment.CommentType.Icon float-right m-4" style="padding-top: .55rem; font-size: 1.25rem; color:@Model.Comment.CommentType.Color;"></i>
        </div>

    </div>
</div>
