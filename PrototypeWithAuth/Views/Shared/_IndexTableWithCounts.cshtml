@model PrototypeWithAuth.ViewModels.RequestIndexPartialViewModel
@using PrototypeWithAuth.AppData
@{

    var form = "order-inv-form";
    if (TempData[AppUtility.TempDataTypes.MenuType.ToString()].ToString() == AppUtility.MenuItems.Operations.ToString())
    {
        form = "oper-form";
    }
    else if (TempData[AppUtility.TempDataTypes.MenuType.ToString()].ToString() == AppUtility.MenuItems.LabManagement.ToString())
    {
        form = "lab-man-form";
    }
    else if (TempData[AppUtility.TempDataTypes.MenuType.ToString()].ToString() == AppUtility.MenuItems.Accounting.ToString())
    {
        form = "acc-form";
    }


    @*string newButtonText = "";*@
    string orderedButtonText = "";
    string receivedButtonText = "";
    string approvedButtonText = "";

    @*string newActiveClass = "";*@
    string orderedActiveClass = "";
    string receivedActiveClass = "";
    string approvedActiveClass = "";
    int requestStatusID = Model.RequestStatusID;
    @*
        newButtonText = "For Approval [" + Model.NewCount + "]";*@
    orderedButtonText = "Ordered"; // [" + Model.OrderedCount + "]";
    receivedButtonText = "Received"; // [" + Model.ReceivedCount + "]";
    approvedButtonText = "Requests";// [" + Model.ApprovedCount + "]";

    @*newActiveClass = "new-button pt-4 ";*@
    orderedActiveClass = "new-button pt-4 ";
    receivedActiveClass = "new-button pt-4 ";
    approvedActiveClass = "new-button pt-4 ";

    var activeClasses = "new-button active  pt-4";
    if (Model.PageType == AppUtility.PageTypeEnum.OperationsRequest)
    {
        activeClasses += " new-oper-button ";
        //newActiveClass += " new-oper-button ";
        orderedActiveClass += " new-oper-button ";
        receivedActiveClass += " new-oper-button ";
        //approvedActiveClass += " new-oper-button ";
    }

    switch (Model.RequestStatusID)
    {

        case 4:
        case 5:
        @*newActiveClass = activeClasses;
            break;*@
        case 2:
            orderedActiveClass = activeClasses;
            break;
        case 3:
            receivedActiveClass = activeClasses;
            break;
        case 1:
        case 6:
            approvedActiveClass = activeClasses;
            break;

    }


}
<div class="">
    <div class="item-table @form">
        <ul class="pl-0">
            @if (Model.PageType != AppUtility.PageTypeEnum.OperationsRequest)
            {
                @*<li class="list-inline-item active m-0">
                        <a class="@newActiveClass countStatus" value="1" href="#"><i class="new-icon icon-centarix-icons-04"></i>  <label class="new-button-text">@newButtonText</label> </a>
                    </li>*@
                <li class="list-inline-item m-0">
                    <a class="@approvedActiveClass countStatus" value="6" href="#"> <i class="new-icon icon-approve-24px"></i><label class="new-button-text">@approvedButtonText</label> </a>

                </li>
            }
            <li class="list-inline-item m-0">
                <a class="@orderedActiveClass countStatus" value="2" href="#"> <i class="new-icon icon-centarix-icons-03"></i><label class="new-button-text">@orderedButtonText</label> </a>
            </li>

            <li class="list-inline-item ">
                <a class="@receivedActiveClass countStatus" value="3" href="#"> <i class="icon-done-24px new-icon"></i><label class="new-button-text">@receivedButtonText</label> </a>
            </li>
            @if (Model.SideBarType != AppUtility.SidebarEnum.Search)
            {
                <li class="list-inline-item m-0">
                    @{ await Html.RenderPartialAsync("_IndexFilter", Model.InventoryFilterViewModel);}
                </li>
            }
        </ul>
    </div>
</div>
<div class="_IndexTable">
    @{ await Html.RenderPartialAsync("_IndexTable", Model);}
</div>
<script src="~/js/IndexTableWithCounts.js"></script>