@using Microsoft.AspNetCore.Identity
@using PrototypeWithAuth.Data
@using PrototypeWithAuth.AppData
@using PrototypeWithAuth.ViewModels
@using Microsoft.AspNetCore.Routing
@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager
@{
    Layout = "~/Views/Shared/Master.cshtml";

    AppUtility.PageTypeEnum pageType = AppUtility.PageTypeEnum.None;
    var categoryType = AppUtility.CategoryTypeEnum.Lab;

    AppUtility.MenuItems MenuType = (AppUtility.MenuItems)TempData[AppUtility.TempDataTypes.MenuType.ToString()];
    List<MenuItems> MainMenuItems = new List<MenuItems>();

    //all pages need PageType passed in so we're testing if it's null and if not we're taking in the type
    if (TempData[AppUtility.TempDataTypes.PageType.ToString()] != null)
    {
        pageType = (AppUtility.PageTypeEnum)TempData[AppUtility.TempDataTypes.PageType.ToString()];
        //pageType = (AppUtility.RequestPageTypeEnum)Enum.Parse(typeof(AppUtility.RequestPageTypeEnum), TempData[AppUtility.TempDataTypes.PageType.ToString()].ToString());
    }

    string initalClasses = "opac87 align-text-bottom  py-3";
    string currentClasses = " activeNavLink  ";

    MainMenuItems = CreateMenus.CreateMainMenu(MenuType, pageType, initalClasses);

    //passing the
    string inventoryClass = initalClasses;
    string summaryClass = initalClasses;
    string requestClass = initalClasses;
    string cartClass = initalClasses;
    string searchClass = initalClasses;
    string locationClass = initalClasses;


    bool Cart = false;
    bool Requests = false;
    bool Inventory = false;
    bool Summary = false;


    string originalNavClasses = " ";
    string activeClass = "text-dark order-inv-filter ";

    List<MenuItems> SidebarMenuItems = new List<MenuItems>();

    AppUtility.SidebarEnum sidebarType = AppUtility.SidebarEnum.None;
    if (TempData[AppUtility.TempDataTypes.SidebarType.ToString()] != null)
    {
        sidebarType = (AppUtility.SidebarEnum)TempData[AppUtility.TempDataTypes.SidebarType.ToString()];
    }

    var menuClass = originalNavClasses;
    if (pageType == AppUtility.PageTypeEnum.RequestInventory)
    {
        //inventoryClass = initalClasses + currentClasses;
        SidebarMenuItems = CreateMenus.GetOrdersAndInventorySummarySidebarMenuItems(sidebarType, originalNavClasses, activeClass, pageType, categoryType);
        Inventory = true;
    }
    else if (pageType == AppUtility.PageTypeEnum.RequestSummary)
    {
        //summaryClass = initalClasses + currentClasses;
        SidebarMenuItems = CreateMenus.GetOrdersAndInventorySummarySidebarMenuItems(sidebarType, originalNavClasses, activeClass, pageType, categoryType);
        Summary = true;
    }
    else if (pageType == AppUtility.PageTypeEnum.RequestRequest)
    {
        Requests = true;
        //requestClass = initalClasses + currentClasses;
        SidebarMenuItems = CreateMenus.GetOrdersAndInventoryRequestsSidebarMenuItems(sidebarType, originalNavClasses, activeClass, pageType, categoryType);
    }
    else if (pageType == AppUtility.PageTypeEnum.RequestCart)
    {
        //cartClass = initalClasses + currentClasses;
        SidebarMenuItems = CreateMenus.GetOrdersAndInventoryCartSidebarMenuItems(sidebarType, originalNavClasses, activeClass, pageType, categoryType);
        Cart = true;
    }
    else if (pageType == AppUtility.PageTypeEnum.RequestSearch)
    {
        //searchClass = initalClasses + currentClasses + " search-link";
        SidebarMenuItems = CreateMenus.GetOrdersAndInventorySearchSidebarMenuItems(originalNavClasses, activeClass, pageType, categoryType);
    }
    else if (pageType == AppUtility.PageTypeEnum.RequestLocation)
    {
        //locationClass = initalClasses + currentClasses;
        SidebarMenuItems = CreateMenus.GetOrdersAndInventoryLocationSidebarMenuItems(originalNavClasses, activeClass, categoryType);
    }
    else if (pageType == AppUtility.PageTypeEnum.LabManagementSuppliers)
    {
        SidebarMenuItems = CreateMenus.CreateLabManageSuppliersSidebar(sidebarType, originalNavClasses, "lab-man-filter");
    }
    else if (pageType == AppUtility.PageTypeEnum.LabManagementLocations)
    {
        SidebarMenuItems = CreateMenus.CreateLabManageLocationsSidebar(sidebarType, originalNavClasses, "lab-man-filter");
    }
    else if (pageType == AppUtility.PageTypeEnum.LabManagementQuotes)
    {
        SidebarMenuItems = CreateMenus.CreateLabManageOrdersSidebar(sidebarType, originalNavClasses, "lab-man-filter");
    }
    else if (pageType == AppUtility.PageTypeEnum.LabManagementSearch)
    {
        SidebarMenuItems = CreateMenus.CreateLabManageSearchSidebar(sidebarType, originalNavClasses, "lab-man-filter");
    }
    else if (pageType == AppUtility.PageTypeEnum.LabManagementEquipment)
    {
        SidebarMenuItems = CreateMenus.CreateLabManageEquipmentSidebar(sidebarType, originalNavClasses, "lab-man-filter");
    }
    else if (pageType == AppUtility.PageTypeEnum.AccountingPayments)
    {
        SidebarMenuItems = CreateMenus.CreateAccountingPaymentsSidebar(sidebarType, originalNavClasses, "accounting-filter");
    }
    else if (pageType == AppUtility.PageTypeEnum.AccountingNotifications)
    {
        SidebarMenuItems = CreateMenus.CreateAccountingNotificationsSidebar(sidebarType, originalNavClasses, "accounting-filter");
    }
    else if (pageType == AppUtility.PageTypeEnum.AccountingGeneral)
    {
        //TODO: LATER
    }
    else if (pageType == AppUtility.PageTypeEnum.AccountingSuppliers)
    {
        SidebarMenuItems = CreateMenus.CreateAccountingSuppliersSidebar(sidebarType, originalNavClasses, "accounting-filter");
    }
    else if (pageType == AppUtility.PageTypeEnum.OperationsInventory || pageType == AppUtility.PageTypeEnum.OperationsRequest)
    {
        SidebarMenuItems = CreateMenus.CreateOperationsRequestsSidebar(pageType, sidebarType, originalNavClasses, "operations-filter");
    }
    else if (pageType == AppUtility.PageTypeEnum.OperationsSearch)
    {
        SidebarMenuItems = CreateMenus.CreateOperationsSearchSidebar(sidebarType, originalNavClasses, "operations-filter");
    }
    else if (pageType == AppUtility.PageTypeEnum.UsersUser)
    {
        SidebarMenuItems = CreateMenus.CreateUsersUsersSidebar(sidebarType, originalNavClasses, "users-filter");
    }
    else if (pageType == AppUtility.PageTypeEnum.UsersWorkers)
    {
        SidebarMenuItems = CreateMenus.CreateUsersWorkersSidebar(sidebarType, originalNavClasses, "users-filter");
    }
    else if (pageType == AppUtility.PageTypeEnum.TimeKeeperReport)
    {
        SidebarMenuItems = CreateMenus.CreateTimekeeperReportsSidebar(sidebarType, originalNavClasses, "timekeeper-filter");
    }
    else if (pageType == AppUtility.PageTypeEnum.TimekeeperSummary)
    {
        SidebarMenuItems = CreateMenus.CreateTimekeeperSummarySidebar(sidebarType, originalNavClasses, "timekeeper-filter");
    }
    else if (pageType == AppUtility.PageTypeEnum.ExpensesSummary)
    {
        SidebarMenuItems = CreateMenus.CreateExpensesSummarySidebar(sidebarType, originalNavClasses, "expenses-filter");
    }
    else if (pageType == AppUtility.PageTypeEnum.ExpensesStatistics)
    {
        SidebarMenuItems = CreateMenus.CreateExpensesStatisticsSidebar(sidebarType, originalNavClasses, "expenses-filter");
    }
    else if (pageType == AppUtility.PageTypeEnum.ExpensesCost)
    {
        SidebarMenuItems = CreateMenus.CreateExpensesCostsSidebar(sidebarType, originalNavClasses, "expenses-filter");
    }
    else if (pageType == AppUtility.PageTypeEnum.ExpensesWorkers)
    {
        SidebarMenuItems = CreateMenus.CreateExpensesWorkersSidebar(sidebarType, originalNavClasses, "expenses-filter");
    }

    var sidebarWidth = "119px";

    //not using this right now --> see if we should put it back in
    var SendEmail = "0";
    if (TempData["SendEmail"] != null)
    {
        SendEmail = TempData["SendEmail"].ToString();
    }

    //redo --> not used
    var CancelledEmail = false;
    if (TempData["CancelledEmail"] != null && TempData["CancelledEmail"].ToString().Equals("True"))
    {
        CancelledEmail = true;
    }

    if (TempData["RequestID"] == null)
    {
        TempData["RequestID"] = 0;
    }

}

@{
    if (TempData["SuccessMessage"] != null)
    {
        <div>@TempData["SuccessMessage"].ToString()</div>
    }
}
<header class="sticky-top greater-Z-index">
    <input type="hidden" value="@TempData[AppUtility.TempDataTypes.MenuType.ToString()]" id="masterSectionType" />
    <input type="hidden" value="@TempData[AppUtility.TempDataTypes.PageType.ToString()]" id="masterPageType" />
    <input type="hidden" value="@TempData[AppUtility.TempDataTypes.SidebarType.ToString()]" id="masterSidebarType" />
    <div class="navbar-shadow-2">
        <div class="navbar-shadow-1">
            <nav class="navbar navbar-expand-sm navbar-toggleable-sm navbar-light bg-white ourNavBar p-0 no-box-shadow">

                @{ var styleClass = "min-width: " + sidebarWidth + "; max-width: " + sidebarWidth + ";";}
                <div class="  ">
                    <ul class="list-unstyled mb-0 ">
                        <li>
                            <span style="@styleClass">
                                <a href="#" id="home-btn" type="button" data-toggle="popover" data-trigger="focus" data-placement="bottom" data-container="body" class="navbar-brand home-nav-item ">
                                    <img src="~/images/css/Centarix_Logo_only.png" height="20" alt="Logo" />
                                </a>
                            </span>
                        </li>
                        <div style="display:none;" id="home-content">

                        </div>
                    </ul>
                </div>


                <div class="collapse navbar-collapse">
                    <ul class="navbar-nav dropdown-menu-md-left " style="font-size:1.25rem; font-weight:500; padding-left: 5.625rem;">

                        @foreach (var MenuItem in MainMenuItems)
                        {
                            <li class="nav-item " style="margin-right: 4.375rem;">
                                @Html.ActionLink(MenuItem.Description, MenuItem.Action, MenuItem.Controller, MenuItem.RouteValues, new { @class = MenuItem.Classes + " top-menu", @id = MenuItem.ID })
                            </li>
                        }
                    </ul>
                </div>
                <div class="">
                    <ul class="list-unstyled m-0">
                        <li><button href="#" id="openNotifications" type="button" data-toggle="popover" data-trigger="focus" data-placement="bottom" data-container="body" class="btn no-box-shadow p-0 m-0 " style="margin-right: 1.313rem !important;"><div class="alerts-icon"><i style='font-size: 2.3rem;   color: #808080;' class='icon-notification_top_menu'></i> <span id="alertCount" class="alert-count "></span></div>  </button> </li>
                        <div style="display:none;" id="notifications-popover">
                            <button type="button" class="close" style="font-size:2rem;" data-dismiss="popover" onclick="$(this).closest('.modal').modal('hide');">&times;</button>
                            <div style="width:410px" class="p-4 heading-1">
                                Notifications
                            </div>
                        </div>
                    </ul>
                </div>
                <div class="  ">
                    <ul class="list-unstyled mb-0 ">
                        <li>
                            <div class="form-inline pr-3">
                                <div class="md-form my-0 p-2">
                                    <span class="text">
                                        @UserManager.GetUserAsync(User).Result.FirstName @UserManager.GetUserAsync(User).Result.LastName &nbsp;
                                    </span>
                                    <button href="#" id="profile-img" type="button" data-toggle="popover" data-trigger="focus" data-placement="bottom" data-container="body" class="btn btn-link p-0 ">
                                        @{
                                            var src = "/UserImages/user-image-placeholder.png";
                                            var result = await UserManager.GetUserAsync(User);
                                            if (result.UserImage != null)
                                            {

                                                src = "\\" + AppUtility.GetLastFiles(result.UserImage, 2);
                                            }
                                        }
                                        <img src="@src" class=" ml-0 circular-profile-img circular-profile-img-50" alt="default User image" />
                                    </button>
                                </div>
                            </div>
                        </li>
                        <div style="display:none;" id="logout-popover">
                            <form class="form-inline " asp-area="Identity" asp-page="/Account/Logout" asp-route-returnUrl="@Url.Action("Index", "Home", new { area = "" })">
                                <button type="submit" id="logout-form" class="nav-link  border-0 no-box-shadow btn-white btn-link text-dark logout-button">Logout</button>
                            </form>
                        </div>
                    </ul>
                </div>


            </nav>
        </div>
    </div>

</header>
<div class="container-fluid pl-0">
    <main role="main" class="overflow-hidden">
        @*<div class="spinner-border center" role="status" id="loading" style="display:none;">
                <span class="sr-only">Loading...</span>
            </div>*@


        <div style="display: flex; overflow: hidden;">
            @{ var style = "min-width: " + sidebarWidth + "; max-width: " + sidebarWidth + "; min-height:100rem; aria-hidden=true;"; }
            <div class="sidebar-shadow2">
                <div class="sidebar-shadow1">
                    <div style="@style" class="navbar-expand-lg text-center ourNavBar">
                        @*<nav class="navbar navbar-expand-lg">*@
                        <ul class="nav flex-column nav-pills nav-stacked nav-top-sidebar1"
                            style="left: 55px !important;  position: fixed; left: 50%; transform: translate(-55px, 0); max-width: @sidebarWidth; min-width: @sidebarWidth; min-height: 100rem;
">
                            @{
                                var liMargins = "padding-bottom: 2.25rem; padding-top: 2.25rem;";
                            }
                            @foreach (var sidebarNavItem in SidebarMenuItems)
                            {
                                <a href="@Url.ActionLink( sidebarNavItem.Action , sidebarNavItem.Controller, sidebarNavItem.RouteValues)" class="text-black @sidebarNavItem.AjaxLink">
                                    <li class="nav-item sidenav-button @sidebarNavItem.Classes side-menu px-2" style="@liMargins">
                                        <i class="@sidebarNavItem.IconName" style="font-size: 1.75rem; "></i>
                                        <br /><span>@sidebarNavItem.Description</span><br />
                                        <span class="hidden sidebarCount @sidebarNavItem.MenuItemsID"></span>
                                    </li>
                                </a>
                                liMargins += "";
                            }


                        </ul>
                    </div>
                </div>
                @*</nav>*@
            </div>
            @if (ViewBag.ErrorMessage != null)
            {
                <div style="position: absolute; left: 13rem; top: 6rem; z-index: 1000;"><span class="text danger-text">Error: @ViewBag.ErrorMessage</span></div><br />
            }
            <div style="flex-grow: 1" class="outer-page-margins nav-top-margin2 render-body ">
                <!--class="col-md-10 border-left"-->
                @RenderBody()
            </div>
        </div>
    </main>
</div>


<!-- Confirm Email Modal -->
<div class="modal confirm-email-modal" id="myModal">
</div>
@section requestNavScript{
    <script>
    $('[data-toggle="tooltip"]').tooltip()
      $(document).ready(function () {

            console.log("in doc ready");
           //$('input[type = "datetime-local"]').attr("type", "date")
            //$('form').change(function () {
            //    console.log("form change");
            //    $(".input-group .form-control-plaintext").unwrap();
            //    $(".input-group .form-control-plaintext").unwrap();
            //    $(".input-group").remove('.input-group-text');
            //    $(".form-control-plaintext.input-validation-error").wrap("<div class=\"input-group invalid\"></div>");

            //    $(".input-group.invalid").append('<span class="input-group-text">&#36;</span>');
            //});
           // $('form').attr('autocomplete', 'off');
            $(document).ajaxError(function (event, jqxhr, settings, exception) {
                $('#loading').hide();
                if (jqxhr.status == 401) {
                    alert("Cookie timed out. Please login again.");
                }
                if (jqxhr.status == 400) {
                    alert("Error 400: error making request");
                }
                if (jqxhr.status == 500) {
                    if ($(".error-msg").length > 0) {
                        $(".error-msg").html(jqxhr.responseText);
                    }
                    else if (jqxhr.responseText != null) {
                        alert("Error 500: " + jqxhr.responseText);
                    }
                    else {
                        alert("Error 500: error carrying out request");
                    }
                }
            });
            $('[data-toggle="tooltip"]').tooltip()

            $("#alertCount").hide();




            //Try to disable autocomplete on all inputs --> but chrome may ignore it
            $("input:text,form").attr("autocomplete", "off");


           /* $('input[data-val-required]').each(function () {
                $(this).prev('label').first().append('*');
            });
            $('input[required]').each(function () {
                $(this).prev('label').first().append('*');
            });*/

            $('body').hide();
            $(window).on('load', function () {
                $('body').show();
            });
            $('#dtBasicExample').DataTable();
            $('.dataTables_length').addClass('bs-select');
            $.fn.ChangeCheckboxesToFilledIn()
            $.fn.setUpChartDDlPlaceholders()
            //$('.mdb-select').focusin(function () { $('.search-wrap input.search').focus() });
            $('.timekeeper .dropdown-content').removeClass('w-100');
            $('.datepicker').pickadate({format:'dd/mm/yyyy', formatSubmit:'yyyy-MM-dd',
                onSet : function(context )
                {
                    var date = moment(context.select).toISOString()
                    console.log(context)
                    $('.picker__input--target').attr("data-val", date);
                }
              });
            $('#request-search a:first').tab('show'); @* I had to put this in here b / c otherwise it wasn't coming up on .search-link.click*@
            $('.edit-user a:first').tab('show');
            $('#myForm a:first').tab('show');
            $(".contact-info:hidden:first").find(".contact-active").val(true);
            $.fn.AddContactValidation();
            $(".contact-info:hidden:first").show();

            //vendors

            //  $('[data-toggle="popover"]').popover();
            $("#vendor-payments-tab").prop("disabled", true);
            $("#vendor-categories-tab").prop("disabled", true);
            $("#vendor-comment-tab").prop("disabled", true);
            $("#vendor-contact-tab").prop("disabled", true);


            $("#TermsModal #Terms").val("Select");
            //users
            $("#user-permissions-tab").prop("disabled", true);
            $("#user-budget-tab").prop("disabled", true);
            $("#user-images-tab").prop("disabled", true);
            $("#user-more-tab").prop("disabled", true);
            var $itemurl = "";
            if ($("#tdprconfirmemail").val()) {
                console.log("tdprconfirmemail");
                $("#tdprconfirmemail").hide();
                $itemurl = "/Requests/ConfirmEmailModal/?id=" + @TempData["ParentRequestID"] + "";
                $("#loading").show();
                $.fn.CallPage($itemurl, "confirmemail");
            }

            if ($("#tdterms").val()) {
                $("#tdterms").hide();
                //alert("in tdterms.val()");
                $itemurl = "/Requests/TermsModal/?id=" + @TempData["RequestID"] + "&isSingleRequest=true";
                console.log("url " + $itemurl)
                //$("#loading").show();
                $.fn.CallPage($itemurl, "terms");
                }

            if ($("#tdconfirmemail").val()) {
                console.log("tdconfirmemail");
                $("#tdconfirmemail").hide();
                $itemurl = "/Requests/ConfirmEmailModal/?id=" + @TempData["RequestID"] + "&isSingleOrder=true";
                //$("#loading").show();
                $.fn.CallPage($itemurl, "confirmemail");



            }
            $.fn.GetNotifcationCount();
            $.fn.GetNotifications();
            $.fn.getMenuItems();


        });
    </script>
    @if (IsSectionDefined("Scripts"))
    {
    @RenderSection("Scripts", required: true)
    }
}