@using PrototypeWithAuth.AppData
@{
    ViewData["Title"] = "RequestNavView";
    Layout = "~/Views/Shared/View.cshtml";

    AppUtility.RequestPageTypeEnum pageType = AppUtility.RequestPageTypeEnum.None;
    if (TempData["PageType"] != null)
    {
        pageType = (AppUtility.RequestPageTypeEnum)Enum.Parse(typeof(AppUtility.RequestPageTypeEnum), TempData["PageType"].ToString());
    }

    bool Cart = false;
    bool Requests = false;
    bool Inventory = false;
    switch (pageType)
    {
        case AppUtility.RequestPageTypeEnum.Request:
            Requests = true;
            break;
        case AppUtility.RequestPageTypeEnum.Inventory:
            Inventory = true;
            break;
        case AppUtility.RequestPageTypeEnum.Cart:
            Cart = true;
            break;
    }

    string originalNavClasses = "btn btn-link text-dark";
    string activeClass = " font-weight-bold activeNavLink";

    string type = originalNavClasses;
    string vendor = originalNavClasses;
    string owner = originalNavClasses;
    string location = originalNavClasses;
    string cart = originalNavClasses;

    var SidebarType = TempData["SidebarTitle"];
    switch (SidebarType)
    {
        case AppUtility.RequestSidebarEnum.Type:
            type += activeClass;
            break;
        case AppUtility.RequestSidebarEnum.Vendor:
            vendor += activeClass;
            break;
        case AppUtility.RequestSidebarEnum.Owner:
            owner += activeClass;
            break;
        case AppUtility.RequestSidebarEnum.Location:
            location += activeClass;
            break;
        case AppUtility.RequestSidebarEnum.Cart:
            cart += activeClass;
            break;
    }

    //not using this right now --> see with Faige if we should put it back in
    var SendEmail = "0";
    if (TempData["SendEmail"] != null)
    {
        SendEmail = TempData["SendEmail"].ToString();
    }

    //redo --> not used
    var CancelledEmail = false;
    if (TempData["CancelledEmail"] != null && TempData["CancelledEmail"].ToString().Equals("True"))
    {
        CancelledEmail = true;
    }

}

@{
    if (TempData["SuccessMessage"] != null)
    {
        <div>@TempData["SuccessMessage"].ToString()</div>
    }
}
<div style="display: flex">
    <div style="width: 100px; min-height:970px; padding: 10px" class="navbar d-md-block box-shadow navbar-light bg-white border-right text-center border-right ourNavBar">
        @*<nav class="navbar flex-grow-1">*@
        <ul class="nav flex-column nav-pills nav-stacked">

            @*<li class="nav-item mt-3 mb-3">
                    <button type="button" id="slidebar-modal" class="btn" data-toggle="modal" data-target="#right-slide-modal" onclick="addActive(id)">
                        <i class="far fa-hand-point-right"></i><br /> Right Sidebar Modal
                    </button>
                </li>*@

            @if (Requests || Inventory)
            {
                <li class="nav-item mt-3 mb-3">

                    @*@Html.ActionLink("Add Item", "Create", "Products", new { }, new { @class = "btn btn-link text-dark" })*@
                    <button class="btn btn-link text-dark create-product-details" id="sidebar-add-item" onclick="addActive(id)">
                        <img src="~/images/css/inventory/sidebar/add_circle_outline-2.png" alt="Add Item" /><br />Add Item
                    </button>
                </li>
            }
            @if (Requests || Inventory)
            {
                //Here is the proper way to do it
                <li class="nav-item mt-3 mb-3 @type">
                    <a href="@Url.ActionLink("Index", "ProductSubcategories", new { @PageType = pageType })"><img src="~/images/css/inventory/sidebar/type.png" alt="Alternate Text" /><br />Type</a>
                </li>
                // <i class="fas fa-shapes"></i>

                //but now that its a picture instead of an icon, it wont change color the same way as before..... :(

                //old way
                @*<li class="nav-item mt-3 mb-3">
                        <i class="fas fa-shapes"></i><br />
                        @Html.ActionLink("Type", "Index", "ProductSubcategories", new { @PageType = pageType }, new { @class = type })
                    </li>*@
            }
            @if (Requests || Inventory)
            {
                //old way
                @*<li class="nav-item mt-3 mb-3">
                        <i class="fas fa-store"></i><br />
                        @Html.ActionLink("Vendor", "Index", "Vendors", new { @PageType = pageType }, new { @class = vendor })
                    </li>*@

                <li class="nav-item mt-3 mb-3 @vendor">
                    <a href="@Url.ActionLink("Index", "Vendors", new { @PageType = pageType })"><img src="~/images/css/inventory/sidebar/vendor.png" alt="Vendors" /><br />Vendors</a>
                </li>
            }
            @if (Requests || Inventory)
            {

                @*<li class="nav-item mt-3 mb-3">
                        <i class="far fa-meh-blank"></i><br />
                        @/*Html.ActionLink("Owner", "Index", "ApplicationUsers", new { @PageType = pageType }, new { @class = owner })*/
                    </li>*@
                @*have to create contorller for application user?*@

                <li class="nav-item mt-3 mb-3 @owner">
                    <a href="@Url.ActionLink("Index", "ApplicationUsers", new { @PageType = pageType })"><img src="~/images/css/inventory/sidebar/owner.png" alt="Owner" /><br />Owner</a>
                </li>
            }
            @if (Inventory)
            {

                @*Redo the location class in the controller*@
                @*<li class="nav-item mt-3 mb-3">
                        <i class="fas fa-map-marker-alt"></i>
                        @Html.ActionLink("Manage", "Index", "Locations", new { }, new { @class = location })
                    </li>*@

                <li class="nav-item mt-3 mb-3 @location">
                    <a href="@Url.ActionLink("Index", "Locations", new { @PageType = location })"><img src="~/images/css/inventory/sidebar/location.png" alt="Location" /><br />Manage</a>
                </li>
            }
            @if (Cart)
            {
                <li class="nav-item mt-3 mb-3">
                    <i class="fas fa-shopping-cart"></i>
                    <a class=@cart>Cart</a>
                </li>
            }

        </ul>
        @*</nav>*@
    </div>
    <div style="flex-grow: 1" class="border-left">
        <!--class="col-md-10 border-left"-->
        @RenderBody()
    </div>
</div>

<!-- SlideRight Modal -->
@*<div class="modal right fade" id="right-slide-modal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel2">
    <div class="modal-dialog" role="document">
        <div class="modal-content">

            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title" id="myModalLabel2">Right Sidebar</h4>
            </div>

            <div class="modal-body">
                <h1>Why cant I see the whole line displayed in the same modal?!?!?!</h1>
            </div>

        </div>
    </div>
</div>*@

<!-- The Modal -->
<div class="modal modal-view" id="myModal" role="dialog" aria-labelledby="Request">
</div>

<!-- Confirm Email Modal -->
<div class="modal confirm-email-modal" id="myModal">
</div>

<script>
    //function changePic(a) { document.getElementById("sidebar-add-item").src = a; }

    function addActive(id) {
        var item = document.getElementById(id);
        item.classList.add("activeNavLink");
    }
</script>

@RenderSection("Scripts", required: false)
<script>




    $(document).ready(function () {
        @*console.log("Requests nav view document is ready!");
        var sendEmail = parseInt('@SendEmail'); //comes in as a string (even though originally an int and therefore must be converted.)
        console.log("send email " + sendEmail);
        if (sendEmail > 0) {
            console.log("send email is true");
            var tab = "";
            var $itemUrl = "Requests/ConfirmEmailModal/?id=" + sendEmail;
            $.fn.CallPage(tab, $itemUrl, true);
        }*@

        //redo --> not used
        var cancelledEmail = '@CancelledEmail';
        if (cancelledEmail == "True") {
            var tab = ""; //just keeping this on the side
            var $itemUrl = "Requests/DetailsModalView";
        }
    });

    //Render a partial view inside of a modal
    //To do later: add a loading gif div
    $(".load-product-details").on("click", function (e) {
        e.preventDefault();
        e.stopPropagation();
        //takes the item value and calls the Products controller with the ModalView view to render the modal inside
        var $tab = e.target.hash;
        var $itemurl = "Requests/DetailsModalView/?id=" + $(this).val();
        $.fn.CallPage($tab, $itemurl);
        return false;
    });

    $(".load-product-edit").on("click", function (e) {
        e.preventDefault();
        e.stopPropagation();
        //takes the item value and calls the Products controller with the ModalView view to render the modal inside
        var $tab = e.target.hash;
        var $itemurl = "Requests/EditModalView/?id=" + $(this).val();
        $.fn.CallPage($tab, $itemurl);
        return false;
    });

    $(".create-product-details").on("click", function (e) {
        e.preventDefault();
        e.stopPropagation();
        //takes the item value and calls the Products controller with the ModalView view to render the modal inside
        var $tab = e.target.hash;
        var $itemurl = "Requests/CreateModalView";
        $.fn.CallPage($tab, $itemurl);
        return false;
    });

    $(".load-order-details").on("click", function (e) {
        console.log("in order details");
        e.preventDefault();
        e.stopPropagation();
        //takes the item value and calls the Products controller with the ModalView view to render the modal inside
        var $tab = e.target.hash;
        var $itemurl = "Requests/ReOrderModalView/?id=" + $(this).val() + "&NewRequestFromProduct=true";
        $.fn.CallPage($tab, $itemurl);
        return false;
    });

    $(".load-receive-and-location").on("click", function (e) {
        e.preventDefault();
        e.stopPropagation();
        //takes the item value and calls the Products controller with the ModalView view to render the modal inside
        var $tab = e.target.hash;
        var $itemurl = "Requests/ReceivedModal?RequestID=" + $(this).val();
        $.fn.CallPage($tab, $itemurl);
        return false;
    });

    $(".js-go-to-controller").on("click", function (e) {
        console.log("inside of js-go-to-controller");
        e.preventDefault();
        e.stopPropagation();
        var $tab = e.target.hash;
        var $itemurl = "Requests/ConfirmEmailModal";
        $.fn.CallPage($tab, $itemurl);
        return false;
    });

    $.fn.CallPage = function ($tab, $itemurl, isEmail = false) {
        console.log("in function");
        $.ajax({
            async: true,
            url: $itemurl,
            type: 'GET',
            cache: false,
            success: function (data) {
                console.log("success!");
                //replaces the modal-view class with the ModalView view
                $(".modal-view").html(data);
                //turn off data dismiss by clicking out of the box and by pressing esc
                $(".modal-view").modal({
                    backdrop: 'static',
                    keyboard: false
                });
                //shows the modal
                $(".modal").modal('show');
                //$(".modal").on('show.bs.modal', function (e) {
                //    $(".modal .modal-dialog").attr('class', 'modal-dialog zoomInRight animated');
                //})
                //bootstrap dynamically adds a class of modal-backdrop which must be taken off to make it clickable
                $(".modal-backdrop").remove();
                if (!isEmail) { //SET BOOLEAN TO MODAL VIEW NOT ISEMAIL
                    /* Following line should set the correct data-target tab to open ----> not working right now */
                    //$('.nav-tabs a[href="' + $tab + '"]').tab - pane('show');
                    var selectedTab = 0;
                    var mytabs = $('.div-tabs ul li a').each(function (x, obj) {
                        if (obj.hash.indexOf(location.hash) != -1 && location.hash != '') {
                            selectedTab = x;
                        }
                    });
                    $("#tabs").tab({ selected: selectedTab });
                    //document.ready for modal is done here --> setting up product subcategories
                    var parentCategoryId = $("#parentlist").val();
                    var subcategoryId1 = $("#sublist").val();
                    var url = "/Requests/GetSubCategoryList";

                    $.getJSON(url, { ParentCategoryId: parentCategoryId }, function (data) {
                        var item = "";
                        $.each(data, function (i, subCategory) {
                            item += '<option value="' + subCategory.productSubcategoryID + '">' + subCategory.productSubcategoryDescription + '</option>'
                        });
                        $("#sublist").html(item);
                        $("#sublist").val(subcategoryId1).change();
                    });

                    //For the order files

                    //goes into this function
                    $(".custom-file-input").on("change", function () {
                        var fileLabel = $(this).next(".custom-file-label");
                        var files = $(this)[0].files;
                        if (files.length > 1) {
                            fileLabel.html(files.length + ' files selected');
                        }
                        else {
                            fileLabel.html(files[0].name);
                        }
                    });

                    //get the current vendor id (if loading an already existing product)
                    var vendorid = $("#vendorList").val();
                    //call a function to lad the vendor business id from the vendor id
                    $.fn.ChangeVendorBusinessId(vendorid);

                    //console.log("about to get set the hidden fors in the modal view to remember where the user was");

                    $("#Page").val(parseInt(@TempData["TempPage"]));
                    $("#RequestStatusID").val(parseInt(@TempData["TempRequestStatusID"]));
                    $("#SubCategoryID").val(parseInt(@TempData["TempSubcategoryID"]));
                    $("#VendorID").val(parseInt(@TempData["TempVendorID"]));
                    $("#ApplicationUserID").val(@TempData["TempApplicationUserID"]);
                    console.log("PageType:" + @TempData["TempPageType"]);
                    $("#PageType").val(@TempData["TempPageType"]);

                    //IN THE FUTURE: USE DATEPICKER (CODE BELOW- PARTIAL)

                    //set the auto date for order date and invoice date to the current date
                    //console.log("About to enter the datepicker")
                    //$('.datepicker').datepicker();

                }

            }
        });
    }

    //$(".modal-view").on('show.bs.show.bs.modal', function (evt) {
    //    var button = $(evt.relatedTarget);
    //    var modal = $(this);
    //    modal.find('[href="' + button.attr("href") + '"]').tab('show');
    //});

</script>
