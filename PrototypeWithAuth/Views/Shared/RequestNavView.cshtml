@using PrototypeWithAuth.AppData
@{
    ViewData["Title"] = "RequestNavView";
    Layout = "~/Views/Shared/View.cshtml";

    AppUtility.RequestPageTypeEnum pageType = AppUtility.RequestPageTypeEnum.None;
    if (TempData["PageType"] != null)
    {
        pageType = (AppUtility.RequestPageTypeEnum)Enum.Parse(typeof(AppUtility.RequestPageTypeEnum), TempData["PageType"].ToString());
    }

    bool Cart = false;
    bool Requests = false;
    bool Inventory = false;
    switch (pageType)
    {
        case AppUtility.RequestPageTypeEnum.Request:
            Requests = true;
            break;
        case AppUtility.RequestPageTypeEnum.Inventory:
            Inventory = true;
            break;
        case AppUtility.RequestPageTypeEnum.Cart:
            Cart = true;
            break;
    }

    string originalNavClasses = "btn btn-link text-dark";
    string activeClass = " font-weight-bold";

    string type = originalNavClasses;
    string vendor = originalNavClasses;
    string owner = originalNavClasses;
    string location = originalNavClasses;
    string cart = originalNavClasses;

    var SidebarType = TempData["SidebarTitle"];
    switch (SidebarType)
    {
        case AppUtility.RequestSidebarEnum.Type:
            type += activeClass;
            break;
        case AppUtility.RequestSidebarEnum.Vendor:
            vendor += activeClass;
            break;
        case AppUtility.RequestSidebarEnum.Owner:
            owner += activeClass;
            break;
        case AppUtility.RequestSidebarEnum.Location:
            location += activeClass;
            break;
        case AppUtility.RequestSidebarEnum.Cart:
            cart += activeClass;
            break;
    }

}
@*  *@
<div class="row">
    <div class="col-md-2 border-right">
        @*<nav class="navbar flex-grow-1">*@
        <ul class="nav flex-column nav-pills nav-stacked">
            @if (Requests || Inventory)
            {
                <li class="nav-item">
                    @*@Html.ActionLink("Add Item", "Create", "Products", new { }, new { @class = "btn btn-link text-dark" })*@
                    <button class="btn btn-link text-dark load-product-details" value="0" data-target="item" href="item">Add Item</button>
                </li>
            }
            @if (Requests || Inventory)
            {
                <li class="nav-item">
                    @Html.ActionLink("Type", "Index", "ProductSubcategories", new { @PageType = pageType }, new { @class = type })
                </li>
            }
            @if (Requests || Inventory)
            {
                <li class="nav-item">
                    @Html.ActionLink("Vendor", "Index", "Vendors", new { @PageType = pageType }, new { @class = vendor })
                </li>
            }
            @if (Requests || Inventory)
            {
                <li class="nav-item">
                    @Html.ActionLink("Owner", "Index", "Owners", new { }, new { @class = owner })
                </li>
            }
            @if (Inventory)
            {
                <li class="nav-item">
                    @Html.ActionLink("Location", "Index", "Locations", new { }, new { @class = location })
                </li>
            }
            @if (Cart)
            {
                <li class="nav-item">
                    <a class=@cart>Cart</a>
                </li>
            }
        </ul>
        @*</nav>*@
    </div>
    <div class="col-md-10 border-left">
        @RenderBody()
    </div>
</div>

<!-- The Modal -->
<div class="modal modal-view" id="myModal">
</div>

@RenderSection("Scripts", required: false)
<script>

    //Render a partial view inside of a modal
    //To do later: add a loading gif div
    $(".load-product-details").on("click", function (e) {
        e.preventDefault();
        e.stopPropagation();
        //takes the item value and calls the Products controller with the ModalView view to render the modal inside
        var $tab = e.target.hash;
        var $itemurl = "Requests/ModalView/?id=" + $(this).val();
        $.fn.CallPage($tab, $itemurl);
        return false;
    });

    $(".load-order-details").on("click", function (e) {
        e.preventDefault();
        e.stopPropagation();
        //takes the item value and calls the Products controller with the ModalView view to render the modal inside
        var $tab = e.target.hash;
        var $itemurl = "Requests/ModalView/?id=" + $(this).val()+"&NewRequestFromProduct=true";
        $.fn.CallPage($tab, $itemurl);
        return false;
    });

    $.fn.CallPage = function ($tab, $itemurl) {
        $.ajax({
            url: $itemurl,
            type: 'GET',
            cache: false,
            success: function (data) {
                //replaces the modal-view class with the ModalView view
                $(".modal-view").html(data);
                //shows the modal
                $(".modal").modal('show');
                //bootstrap dynamically adds a class of modal-backdrop which must be taken off to make it clickable
                $(".modal-backdrop").remove();
                /* Following line should set the correct data-target tab to open ----> not working right now */
                //$('.nav-tabs a[href="' + $tab + '"]').tab - pane('show');
                var selectedTab = 0;
                var mytabs = $('.div-tabs ul li a').each(function (x, obj) {
                    if (obj.hash.indexOf(location.hash) != -1 && location.hash != '') {
                        selectedTab = x;
                    }
                });
                $("#tabs").tab({ selected: selectedTab });
                //document.ready for modal is done here --> setting up product subcategories
                var parentCategoryId = $("#parentlist").val();
                var subcategoryId1 = $("#sublist").val();
                var url = "/Requests/GetSubCategoryList";

                $.getJSON(url, { ParentCategoryId: parentCategoryId }, function (data) {
                    var item = "";
                    $.each(data, function (i, subCategory) {
                        item += '<option value="' + subCategory.productSubcategoryID + '">' + subCategory.productSubcategoryDescription + '</option>'
                    });
                    $("#sublist").html(item);
                    $("#sublist").val(subcategoryId1).change();
                });

            }
        });
    }

    //$(".modal-view").on('show.bs.show.bs.modal', function (evt) {
    //    var button = $(evt.relatedTarget);
    //    var modal = $(this);
    //    modal.find('[href="' + button.attr("href") + '"]').tab('show');
    //});

</script>
