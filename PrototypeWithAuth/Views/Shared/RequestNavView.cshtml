@using Microsoft.AspNetCore.Identity
@using PrototypeWithAuth.Data
@using PrototypeWithAuth.AppData
@using PrototypeWithAuth.ViewModels
@using Microsoft.AspNetCore.Routing
@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager
@{
    Layout = "~/Views/Shared/Master.cshtml";

    string pageType = "";
    var categoryType = AppUtility.CategoryTypeEnum.Lab;

    var MenuType = TempData[AppUtility.TempDataTypes.MenuType.ToString()]?.ToString();
    List<MenuItems> MainMenuItems = new List<MenuItems>();

    //all pages need PageType passed in so we're testing if it's null and if not we're taking in the type
    if (TempData[AppUtility.TempDataTypes.PageType.ToString()] != null)
    {
        pageType = TempData[AppUtility.TempDataTypes.PageType.ToString()].ToString();
        //pageType = (AppUtility.RequestPageTypeEnum)Enum.Parse(typeof(AppUtility.RequestPageTypeEnum), TempData[AppUtility.TempDataTypes.PageType.ToString()].ToString());
    }

    string initalClasses = "opac87 align-text-bottom  py-3";
    string currentClasses = " activeNavLink  ";

    if (MenuType == AppUtility.MenuItems.OrdersAndInventory.ToString())
    {
        MainMenuItems = CreateMenus.CreateOrdersAndInventoryMainMenu(pageType, initalClasses, " activeNavLink");
    }
    else if (MenuType == AppUtility.MenuItems.LabManagement.ToString())
    {
        MainMenuItems = CreateMenus.CreateLabManagementMainMenu(pageType, initalClasses, " text-dark lab-man-filter");
    }
    else if (MenuType == AppUtility.MenuItems.Accounting.ToString())
    {
        MainMenuItems = CreateMenus.CreateAccountingMainMenu(pageType, initalClasses, " text-dark accounting-filter");
    }
    else if (MenuType == AppUtility.MenuItems.Operation.ToString())
    {
        MainMenuItems = CreateMenus.CreateOperationsMainMenu(pageType, initalClasses, " text-dark operations-filter");
    }
    else if (MenuType == AppUtility.MenuItems.Users.ToString())
    {
        MainMenuItems = CreateMenus.CreateUsersMainMenu(pageType, initalClasses, " text-dark users-filter");
    }
    else if (MenuType == AppUtility.MenuItems.TimeKeeper.ToString())
    {
        MainMenuItems = CreateMenus.CreateTimekeeperMainMenu(pageType, initalClasses, " text-dark timekeeper-filter");
    }
    else if (MenuType == AppUtility.MenuItems.Expenses.ToString())
    {
        MainMenuItems = CreateMenus.CreateExpensesMainMenu(pageType, initalClasses, " text-dark expenses-filter");
    }

    //passing the
    string inventoryClass = initalClasses;
    string summaryClass = initalClasses;
    string requestClass = initalClasses;
    string cartClass = initalClasses;
    string searchClass = initalClasses;
    string locationClass = initalClasses;


    bool Cart = false;
    bool Requests = false;
    bool Inventory = false;
    bool Summary = false;


    string originalNavClasses = " ";
    string activeClass = "text-dark order-inv-filter ";

    List<MenuItems> SidebarMenuItems = new List<MenuItems>();
    string sidebarTitle = ""; //TODO: cchange this to SideabrType!!!!!;
    if (TempData["SidebarTitle"] != null)
    {
        sidebarTitle = TempData["SidebarTitle"].ToString();
    }
    string sidebarType = "";
    if (TempData[AppUtility.TempDataTypes.SidebarType.ToString()] != null)
    {
        sidebarType = TempData[AppUtility.TempDataTypes.SidebarType.ToString()].ToString();
    }

    var menuClass = originalNavClasses;
    if (pageType == AppUtility.RequestPageTypeEnum.Inventory.ToString())
    {
        //inventoryClass = initalClasses + currentClasses;
        SidebarMenuItems = CreateMenus.GetOrdersAndInventorySummarySidebarMenuItems(sidebarTitle, originalNavClasses, activeClass, pageType, categoryType);
        Inventory = true;
    }
    else if (pageType == AppUtility.RequestPageTypeEnum.Summary.ToString())
    {
        //summaryClass = initalClasses + currentClasses;
        SidebarMenuItems = CreateMenus.GetOrdersAndInventorySummarySidebarMenuItems(sidebarTitle, originalNavClasses, activeClass, pageType, categoryType);
        Summary = true;
    }
    else if (pageType == AppUtility.RequestPageTypeEnum.Request.ToString())
    {
        Requests = true;
        //requestClass = initalClasses + currentClasses;
        SidebarMenuItems = CreateMenus.GetOrdersAndInventoryRequestsSidebarMenuItems(sidebarTitle, originalNavClasses, activeClass, pageType, categoryType);
    }
    else if (pageType == AppUtility.RequestPageTypeEnum.Cart.ToString())
    {
        //cartClass = initalClasses + currentClasses;
        SidebarMenuItems = CreateMenus.GetOrdersAndInventoryCartSidebarMenuItems(sidebarTitle, originalNavClasses, activeClass, pageType, categoryType);
        Cart = true;
    }
    else if (pageType == AppUtility.RequestPageTypeEnum.Search.ToString())
    {
        //searchClass = initalClasses + currentClasses + " search-link";
        SidebarMenuItems = CreateMenus.GetOrdersAndInventorySearchSidebarMenuItems(originalNavClasses, activeClass, pageType, categoryType);
    }
    else if (pageType == AppUtility.RequestPageTypeEnum.Location.ToString())
    {
        //locationClass = initalClasses + currentClasses;
        SidebarMenuItems = CreateMenus.GetOrdersAndInventoryLocationSidebarMenuItems(originalNavClasses, activeClass, pageType, categoryType);
    }
    else if (pageType == AppUtility.LabManagementPageTypeEnum.Suppliers.ToString())
    {
        SidebarMenuItems = CreateMenus.CreateLabManageSuppliersSidebar(sidebarType, originalNavClasses, "lab-man-filter");
    }
    else if (pageType == AppUtility.LabManagementPageTypeEnum.Locations.ToString())
    {
        SidebarMenuItems = CreateMenus.CreateLabManageLocationsSidebar(sidebarType, originalNavClasses, "lab-man-filter");
    }
    else if (pageType == AppUtility.LabManagementPageTypeEnum.Quotes.ToString())
    {
        SidebarMenuItems = CreateMenus.CreateLabManageOrdersSidebar(sidebarType, originalNavClasses, "lab-man-filter");
    }
    else if (pageType == AppUtility.LabManagementPageTypeEnum.SearchLM.ToString())
    {
        SidebarMenuItems = CreateMenus.CreateLabManageSearchSidebar(sidebarType, originalNavClasses, "lab-man-filter");
    }
    else if (pageType == AppUtility.LabManagementPageTypeEnum.Equipment.ToString())
    {
        SidebarMenuItems = CreateMenus.CreateLabManageEquipmentSidebar(sidebarType, originalNavClasses, "lab-man-filter");
    }
    else if (pageType == AppUtility.PaymentPageTypeEnum.Payments.ToString())
    {
        SidebarMenuItems = CreateMenus.CreateAccountingPaymentsSidebar(sidebarType, originalNavClasses, "accounting-filter");
    }
    else if (pageType == AppUtility.PaymentPageTypeEnum.Notifications.ToString())
    {
        SidebarMenuItems = CreateMenus.CreateAccountingNotificationsSidebar(sidebarType, originalNavClasses, "accounting-filter");
    }
    else if (pageType == AppUtility.PaymentPageTypeEnum.General.ToString())
    {
        //TODO: LATER
    }
    else if (pageType == AppUtility.PaymentPageTypeEnum.SuppliersAC.ToString())
    {
        SidebarMenuItems = CreateMenus.CreateAccountingSuppliersSidebar(sidebarType, originalNavClasses, "accounting-filter");
    }
    else if (pageType == AppUtility.OperationsPageTypeEnum.InventoryOperations.ToString() || pageType == AppUtility.OperationsPageTypeEnum.RequestOperations.ToString())
    {
        SidebarMenuItems = CreateMenus.CreateOperationsRequestsSidebar(pageType, sidebarType, originalNavClasses, "operations-filter");
    }
    else if (pageType == AppUtility.OperationsPageTypeEnum.SearchOperations.ToString())
    {
        SidebarMenuItems = CreateMenus.CreateOperationsSearchSidebar(sidebarType, originalNavClasses, "operations-filter");
    }
    else if (pageType == AppUtility.UserPageTypeEnum.User.ToString())
    {
        SidebarMenuItems = CreateMenus.CreateUsersUsersSidebar(sidebarType, originalNavClasses, "users-filter");
    }
    else if (pageType == AppUtility.UserPageTypeEnum.Workers.ToString())
    {
        SidebarMenuItems = CreateMenus.CreateUsersWorkersSidebar(sidebarType, originalNavClasses, "users-filter");
    }
    else if (pageType == AppUtility.TimeKeeperPageTypeEnum.Report.ToString())
    {
        SidebarMenuItems = CreateMenus.CreateTimekeeperReportsSidebar(sidebarType, originalNavClasses, "timekeeper-filter");
    }
    else if (pageType == AppUtility.TimeKeeperPageTypeEnum.TimekeeperSummary.ToString())
    {
        SidebarMenuItems = CreateMenus.CreateTimekeeperSummarySidebar(sidebarType, originalNavClasses, "timekeeper-filter");
    }
    else if (pageType == AppUtility.ExpensesPageTypeEnum.ExpensesSummary.ToString())
    {
        SidebarMenuItems = CreateMenus.CreateExpensesSummarySidebar(sidebarType, originalNavClasses, "expenses-filter");
    }
    else if (pageType == AppUtility.ExpensesPageTypeEnum.ExpensesStatistics.ToString())
    {
        SidebarMenuItems = CreateMenus.CreateExpensesStatisticsSidebar(sidebarType, originalNavClasses, "expenses-filter");
    }
    else if (pageType == AppUtility.ExpensesPageTypeEnum.ExpensesCost.ToString())
    {
        SidebarMenuItems = CreateMenus.CreateExpensesCostsSidebar(sidebarType, originalNavClasses, "expenses-filter");
    }

    var sidebarWidth = "119px";

    //not using this right now --> see if we should put it back in
    var SendEmail = "0";
    if (TempData["SendEmail"] != null)
    {
        SendEmail = TempData["SendEmail"].ToString();
    }

    //redo --> not used
    var CancelledEmail = false;
    if (TempData["CancelledEmail"] != null && TempData["CancelledEmail"].ToString().Equals("True"))
    {
        CancelledEmail = true;
    }

    if (TempData["RequestID"] == null)
    {
        TempData["RequestID"] = 0;
    }

}

@{
    if (TempData["SuccessMessage"] != null)
    {
        <div>@TempData["SuccessMessage"].ToString()</div>
    }
}
<header class="sticky-top">

    <div class="navbar-shadow-2">
        <div class="navbar-shadow-1">
            <nav class="navbar navbar-expand-sm navbar-toggleable-sm navbar-light bg-white ourNavBar p-0 no-box-shadow">

                @{ var styleClass = "min-width: " + sidebarWidth + "; max-width: " + sidebarWidth + ";";}
                <span style="@styleClass">
                    <a class="navbar-brand home-nav-item" asp-area="" asp-controller="Home" asp-action="Index">
                        <img src="~/images/css/Centarix_Logo_only.png" height="20" alt="Logo" />
                    </a> 
                </span>

                <div class="collapse navbar-collapse">
                    <ul class="navbar-nav dropdown-menu-md-left " style="font-size:1.25rem; font-weight:500; padding-left: 5.625rem;">

                        @foreach (var MenuItem in MainMenuItems)
                        {
                            <li class="nav-item " style="margin-right: 4.375rem;">
                                @Html.ActionLink(MenuItem.Description, MenuItem.Action, MenuItem.Controller, MenuItem.RouteValues, new { @class = MenuItem.Classes+" top-menu", @id = MenuItem.ID })
                            </li>
                        }
                    </ul>
                </div>
                <div class="">
                    <ul class="list-unstyled m-0">
                        <li><button href="#" id="openNotifications" type="button" data-toggle="popover" data-trigger="focus" data-placement="bottom" data-container="body" class="btn no-box-shadow p-0 m-0 "><div class="alerts-icon"><i style='font-size: 2.3rem; padding-right:1.313rem !important;  color: #808080;' class='icon-notification_top_menu'></i> <span id="alertCount" class="alert-count "></span></div>  </button> </li>
                        <div style="display:none;" id="notifications-popover">
                            <button type="button" class="close" style="font-size:2rem;" data-dismiss="popover">&times;</button>
                            <div style="width:410px" class="p-4 heading-1">
                                Notifications
                            </div>
                        </div>
                    </ul>
                </div>
                <div class="  ">
                    <ul class="list-unstyled mb-0 ">
                        <li>
                            <div class="form-inline pr-3">
                                <div class="md-form my-0 p-2">
                                    <span class="text">
                                        @UserManager.GetUserAsync(User).Result.FirstName @UserManager.GetUserAsync(User).Result.LastName &nbsp;
                                    </span>
                                        <button href="#" id="profile-img" type="button" data-toggle="popover" data-trigger="focus" data-placement="bottom" data-container="body" class="btn btn-link p-0 circular-profile-img circular-profile-img-50">
                                            @{
                                                var src = "/UserImages/profile_circle_big.png";
                                                if (UserManager.GetUserAsync(User).Result.UserImage != null)
                                                {
                                                    src = UserManager.GetUserAsync(User).Result.UserImage;
                                                }
                                            }
                                            <img src="@src" class=" ml-0" alt="default User image" />
                                        </button>
                                </div>
                            </div>
                        </li>
                        <div style="display:none;" id="logout-popover">
                            <form class="form-inline " asp-area="Identity" asp-page="/Account/Logout" asp-route-returnUrl="@Url.Action("Index", "Home", new { area = "" })">
                                <button type="submit" id="logout-form" class="nav-link  border-0 no-box-shadow btn-white btn-link text-dark logout-button">Logout</button>
                            </form>
                        </div>
                    </ul>
                </div>


            </nav>
        </div>
    </div>

</header>
<div class="container-fluid pl-0">
    <main role="main" class="overflow-hidden">
        @*<div class="spinner-border center" role="status" id="loading" style="display:none;">
                <span class="sr-only">Loading...</span>
            </div>*@

        <div class="center" role="status" id="loading" style="display:none; z-index:2000 !important; position: relative;">
            <img src="~/images/css/Loading/centarix_loading3.gif" />
        </div>
        <div style="display: flex; overflow: hidden;">
            @{ var style = "min-width: " + sidebarWidth + "; max-width: " + sidebarWidth + "; min-height:100rem; aria-hidden=true;"; }
            <div class="sidebar-shadow2">
                <div class="sidebar-shadow1">
                    <div style="@style" class="navbar-expand-lg text-center ourNavBar">
                        @*<nav class="navbar navbar-expand-lg">*@
                        <ul class="nav flex-column nav-pills nav-stacked nav-top-sidebar1"
                            style="left: 55px !important;  position: fixed; left: 50%; transform: translate(-55px, 0); max-width: @sidebarWidth; min-width: @sidebarWidth; min-height: 100rem;
">
                            @{
                                var liMargins = "padding-bottom: 2.25rem; padding-top: 2.25rem;";
                            }
                            @foreach (var sidebarNavItem in SidebarMenuItems)
                            {
                                <a href="@Url.ActionLink( sidebarNavItem.Action , sidebarNavItem.Controller, sidebarNavItem.RouteValues)" class="text-black">
                                    <li class="nav-item sidenav-button @sidebarNavItem.Classes side-menu px-2" style="@liMargins">
                                        <i class="@sidebarNavItem.IconName" style="font-size: 1.75rem; "></i>
                                        <br /><span>@sidebarNavItem.Description</span><br />
                                        <span class="hidden sidebarCount @sidebarNavItem.MenuItemsID"></span>
                                    </li>
                                </a>
                                liMargins += "";
                            }


                        </ul>
                    </div>
                </div>
                @*</nav>*@
            </div>
            <div style="flex-grow: 1" class="outer-page-margins nav-top-margin2 render-body ">
                @if (ViewBag.ErrorMessage != null)
                {
                    <span class="text danger-text">Error: @ViewBag.ErrorMessage</span><br />
                }
                <!--class="col-md-10 border-left"-->
                @RenderBody()
            </div>
        </div>
    </main>
</div>


<!-- Confirm Email Modal -->
<div class="modal confirm-email-modal" id="myModal">
</div>
