@model PrototypeWithAuth.ViewModels.VisualLocationsViewModel
@using PrototypeWithAuth.AppData
@*
    For more information on enabling MVC for empty projects, visit http://go.microsoft.com/fwlink/?LinkID=397860
*@

@{ 
    var bcColor = "";
    switch (Model.SectionType)
    {
        case AppUtility.MenuItems.Requests:
            bcColor = " order-inv-background-color ";
            break;
        case AppUtility.MenuItems.LabManagement:
            bcColor = " lab-man-background-color ";
            break;
    }
}
@*<script src="~/js/VisualLocationsZoom.js"></script>*@
@*<script src="~/js/site.js" asp-append-version="true"></script>*@

<div class="modal modal-view " id="visualZoomModal" role="dialog" aria-labelledby="User" data-backdrop="false">
    <div class="modal-dialog modal-lg no-box-shadow" role="document" style="max-height:100%; width: 90%; max-width: 100%">
        <div class="modal-content d-inline-block no-box-shadow  bg-transparent" >

            <div class="modal-body vlz-bgcolor no-box-shadow  bg-transparent">

                <div class="row">
                    <div class="col-12">
                        <button type="button" data-dismiss="modal" style="border-width: 0; background: transparent; font-size:3rem; font-weight:bold;" class="float-right mb-2" onclick="$(this).closest('.modal').modal('hide');">&times;</button>
                    </div>
                </div>

                <div class="container-fluid" style="display:flex; justify-content:center;">
                    <table class="table table-sm border visualzoom bg-white" style="table-layout: fixed;">
                        @{
                            int z = -1;
                        }
                        @for (int X = 0; X < Model.ParentLocationInstance.Height; X++)
                        {
                            <tr class="thick-border">
                                @for (int y = 0; y < Model.ParentLocationInstance.Width; y++)
                                {
                                    z++;
                                    var backgroundClass = "thick-border";
                                    @if (Model.ChildrenLocationInstances.ToList().Count() >= z) //put this in an if statement so it won't run into an instance where it doesn't exist since it's not a foreach
                                    {
                                        if (Model.ChildrenLocationInstances[z].RequestLocationInstances.Any())
                                        {
                                            backgroundClass += bcColor;
                                            var innerHtml = Model.ChildrenLocationInstances[z].RequestLocationInstances.FirstOrDefault().Request.Product.ProductName;
                                            var requestID = Model.ChildrenLocationInstances[z].RequestLocationInstances.FirstOrDefault().RequestID;
                                            <td class="@backgroundClass">

                                                @*@Html.ActionLink(innerHtml, "DetailsModalView", "Requests", new { @id = requestID }, new { @class = "btn btn-block text-light" })*@

                                                @*<a href="@Url.ActionLink("DetailsView", "Requests", new { @id = requestID })" class="btn btn-block text-light pb-5">@innerHtml</a>*@
                                                <button class="btn btn-block vlz-filled load-order-details" value="@requestID" style="font-size:1.0625rem;">@innerHtml</button>

                                                <span style="color:white;"> @Model.ChildrenLocationInstances[z].Place</span>
                                            </td>
                                        }
                                        else
                                        {
                                            <td style="vertical-align:bottom;" class="@backgroundClass">
                                                @Model.ChildrenLocationInstances[z].Place
                                            </td>
                                        }
                                    }
                                }
                            </tr>
                        }
                    </table>
                </div>


            </div>
        </div>
    </div>
</div>

<script>
    $(".load-order-details").on("click", function (e) {
        console.log("in order details");
        e.preventDefault();
        e.stopPropagation();
        //takes the item value and calls the Products controller with the ModalView view to render the modal inside
        console.log("val: " + $(this).val());
        var $itemurl = "/Requests/EditModalView/?id=" + $(this).attr("value") + "&isEditable=false";
        console.log("itemurl: " + $itemurl);
        $("#loading").show();
        $.ajax({
            async: true,
            url: $itemurl,
            type: 'GET',
            cache: true,
            success: function (data) {
                $("#loading").hide();
                var modal = $(data);
                $('body').append(modal);
                $(".editModal").modal({
                    backdrop: false,
                    keyboard: false,
                });
                $(".editModal").modal('show');
                $('.mdb-select').materialSelect();
                $('#myForm a:first').tab('show');

            }
        });
        return false;
    });


    $.fn.OnOpenModalView = function () {
        $('.modal-content a:first').tab('show');
        var parentCategoryId = $("#parentlist").val();
        var subcategoryId1 = $("#sublist").val();
        var url = "/Requests/GetSubCategoryList";

        $.getJSON(url, { ParentCategoryId: parentCategoryId }, function (data) {
            var item = "";
            $.each(data, function (i, subCategory) {
                item += '<option value="' + subCategory.productSubcategoryID + '">' + subCategory.productSubcategoryDescription + '</option>'
            });
            $("#sublist").html(item);
            $("#sublist").val(subcategoryId1).change();
        });

        //For the order files

        //goes into this function
        $(".custom-file-input").on("change", function () {
            var fileLabel = $(this).next(".custom-file-label");
            var files = $(this)[0].files;
            if (files.length > 1) {
                fileLabel.html(files.length + ' files selected');
            }
            else {
                fileLabel.html(files[0].name);
            }
        });

        //get the current vendor id (if loading an already existing product)
        var vendorid = $("#vendorList").val();
        //call a function to lad the vendor business id from the vendor id
        $.fn.ChangeVendorBusinessId(vendorid);

    }

</script>
