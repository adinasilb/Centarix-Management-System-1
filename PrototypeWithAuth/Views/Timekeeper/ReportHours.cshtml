@model PrototypeWithAuth.ViewModels.EntryExitViewModel;
@using Microsoft.AspNetCore.Identity
@using PrototypeWithAuth.Data
@using System.Globalization;
@using System.Threading;
@using PrototypeWithAuth.AppData;
@using Microsoft.AspNetCore.Http;
@inject UserManager<ApplicationUser> UserManager

@{
    ViewData["Title"] = "Report Hours";
    if (AppUtility.IsAjaxRequest(Context.Request))
    {
        Layout = null;
        <script src="~/js/site.js" asp-append-version="true"></script>
    }
    else
    {
        Layout = "~/Views/Shared/RequestNavView.cshtml";
    }
    @*<label class="text-danger-centarix p-2" style="width:100%; text-align: center">Exception here: @Model.ErrorMessage</label>*@
    <div class="row">
        @if (Model.ErrorMessage != null && Model.ErrorMessage != "")
        {
            <span class="text danger-text view-bag-error">Error: @Model.ErrorMessage</span>

        }
    </div>
    <div class="container-fluid">
        <div class="row pb-5 mb-4">
            <div class="col-8">
                <div class="row">
                    <div class="col-3 mt-2 text-left">
                        @{
                            var user = UserManager.GetUserAsync(User).Result;
                            var src = "/UserImages/user-image-placeholder.png";
                            if (user.UserImage != null)
                            {
                                src = "\\" + AppUtility.GetLastFiles(user.UserImage, 2);
                            }
                        }
                        <img src="@src" class=" ml-0 circular-profile-img circular-profile-img-225" alt="default User image" />
                    </div>
                    <div class="col-7 pl-5 mt-5">
                        @if (Model.EntryExitEnum.Equals(PrototypeWithAuth.AppData.AppUtility.EntryExitEnum.Exit1) ||
                      Model.EntryExitEnum.Equals(PrototypeWithAuth.AppData.AppUtility.EntryExitEnum.Exit2))
                        {
                            <div style="font-size:3.25rem;">@user.FirstName&nbsp;@user.LastName</div>
                            <div class="mt-3 timekeeper-font-color font-weight-bold">
                                <label style="font-size:2.0625rem;">Entered @Model.Entry?.ToString("HH:mm"), Working <span id="working">@((DateTime.Now - Model.Entry)?.ToString(@"hh\:mm\:ss"))</span></label>
                            </div>
                        }
                        else
                        {

                            <div class="" style="font-size:3.8125rem; font-weight:500; ">Welcome!</div>
                            <div style="font-size:3.25rem;">@user.FirstName&nbsp;@user.LastName</div>
                        }

                    </div>
                    <input type="hidden" value="@user.Id" id="userid" />
                    <input class="d-none" id="entry" value="@Model.Entry?.ToString("MMMM") @Model.Entry?.Day, @Model.Entry?.Year @Model.Entry?.Hour:@Model.Entry?.Minute:@Model.Entry?.Second" />
                </div>
            </div>
            <div class="col-4">
                <div id="time" style="        font-size: 4.9375rem;" class="entry-exit-background pt-3 pb-3 text-center col-8">@DateTime.Now.ToShortTimeString()</div>
                <div class="mt-4" style="font-size:2rem;">@DateTime.Now.ToLongDateString()</div>
                @{ var ci = CultureInfo.CreateSpecificCulture("he-IL");
                    ci.DateTimeFormat.Calendar = new HebrewCalendar();
                    var hebrewDate = DateTime.Now.Date.ToString("dd MMM yyyy", ci); }
                <div style="font-size:2rem;">@hebrewDate</div>
            </div>
        </div>
        @{
            var entryClasses = "";
            var exitClasses = "";
            var isExitDisabled = "";
            var isEntryDisabled = "";
            var entryDescription = "Entry";
            var exitDescription = "Exit";
            switch (Model.EntryExitEnum)
            {
                case PrototypeWithAuth.AppData.AppUtility.EntryExitEnum.Entry1:
                    entryClasses = "success-color";
                    exitClasses = "disabled-color";
                    isExitDisabled = "disabled";
                    isEntryDisabled = "";
                    entryDescription = "Entry";
                    exitDescription = "Exit";
                    break;
                case PrototypeWithAuth.AppData.AppUtility.EntryExitEnum.Exit1:
                    entryClasses = "disabled-color";
                    exitClasses = "danger-color";
                    isExitDisabled = "";
                    isEntryDisabled = "disabled";
                    entryDescription = "Entry";
                    exitDescription = "Exit";
                    break;
                case PrototypeWithAuth.AppData.AppUtility.EntryExitEnum.Entry2:
                    entryClasses = "success-color";
                    exitClasses = "disabled-color";
                    isExitDisabled = "disabled";
                    isEntryDisabled = "";
                    exitDescription = "Exit 2";
                    entryDescription = "Entry 2";
                    break;
                case PrototypeWithAuth.AppData.AppUtility.EntryExitEnum.Exit2:
                    entryClasses = "disabled-color";
                    exitClasses = "danger-color";
                    isExitDisabled = "";
                    isEntryDisabled = "disabled";
                    exitDescription = "Exit 2";
                    entryDescription = "Entry 2";
                    break;

                case PrototypeWithAuth.AppData.AppUtility.EntryExitEnum.None:
                    entryClasses = "disabled-color";
                    exitClasses = "disabled-color";
                    isExitDisabled = "disabled";
                    isEntryDisabled = "disabled";
                    break;
            }
        }

        <div class="row pb-5">
            <div class="col-7 mb-6">
                <form action="" id="entryForm" method="post" enctype="multipart/form-data" style="width:100%">
                    @if (!String.IsNullOrEmpty(Model.OffDayRemoved))
                    {
                        <div class="row text-danger-centarix text-center off-day-removal-warning">
                            <div class="col-md-6 offset-3 pr-4">You have removed your @Model.OffDayRemoved</div>
                        </div>
                    }
                    @Html.HiddenFor(e => e.EntryExitEnum)
                    <div class="row entry-exit-background p-5  mt-5">
                        <div class="col-6 between-button-margin my-3 text-right">
                            <button id="entry" class="no-box-shadow border-0 rounded-pill @entryClasses text-white entry-exit-button" @isEntryDisabled type="submit" asp-action="ReportHours">
                                <span>
                                    <i class="icon-entry-24px" style=" font-size: 3rem; top:.25rem; position:relative;">
                                    </i>@entryDescription
                                </span>
                            </button>
                        </div>
                        <div class="col-5   my-3 text-left button p-0">
                            <button id="exit" class="no-box-shadow border-0 rounded-pill @exitClasses text-white entry-exit-button" @isExitDisabled type="submit" asp-action="ReportHours">
                                <span>
                                    @exitDescription<i class="icon-exit-24px" style=" font-size: 3rem; top:.25rem; position:relative;  margin-left: 2rem;">
                                    </i>
                                </span>
                            </button>
                        </div>
                    </div>
                </form>
            </div>
            <div class="col-4 mb-6 offset-1">
                <div class="row mt-6 text-left ">
                    <button class="col-8 timekeeper-color rounded-pill border-0 open-work-from-home-modal text-white  ReportHours heading-1 pt-3 pb-3 pr-5 pl-5 " type="button">Work From Home</button>
                </div>
                <div class="row mt-5 text-left ">
                    <button class=" col-8 timekeeper-color rounded-pill border-0 open-update-hours-modal text-white ReportHours heading-1 pt-3 pb-3 pr-5 pl-5" value="@DateTime.Now.Date.ToString("yyyy-MM-dd")" type="button">Update Hours</button>
                </div>
            </div>
        </div>
    </div>

}
<script>

    window.onload = function (e) {
        this.startTime();
    }
    function startTime() {
        var today = new Date();
        var h = today.getHours();
        var m = today.getMinutes();
        //var s = today.getSeconds();
        m = checkTime(m);
        //  s = checkTime(s);
        document.getElementById('time').innerHTML =
            h + ":" + m;
        var entry = new Date($('#entry').val())
        var diff = today.getTime() - entry.getTime();

        var days = Math.floor(diff / (1000 * 60 * 60 * 24));
        diff -= days * (1000 * 60 * 60 * 24);

        var hours = Math.floor(diff / (1000 * 60 * 60));
        diff -= hours * (1000 * 60 * 60);

        var mins = Math.floor(diff / (1000 * 60));
        diff -= mins * (1000 * 60);
        mins = checkTime(mins);
        var seconds = Math.floor(diff / (1000));
        diff -= seconds * (1000);
        seconds = checkTime(seconds);
        $('#working').html(hours + ":" + mins + ":" + seconds);
        var t = setTimeout(startTime, 500);
    }
    function checkTime(i) {
        if (i < 10) { i = "0" + i };  // add zero in front of numbers < 10
        return i;
    }

</script>
