@model PrototypeWithAuth.ViewModels.EntryExitViewModel;
@using Microsoft.AspNetCore.Identity
@using PrototypeWithAuth.Data
@inject UserManager<ApplicationUser> UserManager

@{
    ViewData["Title"] = "Report Hours";
    Layout = "~/Views/Shared/TimeKeeperView.cshtml";

    <div class="m-6">
        <div class="row m-6 mb-4">
            <div class="col-2 mt-2 text-left">

                @{
                    var user = UserManager.GetUserAsync(User).Result;
                    var src = "/UserImages/profile_circle_big.png";
                    if (user.UserImage != null)
                    {
                        src = user.UserImage;
                    }
                    <img src="@src" class="user-image ml-0" height="225" alt="default User image" />
                }
            </div>
            <div class="col-4 pl-5 mt-4 pt-5">
                <div class="" style="font-size:3.8125rem; font-weight:500; ">Welcome!</div>
                <div style="font-size:3.25rem;">@user.FirstName&nbsp;@user.LastName</div>
            </div>
            <input type="hidden" value="@user.Id" id="userid" />
            <div class="col-6 text-right">
                <div id="time" style="font-size: 8.8125rem;">@DateTime.Now.ToShortTimeString()</div>
                <div style="font-size:2.125rem;">@DateTime.Now.ToLongDateString()</div>
            </div>

        </div>
        @if (Model.EntryExitEnum.Equals(PrototypeWithAuth.AppData.AppUtility.EntryExitEnum.Exit1) ||
        Model.EntryExitEnum.Equals(PrototypeWithAuth.AppData.AppUtility.EntryExitEnum.Exit2))
        {
            <div class=" text-center timekeeper-font-color font-weight-bolder" >
                <label style="font-size:2.0625rem;">Entered @Model.Entry?.ToString("HH:mm"), Working @((DateTime.Now - Model.Entry)?.ToString(@"hh\:mm\:ss"))</label>                
            </div>
        }


        @{
            var entryClasses = "";
            var exitClasses = "";
            var isExitDisabled = "";
            var isEntryDisabled = "";
            var entryDescription = "Entry";
            var exitDescription = "Exit";
            switch (Model.EntryExitEnum)
            {
                case PrototypeWithAuth.AppData.AppUtility.EntryExitEnum.Entry1:
                    entryClasses = "success-color";
                    exitClasses = "disabled-color";
                    isExitDisabled = "disabled";
                    isEntryDisabled = "";
                    entryDescription = "Entry 1";
                    exitDescription = "Exit 1";
                    break;
                case PrototypeWithAuth.AppData.AppUtility.EntryExitEnum.Exit1:
                    entryClasses = "disabled-color";
                    exitClasses = "danger-color";
                    isExitDisabled = "";
                    isEntryDisabled = "disabled";
                    entryDescription = "Entry 1";
                    exitDescription = "Exit 1";
                    break;
                case PrototypeWithAuth.AppData.AppUtility.EntryExitEnum.Entry2:
                    entryClasses = "success-color";
                    exitClasses = "disabled-color";
                    isExitDisabled = "disabled";
                    isEntryDisabled = "";
                    exitDescription = "Exit 2";
                    entryDescription = "Entry 2";
                    break;
                case PrototypeWithAuth.AppData.AppUtility.EntryExitEnum.Exit2:
                    entryClasses = "disabled-color";
                    exitClasses = "danger-color";
                    isExitDisabled = "";
                    isEntryDisabled = "disabled";
                    exitDescription = "Exit 2";
                    entryDescription = "Entry 2";
                    break;

                case PrototypeWithAuth.AppData.AppUtility.EntryExitEnum.None:
                    entryClasses = "disabled-color";
                    exitClasses = "disabled-color";
                    isExitDisabled = "disabled";
                    isEntryDisabled = "disabled";
                    break;
            }
        }

        <form action="" id="myForm" method="post" enctype="multipart/form-data">
            @Html.HiddenFor(e => e.EntryExitEnum);
            <div class="row entry-exit-background p-5 m-6 mt-5">
                <div class="col-6 pr-5  my-3 text-right">
                    <button id="entry" class="no-box-shadow border-0 rounded-pill p-3 @entryClasses text-white" style="width:55%; font-size:4rem;" @isEntryDisabled type="submit" asp-action="ReportHours">@entryDescription</button>
                </div>
                <div class="col-6 pl-5 my-3 text-left">
                    <button id="exit" class="no-box-shadow border-0 rounded-pill p-3 @exitClasses text-white" style="width: 55%; font-size: 4rem;" @isExitDisabled type="submit" asp-action="ReportHours">@exitDescription</button>
                </div>
            </div>
        </form>
        <div class="row mt-5 ">
            <div class="col-6 pr-5  my-3 text-right">
                <button class="no-box-shadow border-0 rounded-pill py-1 px-2 timekeeper-color text-white open-work-from-home-modal" style="width:40%; font-size:2rem;" type="button">Work From Home</button>
            </div>
            <div class="col-6 pl-5 my-3 text-left">
                <button class="no-box-shadow border-0 rounded-pill py-1 px-4 timekeeper-color text-white open-update-hours-modal" style="width: 35%; font-size: 2rem;" type="button">Update Hours</button>
            </div>


        </div>
    </div>

}
<script>
    window.onload = function (e) {
        this.startTime();
    }
function startTime() {
  var today = new Date();
  var h = today.getHours();
  var m = today.getMinutes();
  var s = today.getSeconds();
  m = checkTime(m);
  s = checkTime(s);
  document.getElementById('time').innerHTML =
  h + ":" + m + ":" + s;
  var t = setTimeout(startTime, 500);
}
function checkTime(i) {
  if (i < 10) {i = "0" + i};  // add zero in front of numbers < 10
  return i;
    }

</script>
