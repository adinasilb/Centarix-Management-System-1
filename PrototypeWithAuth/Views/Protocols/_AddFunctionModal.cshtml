@model PrototypeWithAuth.ViewModels.AddFunctionViewModel
@using PrototypeWithAuth.AppData
<script src="~/js/Validation/AddFunctionValidation.js"></script>
<script src="~/js/validate.js"></script>
@{ var filestring = "";
    var containsFile = "";}
@switch (Enum.Parse<AppUtility.ProtocolFunctionTypes>(Model.FunctionLine.FunctionType.DescriptionEnum))
{
    case AppUtility.ProtocolFunctionTypes.AddComment:
    case AppUtility.ProtocolFunctionTypes.AddTip:
    case AppUtility.ProtocolFunctionTypes.AddWarning:
        <textarea class="border form-control-plaintext " rows="6" asp-for="FunctionLine.Description"></textarea>
        break;
    case AppUtility.ProtocolFunctionTypes.AddFile:
<div class="text-center"><div class="d-inline-block" style="max-width:150px"><input type="text" readonly id="@AppUtility.FolderNamesEnum.Files.ToString()Input" name="@AppUtility.FolderNamesEnum.Files.ToString()Input" class="@containsFile" style="pointer-events:none; background:none; border:none;" /></div></div>
        <div class="col text-center">
            @{

                if ((Model.DocumentsInfo.FirstOrDefault()?.FileStrings?.Count ?? 0) != 0)
                {
                    containsFile = "contains-file";
                    filestring = AppUtility.GetLastFiles(Model.DocumentsInfo.FirstOrDefault()?.FileStrings?.FirstOrDefault(), 1);
                }
            }

            <button type="button" class="my-2 protocols-background-color custom-button-font custom-button open-document-modal mark-edditable" data-string="@AppUtility.FolderNamesEnum.Files.ToString()"
                    data-id="@Model.FunctionLine.ID"
                    id="@AppUtility.FolderNamesEnum.Pictures.ToString()" parentFolder="@AppUtility.ParentFolderName.FunctionLine" data-val="@true" show-switch="@false" no-multiple-files="true">
                Select File
            </button>

            <span class="document-name pl-2">@filestring</span>
        </div>
        break;
    case AppUtility.ProtocolFunctionTypes.AddImage:
        {

            if ((Model.DocumentsInfo.FirstOrDefault()?.FileStrings?.Count() ?? 0) != 0)
            {
                filestring = AppUtility.GetLastFiles(Model.DocumentsInfo.FirstOrDefault()?.FileStrings?.FirstOrDefault(), 1);
                containsFile = "contains-file";
            }
        }
<div class="text-center"><div class="d-inline-block" style="max-width:150px"><input type="text" readonly id="@AppUtility.FolderNamesEnum.Pictures.ToString()Input" name="@AppUtility.FolderNamesEnum.Pictures.ToString()Input" class="@containsFile" style="pointer-events:none; background:none; border:none;" /></div></div>
        <div class="col text-center">

            <button type="button" class=" my-2 protocols-background-color custom-button-font custom-button open-document-modal mark-edditable" data-string="@AppUtility.FolderNamesEnum.Pictures.ToString()"
                    data-id="@Model.FunctionLine.ID"
                    id="@AppUtility.FolderNamesEnum.Pictures.ToString()" parentFolder="@AppUtility.ParentFolderName.FunctionLine" data-val="@true" show-switch="@false" no-multiple-files="true">
                Select File
            </button>

            <span class="document-name pl-2">@filestring</span>
        </div>
        break;
    case AppUtility.ProtocolFunctionTypes.AddLinkToProduct:
        <div class="row">
            <div class="col-6">
                <div class="form-group">
                    <label asp-for="FunctionLine.Product.ProductSubcategory.ParentCategory.ParentCategoryDescription" class="control-label"></label>
                    @Html.DropDownListFor(vm => vm.FunctionLine.Product.ProductSubcategory.ParentCategoryID,
                 new SelectList(
                 Model.ParentCategories,
                 "ParentCategoryID",
                 "ParentCategoryDescription"
                 ), "Select Category",
                 new { @class = "mdb-select-sublist mdb-select custom select-dropdown form-control-plaintext parentCategory link-product-dropdown", @searchable = "Select Category", @dataStopRefresh = "true" })
                </div>
            </div>
            <div class="col-6">
                <div class="form-group sublist">
                    <label asp-for="FunctionLine.Product.ProductSubcategory.ProductSubcategoryDescription" class="control-label"></label>
                    @Html.DropDownListFor(vm => vm.FunctionLine.Product.ProductSubcategory.ProductSubcategoryID,
                        new SelectList(
                        Model.ProductSubcategories,
                        dataValueField: "ProductSubcategoryID",
                        dataTextField: "ProductSubcategoryDescription"
                        ), "Select Sub Category",
                        new { @class = "mdb-select-sublist mdb-select custom select-dropdown form-control-plaintext subCategory link-product-dropdown", @searchable = "Select Sub Category", @dataStopRefresh = "true" })
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-6">
                <div class="form-group">
                    <label asp-for="FunctionLine.Product.Vendor" class="control-label"></label>
                    @Html.DropDownListFor(
        vm => vm.FunctionLine.Product.VendorID,
        new SelectList(
        Model.Vendors,
        dataValueField: "VendorID",
        dataTextField: "VendorEnName"),
        //FUTURE: Ask If we should put in the functionality to create a new vendor here rather than just choosing, "Select a Project",
        "Select a Vendor",
        htmlAttributes: new { @class = " vendorList mdb-select custom select-dropdown form-control-plaintext vendor link-product-dropdown", @id = "vendorList", @size = 1, @searchable = "Select A Vendor", @dataStopRefresh = "true" }
        )
                </div>
            </div>
            <div class="col-6">
                <div class="form-group">
                    <label asp-for="FunctionLine.Product.ProductName" class="control-label"></label>
                    @Html.DropDownListFor(
        vm => vm.FunctionLine.ProductID,
        new SelectList(
        Model.Products,
        dataValueField: "ProductID",
        dataTextField: "ProductName"),
        //FUTURE: Ask If we should put in the functionality to create a new vendor here rather than just choosing, "Select a Project",
        "Select a Product",
        htmlAttributes: new { @class = " productList mdb-select custom select-dropdown form-control-plaintext product object mdb-select-sublist", @id = "productList", @size = 1, @searchable = "Select A Product", @dataStopRefresh = "true" }
        )
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-6">
                <label asp-for="FunctionLine.Product.SerialNumber" class="control-label"></label>
                <input class="border-bottom form-control-plaintext unique-number" rows="6" asp-for="FunctionLine.Product.SerialNumber" />
            </div>
        </div>
        break;
    case AppUtility.ProtocolFunctionTypes.AddLinkToProtocol:
        <div class="row">
            <div class="col-6">
                <div class="form-group">
                    <label asp-for="FunctionLine.Protocol.ProtocolSubCategory.ProtocolCategoryType" class="control-label"></label>
                    @Html.DropDownListFor(vm => vm.FunctionLine.Protocol.ProtocolSubCategory.ProtocolCategoryTypeID,
                 new SelectList(
                 Model.ProtocolCategories,
                 dataValueField: "ProtocolCategoryTypeID",
                 dataTextField: "ProtocolCategoryDescription"
                 ), "Select Category",
                 new { @class = "mdb-select-sublist mdb-select custom select-dropdown form-control-plaintext protocolParentCategory link-protocol-dropdown", @id = "protocol-categories", @searchable = "Select Category", @dataStopRefresh = "true" })
                </div>
            </div>
            <div class="col-6">
                <div class="form-group sublist">
                    <label asp-for="FunctionLine.Protocol.ProtocolSubCategory" class="control-label"></label>
                    @Html.DropDownListFor(vm => vm.FunctionLine.Protocol.ProtocolSubCategoryID,
                        new SelectList(
                        Model.ProtocolSubCategories,
                        dataValueField: "ProtocolSubCategoryTypeID",
                        dataTextField: "ProtocolSubCategoryTypeDescription"
                        ), "Select Sub Category",
                        new { @class = "mdb-select-sublist mdb-select custom select-dropdown form-control-plaintext protocolSubCategory link-protocol-dropdown", @id = "protocol-subCategory", @searchable = "Select Sub Category", @dataStopRefresh = "true" })
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-6">
                <div class="form-group">
                    <label asp-for="FunctionLine.Protocol.ApplicationUserCreator" class="control-label"></label>
                    @Html.DropDownListFor(
        vm => vm.FunctionLine.Protocol.ApplicationUserCreatorID,
       Model.Creators,
        //FUTURE: Ask If we should put in the functionality to create a new vendor here rather than just choosing, "Select a Project",
        "Select a Creator",
        htmlAttributes: new { @class = " vendorList mdb-select custom select-dropdown form-control-plaintext  creator link-protocol-dropdown", @id = "creatorsList", @size = 1, @searchable = "Select A Creator", @dataStopRefresh = "true" }
        )
                </div>
            </div>
            <div class="col-6">
                <div class="form-group">
                    <label asp-for="FunctionLine.Protocol" class="control-label"></label>
                    @Html.DropDownListFor(
        vm => vm.FunctionLine.ProtocolID,
        new SelectList(
        Model.Protocols,
        dataValueField: "ProtocolID",
        dataTextField: "Name"),
        //FUTURE: Ask If we should put in the functionality to create a new vendor here rather than just choosing, "Select a Project",
        "Select a Protocol",
        htmlAttributes: new { @class = "  mdb-select custom select-dropdown form-control-plaintext protocol object mdb-select-sublist", @id = "protocolList", @size = 1, @searchable = "Select A Protocol", @dataStopRefresh = "true" }
        )
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-6">
                <label asp-for="FunctionLine.Protocol.UniqueCode" class="control-label"></label>
                <input class="border-bottom form-control-plaintext unique-number " rows="6" asp-for="FunctionLine.Protocol.UniqueCode" />
            </div>
        </div>
        break;
    case AppUtility.ProtocolFunctionTypes.AddStop:
        break;
    case AppUtility.ProtocolFunctionTypes.AddTimer:
        <div class="row">
            <div class="col-4 offset-4">
                <input class="border-bottom form-control-plaintext heading-1 " rows="6" asp-for="FunctionLine.Timer" />
            </div>
        </div>
        break;

}

<script src="~/js/AddFunctionModal.js"></script>