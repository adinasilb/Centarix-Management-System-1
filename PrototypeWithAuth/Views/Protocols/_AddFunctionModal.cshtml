@model PrototypeWithAuth.ViewModels.AddFunctionViewModel<FunctionBase>
@using PrototypeWithAuth.AppData
<script src="~/js/Validation/AddFunctionValidation.js"></script>
<script src="~/js/validate.js"></script>
@{ var filestring = "";
    var containsFile = "";
    var fileButtonText = "Select File";
    var documentsDisabled = true;
    var disabled = "";
    if ((Model.ModalType == AppUtility.ProtocolModalType.CheckListMode
        || Model.ModalType == AppUtility.ProtocolModalType.Summary) && Model.Function.ID != 0)
    {
        documentsDisabled = false;
        disabled = " mark-readonly ";
    }
}
@switch (Enum.Parse<AppUtility.FunctionTypes>(Model.Function.FunctionType.DescriptionEnum))
{
    case AppUtility.FunctionTypes.AddComment:
    case AppUtility.FunctionTypes.AddTip:
    case AppUtility.FunctionTypes.AddWarning:
        <textarea class="border form-control-plaintext @disabled " rows="6" asp-for="Function.Description"></textarea>
        break;
    case AppUtility.FunctionTypes.AddFile:
    case AppUtility.FunctionTypes.AddImage:
        <div class="_DocumentsModalData">
            @{
                await Html.RenderPartialAsync("_DocumentsModalData", Model.DocumentsModalViewModel);
            }
        </div>
        break;
    case AppUtility.FunctionTypes.AddLinkToProduct:
        if (Model.Function.ID > 0)
        {
            disabled = " mark-readonly ";
        }

        <div class="row">
            <div class="col-6">
                <div class="form-group">
                    <label asp-for="Function.Product.ProductSubcategory.ParentCategory.ParentCategoryDescription" class="control-label"></label>
                    @Html.DropDownListFor(vm => vm.Function.Product.ProductSubcategory.ParentCategoryID,
                 new SelectList(
                 Model.ParentCategories,
                 "ParentCategoryID",
                 "ParentCategoryDescription"
                 ), "Select Category",
                 new { @class = "mdb-select-sublist mdb-select custom select-dropdown form-control-plaintext parentCategory link-product-dropdown" + disabled, @searchable = "Select Category", @data_stop_refresh = "true" })
                </div>
            </div>
            <div class="col-6">
                <div class="form-group sublist">
                    <label asp-for="Function.Product.ProductSubcategory.ProductSubcategoryDescription" class="control-label"></label>
                    @Html.DropDownListFor(vm => vm.Function.Product.ProductSubcategory.ProductSubcategoryID,
                        new SelectList(
                        Model.ProductSubcategories,
                        dataValueField: "ProductSubcategoryID",
                        dataTextField: "ProductSubcategoryDescription"
                        ), "Select Sub Category",
                        new { @class = "mdb-select-sublist mdb-select custom select-dropdown form-control-plaintext subCategory link-product-dropdown" + disabled, @searchable = "Select Sub Category", @data_stop_refresh = "true" })
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-6">
                <div class="form-group">
                    <label asp-for="Function.Product.Vendor" class="control-label"></label>
                    @Html.DropDownListFor(
        vm => vm.Function.Product.VendorID,
        new SelectList(
        Model.Vendors,
        dataValueField: "VendorID",
        dataTextField: "VendorEnName"),
        //FUTURE: Ask If we should put in the functionality to create a new vendor here rather than just choosing, "Select a Project",
        "Select Vendor",
        htmlAttributes: new { @class = " vendorList mdb-select custom select-dropdown form-control-plaintext vendor link-product-dropdown" + disabled, @id = "vendorList", @size = 1, @searchable = "Select Vendor", @data_stop_refresh = "true" }
        )
                </div>
            </div>
            <div class="col-6">
                <div class="form-group">
                    <label asp-for="Function.Product.ProductName" class="control-label"></label>
                    @Html.DropDownListFor(
        vm => vm.Function.ProductID,
        new SelectList(
        Model.Products,
        dataValueField: "ProductID",
        dataTextField: "ProductName"),
        //FUTURE: Ask If we should put in the functionality to create a new vendor here rather than just choosing, "Select a Project",
        "Select Product",
        htmlAttributes: new { @class = " productList mdb-select custom select-dropdown form-control-plaintext product object mdb-select-sublist" + disabled, @id = "productList", @size = 1, @searchable = "Select Product", @data_stop_refresh = "true" }
        )
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-6">
                <label asp-for="Function.Product.SerialNumber" class="control-label"></label>

                <input class="border-bottom form-control-plaintext unique-number @disabled" rows="6" asp-for="Function.Product.SerialNumber" />
            </div>
        </div>
        break;
    case AppUtility.FunctionTypes.AddLinkToProtocol:
        if (Model.Function.ID > 0)
        {
            disabled = " mark-readonly ";
        }
        <div class="row">
            <div class="col-6">
                <div class="form-group">
                    <label asp-for="Function.ProtocolVersion.Protocol.ProtocolSubCategory.ProtocolCategoryType" class="control-label"></label>
                    @Html.DropDownListFor(vm => vm.Function.ProtocolVersion.Protocol.ProtocolSubCategory.ProtocolCategoryTypeID,
                 new SelectList(
                 Model.ProtocolCategories,
                 dataValueField: "ProtocolCategoryTypeID",
                 dataTextField: "ProtocolCategoryDescription"
                 ), "Select Category",
                 new { @class = "mdb-select-sublist mdb-select custom select-dropdown form-control-plaintext protocolParentCategory link-protocol-dropdown" + disabled, @id = "protocol-categories", @searchable = "Select Category", @data_stop_refresh = "true" })
                </div>
            </div>
            <div class="col-6">
                <div class="form-group sublist">
                    <label asp-for="Function.ProtocolVersion.Protocol.ProtocolSubCategory" class="control-label"></label>
                    @Html.DropDownListFor(vm => vm.Function.ProtocolVersion.Protocol.ProtocolSubCategoryID,
                        new SelectList(
                        Model.ProtocolSubCategories,
                        dataValueField: "ProtocolSubCategoryTypeID",
                        dataTextField: "ProtocolSubCategoryTypeDescription"
                        ), "Select Sub Category",
                        new { @class = "mdb-select-sublist mdb-select custom select-dropdown form-control-plaintext protocolSubCategory link-protocol-dropdown" + disabled, @id = "protocol-subCategory", @searchable = "Select Sub Category", @data_stop_refresh = "true" })
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-6">
                <div class="form-group">
                    <label asp-for="Function.ProtocolVersion.ApplicationUserCreator" class="control-label"></label>
                    @Html.DropDownListFor(
        vm => vm.Function.ProtocolVersion.ApplicationUserCreatorID,
       Model.Creators,
        //FUTURE: Ask If we should put in the functionality to create a new vendor here rather than just choosing, "Select a Project",
        "Select a Creator",
        htmlAttributes: new { @class = " vendorList mdb-select custom select-dropdown form-control-plaintext  creator link-protocol-dropdown" + disabled, @id = "creatorsList", @size = 1, @searchable = "Select A Creator", @data_stop_refresh = "true" }
        )
                </div>
            </div>
            <div class="col-6">
                <div class="form-group">
                    <label asp-for="Function.ProtocolVersionID" class="control-label"></label>
                    @Html.DropDownListFor(
        vm => vm.Function.ProtocolVersionID,
        new SelectList(
        Model.ProtocolVersions,
        dataValueField: "ProtocolVersionID",
        dataTextField: "Name"),
        "Select a Protocol",
        htmlAttributes: new { @class = "  mdb-select custom select-dropdown form-control-plaintext protocol object mdb-select-sublist" + disabled, @id = "protocolList", @size = 1, @searchable = "Select A Protocol", @data_stop_refresh = "true" }
        )
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-6">
                <label asp-for="Function.ProtocolVersion.Protocol.UniqueCode" class="control-label"></label>
                <input class="border-bottom form-control-plaintext unique-number @disabled" name="uniqueCode" id="uniqueCode" value="@(Model.Function.ProtocolVersion?.Protocol?.UniqueCode+"V"+Model.Function.ProtocolVersion?.VersionNumber)" />
            </div>
        </div>
        break;
    case AppUtility.FunctionTypes.AddStop:
        break;
    case AppUtility.FunctionTypes.AddTimer:
        <div class="row">
            <div class="col-4 offset-4">
                <input class="border-bottom form-control-plaintext heading-1 @disabled timer"
                   seconds="@Model.Function.Timer.TotalSeconds" asp-for="Function.Timer" />
            </div>
        </div>
        break;

}
@if (Model.Function.FunctionType.DescriptionEnum == AppUtility.FunctionTypes.AddTimer.ToString() && Model.ModalType == AppUtility.ProtocolModalType.CheckListMode)
{
    <script>

        $(document).ready( function () {

            var durations = $(".timer").attr("seconds");
                display = $('.timer').val();
            startTimer(durations, display);
        });
        function startTimer(duration, display) {
            var timer = duration, hours, minutes, seconds;
            var timeout = setInterval(function () {
                seconds = parseInt(timer % 60, 10);
                minutes = parseInt((timer / 60) % 60, 10);
                hours = parseInt((timer / 60) / 60, 10);

                hours = hours < 10 ? "0" + hours : hours;
                minutes = minutes < 10 ? "0" + minutes : minutes;
                seconds = seconds < 10 ? "0" + seconds : seconds;

                $('.timer').val(hours + ":" + minutes + ":" + seconds);
                if (--timer < 0) {
                   clearInterval(timeout);
                }
            }, 1000);
        }

    </script>
}

<script src="~/js/AddFunctionModal.js"></script>