@model PrototypeWithAuth.ViewModels.CreateProtocolsViewModel
@using PrototypeWithAuth.ViewModels
@using PrototypeWithAuth.AppData
@{
    string theory = "";
    string material = "";
    string protocols = "";
    string results = "";
    switch (Model.Tab)
    {
        case 1:
            theory = " active show ";
            break;
        case 2:
            material = " active show ";
            break;
        case 3:
            protocols = " active show ";
            break;
        case 4:
            results = " active show ";
            break;

    }

    var theoryContainerStyle = "width:50%";
    if (Model.ModalType == AppUtility.ProtocolModalType.SummaryFloat)
    {
        theoryContainerStyle = "";
    }


}
<div id="Theory@(Model.ModalType)" class="tab-pane fade in @theory">
    <div class="container-fluid theory-container m-0" style="@theoryContainerStyle">
        <input type="hidden" class="createProtocolMasterProtocolID" value="@Model.ProtocolVersion.Protocol.ProtocolID" />
        <input type="hidden" class="createProtocolMasterProtocolVersionID" value="@Model.ProtocolVersion.ProtocolVersionID" />
        <input type="hidden" class="createProtocolMasterGuid hidden-guid" value="@Model.UniqueGuid" />
        <input type="hidden" asp-for="Tab" class="selectedTab" />
        <input type="hidden" asp-for="UniqueGuid" />
        <input type="hidden" asp-for="ProtocolVersion.Protocol.ProtocolID" value="@Model.ProtocolVersion.Protocol.ProtocolID" />
        <input type="hidden" asp-for="ProtocolVersion.ProtocolID" value="@Model.ProtocolVersion.ProtocolID" />
        <input type="hidden" asp-for="ModalType" class="modalType" />
        <input type="hidden" asp-for="ProtocolVersion.CreationDate" />
        <input type="hidden" asp-for="ProtocolVersion.ApplicationUserCreatorID" />
        <input type="hidden" asp-for="ProtocolInstance.ProtocolInstanceID" class="protocolInstanceID" />
        <input type="hidden" asp-for="ProtocolVersion.VersionNumber" class="" />
        <input type="hidden" asp-for="ProtocolVersion.Protocol.UniqueCode" class="" />
        <input type="hidden" asp-for="ProtocolVersion.ProtocolVersionID" class="" value="@Model.ProtocolVersion.ProtocolVersionID" />
        <div class="row under-row-margin">
            <div class="col-4">
                <label asp-for="ProtocolVersion.Protocol.Name" class="control-label"></label>
                <input asp-for="ProtocolVersion.Protocol.Name" class="form-control-plaintext border-bottom mark-readonly" />
                <span asp-validation-for="ProtocolVersion.Protocol.Name" class="text-danger-centarix"></span>
            </div>
            <div class="col-4">
                <label class="control-label">Unique Code</label>
                <input value="@(Model.ProtocolVersion.Protocol.UniqueCode+"V"+Model.ProtocolVersion.VersionNumber)" class="form-control-plaintext border-bottom" readonly />
            </div>

        </div>

        <div class="row under-row-margin">
            <div class="col-4">
                <label class="control-label">Category</label>
                @Html.DropDownListFor(vm => vm.ProtocolVersion.Protocol.ProtocolSubCategory.ProtocolCategoryTypeID,
new SelectList(
Model.ProtocolCategories,
"ProtocolCategoryTypeID",
"ProtocolCategoryDescription"
), "Select Category",
new { @class = "mdb-select-sublist mdb-select custom select-dropdown form-control-plaintext mark-readonly", @id = "protocolParentList", @searchable = "Select Category" })
            </div>
            <div class="col-4">
                <label class="control-label">Sub Category</label>
                @Html.DropDownListFor(vm => vm.ProtocolVersion.Protocol.ProtocolSubCategoryID,
new SelectList(
Model.ProtocolSubCategories,
"ProtocolSubCategoryTypeID",
"ProtocolSubCategoryTypeDescription"
), "Select Category",
new { @class = "mdb-select-sublist mdb-select custom select-dropdown form-control-plaintext mark-readonly", @id = "protocolSubList", @searchable = "Select Category" })
            </div>
            @*<div class="col-4">
                <label asp-for="Tags" class="control-label"></label>
                <input asp-for="Tags" class="form-control-plaintext border-bottom" />
                <span asp-validation-for="Tags" class="text-danger-centarix"></span>
            </div>*@
        </div>
        <div class="row ">
            <div class="col-12">
                <label asp-for="ProtocolVersion.ShortDescription" class="control-label"></label>
                <input asp-for="ProtocolVersion.ShortDescription" class="form-control-plaintext border-bottom mark-readonly" />
                <span asp-validation-for="ProtocolVersion.ShortDescription" class="text-danger-centarix"></span>
            </div>
        </div>
        <div class="row ">
            <div class="col-12">
                <label asp-for="ProtocolVersion.Theory" class="control-label"></label>
                <textarea asp-for="ProtocolVersion.Theory" class="form-control-plaintext border-bottom border mark-readonly" rows="15"></textarea>
                <span asp-validation-for="ProtocolVersion.Theory" class="text-danger-centarix"></span>
            </div>
        </div>
        <div class="row mt-6">
            <div class="col-6 heading-1">
                Add Document
            </div>
            <div class="col-6 heading-1">
                Add Links

            </div>
        </div>
        @{
            var urlAction = Url.Action("DocumentsModal", "Protocols");
            var fontSize = "2rem";
        }
        <input type="submit" style="display:none;" id="documentSubmit" url="@urlAction" class="documentSubmit" />
        <div class="row">
            <div class="col-6">
                <div class="row ">

                    @{
                        var hasFileClass = "";
                        var color = "protocols-filter";

                    }

                    @foreach (var folder in Model.DocumentsInfo)
                    {

                        <div class="document-margin ">
                            @{
                                var filterClass = "opac87";
                                if (folder.FileStrings != null && folder.FileStrings.Count > 0)
                                {
                                    hasFileClass = "hasFile";
                                    filterClass = color;
                                }
                            }
                            <a href="" class="open-document-modal mark-edditable" data-string="@folder.FolderName.ToString()" data-id="@Model.ProtocolVersion.ProtocolVersionID" id="@folder.FolderName.ToString()" data-val="@true" showSwitch="@false">
                                <div class="card document-border ">
                                    <div class="document-card text-center">
                                        <i class="@folder.Icon @filterClass document-icon" alt="order" style="font-size:@fontSize"></i>
                                    </div>

                                </div>
                            </a>
                            <label class="control-label text-center text document-text-margin" style="width:100%;">@folder.FolderName</label>
                        </div>
                    }
                </div>
            </div>
            <div class="col-6 ">
                <div class="container ">

                    @for (int i = 0; i < Model.ProtocolVersion.Urls.Count(); i++)
                    {
                        <input type="hidden" asp-for="ProtocolVersion.Urls[i].LinkID" />
                        <div class="row">
                            <div class="col-6">
                                <label asp-for="ProtocolVersion.Urls[i].LinkDescription" class="control-label">Link Description</label>
                                <input asp-for="ProtocolVersion.Urls[i].LinkDescription" class="form-control-plaintext border-bottom mark-readonly" />
                                <span asp-validation-for="ProtocolVersion.Urls[i].LinkDescription" class="text-danger-centarix"></span>
                            </div>
                            <div class="col-6">
                                <label asp-for="ProtocolVersion.Urls[i].Url" class="control-label"></label>
                                <input asp-for="ProtocolVersion.Urls[i].Url" class="form-control-plaintext border-bottom mark-readonly" />
                                <span asp-validation-for="ProtocolVersion.Urls[i].Url" class="text-danger-centarix"></span>
                            </div>
                        </div>
                    }
                </div>



            </div>
        </div>


    </div>
</div>

<div id="Materials@(Model.ModalType)" class="_MaterialTab tab-pane fade in @material">
    @{ await Html.RenderPartialAsync("_MaterialTab", new MaterialTabViewModel { Materials = Model.ProtocolVersion.Materials.ToList(), MaterialCategories = Model.MaterialCategories, Folders = Model.MaterialDocuments, ModalType = Model.ModalType });
    }
</div>


<div id="Protocol@(Model.ModalType)" class="tab-pane fade in @protocols">

    <div class="lines">
        <div class="heading-1">@Model.ProtocolVersion.Protocol.Name</div>
        <div class="_Lines">
            @{await Html.RenderPartialAsync("_Lines",  Model.Lines );}
        </div>


    </div>
</div>
<div id="Results@(Model.ModalType)" class="tab-pane fade in @AppUtility.ProtocolModalType.CheckListMode @results d-none">
    <div class="row text-editor-div" style="min-height:50px; width:100%">
       
        @{
            if(Model.ProtocolInstance !=null)
            {
                await Html.RenderPartialAsync("_ResultsText", Model.ProtocolInstance);
            }

        }
    </div>
</div>
<script src="~/js/Validation/CreateProtocolValidation.js"></script>
<script src="~/js/validate.js"></script>



<script src="~/js/function.js"></script>

<script src="~/js/CreateProtocol.js"></script>