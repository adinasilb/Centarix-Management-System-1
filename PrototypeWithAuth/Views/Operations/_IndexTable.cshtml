@model RequestIndexViewModel

@using PrototypeWithAuth.AppData;
@using PrototypeWithAuth.ViewModels;

@using PrototypeWithAuth.Data;
@using Microsoft.AspNetCore.Identity
@using X.PagedList.Mvc.Core @* import this so we get our HTML Helper *@
@using System.Globalization
@inject SignInManager<ApplicationUser> SignInManager

@{//saving the info in a bool so I don't need to retest it against the enum anytime i want to see it in the page
    bool Request = false;
    bool Inventory = false;
    bool Summary = false;

    if (Model.PageType.Equals(AppUtility.RequestPageTypeEnum.Request))
    {
        Request = true;
    }
    else if (Model.PageType.Equals(AppUtility.RequestPageTypeEnum.Inventory))
    {
        Inventory = true;
    }
    else if (Model.PageType.Equals(AppUtility.RequestPageTypeEnum.Summary))
    {
        Summary = true;
    }
    TempData.Keep();

}

<table class="table table-headerspaced table-noheaderlines table-hover ">
    <tbody>
        @for (int itemNum = 0; itemNum < Model.PagedList.Count; itemNum++)
        {
            <tr class="text-center ">
                <td width="7%">
                    <div class="form-check oper-form">
                        <input type="checkbox" class="form-check-input filled-in" id="@Model.PagedList[itemNum].RequestID">
                        <label class="form-check-label" for="@Model.PagedList[itemNum].RequestID">@Model.PagedList[itemNum].RequestID</label>
                    </div>
                </td>
                <td width="7%">
                    @if (Model.PagedList[itemNum].Product.ProductSubcategory.ImageURL != null)
                    {
                        var imageurl = Model.PagedList[itemNum].Product.ProductSubcategory.ImageURL;
                        <img src="@imageurl" alt="Image" width="75" class="category-image" />
                    }
                    else
                    {
                        <img src="~/images/css/accounting/sample_image.png" alt="Image" width="75" class="category-image" />
                    }
                </td>
                @if (Summary)
                {
                    <td width="15%"> <button class="btn inv-link-clr oper-link-clr load-product-details-summary no-box-shadow" title="Details" value="@@Model.PagedList[itemNum].RequestID" data-target="item" href="item">@Html.DisplayFor(modelItem => Model.PagedList[itemNum].Product.ProductName) </button></td>
                }
                else
                {
                    <td width="15%"> <button class="btn inv-link-clr oper-link-clr load-product-details operations no-box-shadow" title="Details" value="@Model.PagedList[itemNum].RequestID" data-target="item" href="item">@Html.DisplayFor(modelItem => Model.PagedList[itemNum].Product.ProductName) </button></td>
                }


                <td width="7%"> @Html.DisplayFor(modelItem => Model.PagedList[itemNum].Product.Vendor.VendorEnName) </td>

                <td width="12%" class="p-0">
                    @*@Html.DisplayFor(modelItem => item.Cost)*@
                    @{
                        var item = Model.PagedList[itemNum];
                        var currency = "he-IL";
                        var pricePerUnit = item.PricePerUnit;
                        var cost = item.Cost;
                        var total = item.TotalWithVat;
                        var vat = item.VAT;
                        var exchangeRate = item.ExchangeRate == 0 ? AppUtility.ExchangeRateIfNull : item.ExchangeRate;
                        if (Model.currency == AppUtility.CurrencyEnum.USD)
                        {
                            currency = "en-US";
                            pricePerUnit = item.PricePerUnit / exchangeRate;
                            cost = item.Cost / exchangeRate;
                            total = item.TotalWithVat / exchangeRate;
                            vat = item.VAT / exchangeRate;
                        }
                    }

                    @if (Model.PriceSortEnumsList != null)
                    {
                        for (int i = 0; i < Model.PriceSortEnumsList.Count; i++)
                        {
                            switch (Enum.Parse(typeof(AppUtility.PriceSortEnum), Model.PriceSortEnumsList[i]))
                            {
                                case AppUtility.PriceSortEnum.Unit:
                                    <label class="m-0">U: @string.Format(new CultureInfo(currency), "{0:c}", pricePerUnit)</label>
                                    break;
                                case AppUtility.PriceSortEnum.Total:
                                    <label class="m-0">T:  @string.Format(new CultureInfo(currency), "{0:c}", cost)</label>
                                    break;
                                case AppUtility.PriceSortEnum.Vat:
                                    <label class="m-0">V:  @string.Format(new CultureInfo(currency), "{0:c}", vat)</label>
                                    break;
                                case AppUtility.PriceSortEnum.TotalVat:
                                    <label class="m-0"> P:   @string.Format(new CultureInfo(currency), "{0:c}", total)</label>
                                    break;
                            }
                            <br />
                        }
                    }
                    else
                    {
                        <label>T: @item.Cost.ToString("C02")</label>
                    }
                </td>
                @if (Inventory)
                {

                    <td>
                        @if (Model.PagedList[itemNum].RequestLocationInstances != null)
                        {
                            @Html.DisplayFor(modelItem => Model.PagedList[itemNum].RequestLocationInstances.FirstOrDefault().LocationInstance.LocationInstanceName)
                        }
                    </td>
                }
                <td width="10%"> @Html.DisplayFor(modelItem => Model.PagedList[itemNum].Product.ProductSubcategory.ProductSubcategoryDescription) </td>
                @if (!Summary)
                {
                    <td  width="10%"> @Html.DisplayFor(modelItem => Model.PagedList[itemNum].ApplicationUserCreator.FirstName) @Html.DisplayFor(modelItem => Model.PagedList[itemNum].ApplicationUserCreator.LastName) </td>
                }
                @{
                    if (Model.PagedList[itemNum].RequestStatusID == 2 || Summary)
                    {
                        <td width="9%">@Html.DisplayFor(m => item.ParentRequest.OrderDate)</td>
                    }
                    else if (Model.PagedList[itemNum].RequestStatusID == 3)
                    {
                        <td width="9%">@Html.DisplayFor(m => item.ArrivalDate)</td>
                    }
                    else
                    {
                        <td width="9%">@Html.DisplayFor(m => item.CreationDate)</td>
                    }
                }
                <td style="width:9%">
                    <div class="d-inline-flex">
                        <div class="table-icon-div">


                            @if (item.RequestStatusID == 1)
                            {
                                //this is a nested if b/c if user can't approve then i still don't want it to go the the else
                                if (SignInManager.IsSignedIn(User) & (User.IsInRole("Admin")))
                                {
                                    if (item is Reorder)
                                    {
                                        <a class="btn p-0 m-0 no-box-shadow"  data-toggle="tooltip" data-placement="top"
  title="Approve" href="@Url.Action("ApproveReorder",  "Requests", new { id = item.RequestID })">
                                            <i style="font-size:2rem; color:#00CA72;" class="icon-centarix-icons-03 hover-bold"></i>
                                        </a>
                                    }
                                    else
                                    {
                                        @*@Html.ActionLink("Approve", "ConfirmEmailModal", new { id = item.RequestID, IsBeingApproved = true }, new { @class = "btn btn-link" });*@

                                        <a class="btn p-0 m-0  no-box-shadow" data-title="Approve" data-toggle="tooltip" data-placement="top"
  title="Approve" href="@Url.Action("Approve", "Requests", new { id = item.RequestID })">
                                            <i style="font-size:2rem; color:#00CA72;" class="icon-centarix-icons-03 hover-bold"></i>
                                        </a>
                                    }

                                }
                            }

                            else if (item.RequestStatusID == 2)
                            {
                                <button class="btn p-0 m-0  load-receive-and-location no-box-shadow operations" data-toggle="tooltip" data-placement="top"
  title="Recieve" value="@item.RequestID"><i style="font-size:2rem; color:#00CA72;" class="icon-done-24px hover-bold "></i></button> // receive
                            }
                            else if (item.RequestStatusID == 6)
                            {
                                <a class="btn p-0 m-0 no-box-shadow" data-toggle="tooltip" data-placement="top"
  title="Order" href="@Url.Action("Order", "Operations", new { id = item.RequestID })">
                                    <i style="font-size:2rem; color:#00CA72;" class="icon-add_circle_outline-24px1 hover-bold"></i>
                                </a>
                            }

                        </div>

                        <div class="table-icon-div">
                            <button class="btn p-0 m-0 load-confirm-delete no-box-shadow " data-toggle="tooltip" data-placement="top"
  title="Delete" value="@item.RequestID" name="@AppUtility.MenuItems.Operations"><i style="font-size:2rem;" class="icon-delete-24px hover-bold"></i></button>
                        </div>
                    </div>
                </td>
            </tr>
        }
    </tbody>
</table>
