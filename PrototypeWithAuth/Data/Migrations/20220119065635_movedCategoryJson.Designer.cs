// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PrototypeWithAuth.Data;

namespace PrototypeWithAuth.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220119065635_movedCategoryJson")]
    partial class movedCategoryJson
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("Relational:Sequence:dbo.SerialNumberHelper", "'SerialNumberHelper', 'dbo', '1', '1', '', '', 'Int32', 'False'")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("PrototypeWithAuth.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateLastReadNotifications")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSuspended")
                        .HasColumnType("bit");

                    b.Property<decimal>("LabMonthlyLimit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("LabOrderLimit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("LabUnitLimit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("NeedsToResetPassword")
                        .HasColumnType("bit");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<decimal>("OperationMonthlyLimit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("OperationOrderLimit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("OperationUnitLimit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("RememberTwoFactor")
                        .HasColumnType("bit");

                    b.Property<string>("SecureAppPass")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<int>("UserNum")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("UserNum")
                        .IsUnique();

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("ApplicationUser");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.Advisor", b =>
                {
                    b.Property<int>("AdvisorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EmployeeID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AdvisorID");

                    b.HasIndex("EmployeeID")
                        .IsUnique()
                        .HasFilter("[EmployeeID] IS NOT NULL");

                    b.ToTable("Advisors");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.Author", b =>
                {
                    b.Property<int>("AuthorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AuthorID");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.AuthorProtocol", b =>
                {
                    b.Property<int>("AuthorID")
                        .HasColumnType("int");

                    b.Property<int>("ProtocolID")
                        .HasColumnType("int");

                    b.HasKey("AuthorID", "ProtocolID");

                    b.HasIndex("ProtocolID");

                    b.ToTable("AuthorProtocols");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.Calibration", b =>
                {
                    b.Property<int>("CalibrationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CalibrationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CalibrationTypeID")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Days")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Done")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRepeat")
                        .HasColumnType("bit");

                    b.Property<int>("Months")
                        .HasColumnType("int");

                    b.Property<int>("RequestID")
                        .HasColumnType("int");

                    b.HasKey("CalibrationID");

                    b.HasIndex("CalibrationTypeID");

                    b.HasIndex("RequestID");

                    b.ToTable("Calibrations");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Calibration");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.CalibrationType", b =>
                {
                    b.Property<int>("CalibrationTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CalibrationTypeID");

                    b.ToTable("CalibrationTypes");

                    b.HasData(
                        new
                        {
                            CalibrationTypeID = 1,
                            Description = "Repair",
                            Icon = "icon-build-24px"
                        },
                        new
                        {
                            CalibrationTypeID = 2,
                            Description = "External Calibration",
                            Icon = "icon-miscellaneous_services-24px-1"
                        },
                        new
                        {
                            CalibrationTypeID = 3,
                            Description = "In House Maintainance",
                            Icon = "icon-inhouse-maintainance-24px"
                        });
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.CategoryType", b =>
                {
                    b.Property<int>("CategoryTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryTypeDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryTypeID");

                    b.ToTable("CategoryTypes");

                    b.HasData(
                        new
                        {
                            CategoryTypeID = 1,
                            CategoryTypeDescription = "Lab"
                        },
                        new
                        {
                            CategoryTypeID = 2,
                            CategoryTypeDescription = "Operational"
                        });
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.CentarixID", b =>
                {
                    b.Property<int>("CentarixIDID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CentarixIDNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("EmployeeStatusID")
                        .HasColumnType("int");

                    b.Property<bool>("IsCurrent")
                        .HasColumnType("bit");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.HasKey("CentarixIDID");

                    b.HasIndex("EmployeeID");

                    b.HasIndex("EmployeeStatusID");

                    b.ToTable("CentarixIDs");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.Citizenship", b =>
                {
                    b.Property<int>("CitizenshipID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CitizenshipID");

                    b.ToTable("Citizenships");

                    b.HasData(
                        new
                        {
                            CitizenshipID = 1,
                            Description = "Israel"
                        },
                        new
                        {
                            CitizenshipID = 2,
                            Description = "USA"
                        });
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.CommentType", b =>
                {
                    b.Property<int>("TypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionEnum")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IconActionClass")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TypeID");

                    b.ToTable("CommentTypes");

                    b.HasData(
                        new
                        {
                            TypeID = 1,
                            Color = "#30BCC9",
                            Description = "Comment",
                            DescriptionEnum = "Comment",
                            Icon = "icon-comment-24px"
                        },
                        new
                        {
                            TypeID = 2,
                            Color = " var(--danger-color)",
                            Description = "Warning",
                            DescriptionEnum = "Warning",
                            Icon = "icon-report_problem-24px"
                        });
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.CompanyAccount", b =>
                {
                    b.Property<int>("CompanyAccountID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CompanyBankName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CompanyAccountID");

                    b.ToTable("CompanyAccounts");

                    b.HasData(
                        new
                        {
                            CompanyAccountID = 1,
                            CompanyBankName = "Discount"
                        },
                        new
                        {
                            CompanyAccountID = 2,
                            CompanyBankName = "Mercantile"
                        },
                        new
                        {
                            CompanyAccountID = 3,
                            CompanyBankName = "Leumi"
                        },
                        new
                        {
                            CompanyAccountID = 4,
                            CompanyBankName = "Payoneer"
                        },
                        new
                        {
                            CompanyAccountID = 5,
                            CompanyBankName = "Quartzy Bank"
                        });
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.CompanyDayOff", b =>
                {
                    b.Property<int>("CompanyDayOffID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompanyDayOffTypeID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.HasKey("CompanyDayOffID");

                    b.HasIndex("CompanyDayOffTypeID");

                    b.ToTable("CompanyDayOffs");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.CompanyDayOffType", b =>
                {
                    b.Property<int>("CompanyDayOffTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CompanyDayOffTypeID");

                    b.ToTable("CompanyDayOffTypes");

                    b.HasData(
                        new
                        {
                            CompanyDayOffTypeID = 1,
                            Name = "Purim 1"
                        },
                        new
                        {
                            CompanyDayOffTypeID = 2,
                            Name = "Purim 2"
                        },
                        new
                        {
                            CompanyDayOffTypeID = 3,
                            Name = "Erev Pesach"
                        },
                        new
                        {
                            CompanyDayOffTypeID = 4,
                            Name = "Pesach"
                        },
                        new
                        {
                            CompanyDayOffTypeID = 5,
                            Name = "Erev Shviei Pesach"
                        },
                        new
                        {
                            CompanyDayOffTypeID = 6,
                            Name = "Shviei Pesach"
                        },
                        new
                        {
                            CompanyDayOffTypeID = 7,
                            Name = "Yom Hazmaut"
                        },
                        new
                        {
                            CompanyDayOffTypeID = 8,
                            Name = "Erev Shavuous"
                        },
                        new
                        {
                            CompanyDayOffTypeID = 9,
                            Name = "Shavuous"
                        },
                        new
                        {
                            CompanyDayOffTypeID = 10,
                            Name = "Erev Rosh Hashana"
                        },
                        new
                        {
                            CompanyDayOffTypeID = 11,
                            Name = "Rosh Hashana 1"
                        },
                        new
                        {
                            CompanyDayOffTypeID = 12,
                            Name = "Rosh Hashana 2"
                        },
                        new
                        {
                            CompanyDayOffTypeID = 13,
                            Name = "Erev Yom Kippur"
                        },
                        new
                        {
                            CompanyDayOffTypeID = 14,
                            Name = "Yom Kippur"
                        },
                        new
                        {
                            CompanyDayOffTypeID = 15,
                            Name = "Erev Sukkot"
                        },
                        new
                        {
                            CompanyDayOffTypeID = 16,
                            Name = "Sukkot"
                        },
                        new
                        {
                            CompanyDayOffTypeID = 17,
                            Name = "Erev Simchat Torah"
                        },
                        new
                        {
                            CompanyDayOffTypeID = 18,
                            Name = "Simchat Torah"
                        });
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.Country", b =>
                {
                    b.Property<int>("CountryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CountryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CurrencyID")
                        .HasColumnType("int");

                    b.HasKey("CountryID");

                    b.HasIndex("CurrencyID");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            CountryID = 1,
                            CountryName = "Armenia",
                            CurrencyID = -1
                        },
                        new
                        {
                            CountryID = 2,
                            CountryName = "Australia",
                            CurrencyID = -1
                        },
                        new
                        {
                            CountryID = 3,
                            CountryName = "Austria",
                            CurrencyID = -1
                        },
                        new
                        {
                            CountryID = 4,
                            CountryName = "Belgium",
                            CurrencyID = -1
                        },
                        new
                        {
                            CountryID = 5,
                            CountryName = "Bosnia and Herzegovina",
                            CurrencyID = -1
                        },
                        new
                        {
                            CountryID = 6,
                            CountryName = "Bulgaria",
                            CurrencyID = -1
                        },
                        new
                        {
                            CountryID = 7,
                            CountryName = "Canada",
                            CurrencyID = -1
                        },
                        new
                        {
                            CountryID = 8,
                            CountryName = "Chile",
                            CurrencyID = -1
                        },
                        new
                        {
                            CountryID = 9,
                            CountryName = "Costa Rica",
                            CurrencyID = -1
                        },
                        new
                        {
                            CountryID = 10,
                            CountryName = "Cyprus",
                            CurrencyID = -1
                        },
                        new
                        {
                            CountryID = 11,
                            CountryName = "Czech Republic",
                            CurrencyID = -1
                        },
                        new
                        {
                            CountryID = 12,
                            CountryName = "Denmark",
                            CurrencyID = -1
                        },
                        new
                        {
                            CountryID = 13,
                            CountryName = "Estonia",
                            CurrencyID = -1
                        },
                        new
                        {
                            CountryID = 14,
                            CountryName = "Finland",
                            CurrencyID = -1
                        },
                        new
                        {
                            CountryID = 15,
                            CountryName = "France",
                            CurrencyID = -1
                        },
                        new
                        {
                            CountryID = 16,
                            CountryName = "Georgia",
                            CurrencyID = -1
                        },
                        new
                        {
                            CountryID = 17,
                            CountryName = "Germany",
                            CurrencyID = -1
                        },
                        new
                        {
                            CountryID = 18,
                            CountryName = "Greece",
                            CurrencyID = -1
                        },
                        new
                        {
                            CountryID = 19,
                            CountryName = "Hungary",
                            CurrencyID = -1
                        },
                        new
                        {
                            CountryID = 20,
                            CountryName = "Iceland",
                            CurrencyID = -1
                        },
                        new
                        {
                            CountryID = 21,
                            CountryName = "India",
                            CurrencyID = -1
                        },
                        new
                        {
                            CountryID = 22,
                            CountryName = "Ireland",
                            CurrencyID = -1
                        },
                        new
                        {
                            CountryID = 23,
                            CountryName = "Israel",
                            CurrencyID = 2
                        },
                        new
                        {
                            CountryID = 24,
                            CountryName = "Italy",
                            CurrencyID = -1
                        },
                        new
                        {
                            CountryID = 25,
                            CountryName = "Japan",
                            CurrencyID = -1
                        },
                        new
                        {
                            CountryID = 26,
                            CountryName = "Latvia",
                            CurrencyID = -1
                        },
                        new
                        {
                            CountryID = 27,
                            CountryName = "Lithuania",
                            CurrencyID = -1
                        },
                        new
                        {
                            CountryID = 28,
                            CountryName = "Luxembourg",
                            CurrencyID = -1
                        },
                        new
                        {
                            CountryID = 29,
                            CountryName = "Malaysia",
                            CurrencyID = -1
                        },
                        new
                        {
                            CountryID = 30,
                            CountryName = "Mauritius",
                            CurrencyID = -1
                        },
                        new
                        {
                            CountryID = 31,
                            CountryName = "Moldova",
                            CurrencyID = -1
                        },
                        new
                        {
                            CountryID = 32,
                            CountryName = "Netherlands",
                            CurrencyID = -1
                        },
                        new
                        {
                            CountryID = 33,
                            CountryName = "New Zealand",
                            CurrencyID = -1
                        },
                        new
                        {
                            CountryID = 34,
                            CountryName = "North Macedonia",
                            CurrencyID = -1
                        },
                        new
                        {
                            CountryID = 35,
                            CountryName = "Norway",
                            CurrencyID = -1
                        },
                        new
                        {
                            CountryID = 36,
                            CountryName = "Poland",
                            CurrencyID = -1
                        },
                        new
                        {
                            CountryID = 37,
                            CountryName = "Portugal",
                            CurrencyID = -1
                        },
                        new
                        {
                            CountryID = 38,
                            CountryName = "Romania",
                            CurrencyID = -1
                        },
                        new
                        {
                            CountryID = 39,
                            CountryName = "Russia",
                            CurrencyID = -1
                        },
                        new
                        {
                            CountryID = 40,
                            CountryName = "Singapore",
                            CurrencyID = -1
                        },
                        new
                        {
                            CountryID = 41,
                            CountryName = "Slovakia",
                            CurrencyID = -1
                        },
                        new
                        {
                            CountryID = 42,
                            CountryName = "Slovenia",
                            CurrencyID = -1
                        },
                        new
                        {
                            CountryID = 43,
                            CountryName = "South Africa",
                            CurrencyID = -1
                        },
                        new
                        {
                            CountryID = 44,
                            CountryName = "South Korea",
                            CurrencyID = -1
                        },
                        new
                        {
                            CountryID = 45,
                            CountryName = "Spain",
                            CurrencyID = -1
                        },
                        new
                        {
                            CountryID = 46,
                            CountryName = "Sweden",
                            CurrencyID = -1
                        },
                        new
                        {
                            CountryID = 47,
                            CountryName = "Switzerland",
                            CurrencyID = -1
                        },
                        new
                        {
                            CountryID = 48,
                            CountryName = "United Kingdom",
                            CurrencyID = -1
                        },
                        new
                        {
                            CountryID = 49,
                            CountryName = "United States",
                            CurrencyID = 1
                        },
                        new
                        {
                            CountryID = 50,
                            CountryName = "Uruguay",
                            CurrencyID = -1
                        });
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.CreditCard", b =>
                {
                    b.Property<int>("CreditCardID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CardNumber")
                        .HasColumnType("nvarchar(4)")
                        .HasMaxLength(4);

                    b.Property<int>("CompanyAccountID")
                        .HasColumnType("int");

                    b.HasKey("CreditCardID");

                    b.HasIndex("CompanyAccountID");

                    b.ToTable("CreditCards");

                    b.HasData(
                        new
                        {
                            CreditCardID = 1,
                            CardNumber = "2543",
                            CompanyAccountID = 2
                        },
                        new
                        {
                            CreditCardID = 2,
                            CardNumber = "4694",
                            CompanyAccountID = 2
                        },
                        new
                        {
                            CreditCardID = 3,
                            CardNumber = "3485",
                            CompanyAccountID = 2
                        },
                        new
                        {
                            CreditCardID = 4,
                            CardNumber = "0054",
                            CompanyAccountID = 2
                        },
                        new
                        {
                            CreditCardID = 5,
                            CardNumber = "4971",
                            CompanyAccountID = 1
                        },
                        new
                        {
                            CreditCardID = 6,
                            CardNumber = "4424",
                            CompanyAccountID = 1
                        },
                        new
                        {
                            CreditCardID = 7,
                            CardNumber = "4432",
                            CompanyAccountID = 1
                        },
                        new
                        {
                            CreditCardID = 8,
                            CardNumber = "7972",
                            CompanyAccountID = 3
                        });
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.Currency", b =>
                {
                    b.Property<int>("CurrencyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CurrencyName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CurrencyID");

                    b.ToTable("Currencies");

                    b.HasData(
                        new
                        {
                            CurrencyID = -1,
                            CurrencyName = "None"
                        },
                        new
                        {
                            CurrencyID = 1,
                            CurrencyName = "USD"
                        },
                        new
                        {
                            CurrencyID = 2,
                            CurrencyName = "NIS"
                        });
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.Degree", b =>
                {
                    b.Property<int>("DegreeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DegreeID");

                    b.ToTable("Degrees");

                    b.HasData(
                        new
                        {
                            DegreeID = 1,
                            Description = "B.Sc"
                        },
                        new
                        {
                            DegreeID = 2,
                            Description = "M.Sc"
                        },
                        new
                        {
                            DegreeID = 3,
                            Description = "P.hd"
                        },
                        new
                        {
                            DegreeID = 4,
                            Description = "Post P.hd"
                        },
                        new
                        {
                            DegreeID = 5,
                            Description = "No Degree"
                        },
                        new
                        {
                            DegreeID = 6,
                            Description = "Certificate"
                        });
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.Division", b =>
                {
                    b.Property<int>("DivisionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DivisionID");

                    b.ToTable("Divisions");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.EmployeeHours", b =>
                {
                    b.Property<int>("EmployeeHoursID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CompanyDayOffID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EmployeeHoursStatusEntry1ID")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeHoursStatusEntry2ID")
                        .HasColumnType("int");

                    b.Property<string>("EmployeeID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("Entry1")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Entry2")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Exit1")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Exit2")
                        .HasColumnType("datetime2");

                    b.Property<int?>("OffDayTypeID")
                        .HasColumnType("int");

                    b.Property<TimeSpan?>("PartialOffDayHours")
                        .HasColumnType("time");

                    b.Property<int?>("PartialOffDayTypeID")
                        .HasColumnType("int");

                    b.Property<TimeSpan?>("TotalHours")
                        .HasColumnType("time");

                    b.HasKey("EmployeeHoursID");

                    b.HasIndex("CompanyDayOffID");

                    b.HasIndex("EmployeeHoursStatusEntry1ID");

                    b.HasIndex("EmployeeHoursStatusEntry2ID");

                    b.HasIndex("EmployeeID");

                    b.HasIndex("OffDayTypeID");

                    b.HasIndex("PartialOffDayTypeID");

                    b.ToTable("EmployeeHours");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.EmployeeHoursAwaitingApproval", b =>
                {
                    b.Property<int>("EmployeeHoursAwaitingApprovalID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmployeeHoursID")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeHoursStatusEntry1ID")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeHoursStatusEntry2ID")
                        .HasColumnType("int");

                    b.Property<string>("EmployeeID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("Entry1")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Entry2")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Exit1")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Exit2")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDenied")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("OffDayTypeID")
                        .HasColumnType("int");

                    b.Property<TimeSpan?>("PartialOffDayHours")
                        .HasColumnType("time");

                    b.Property<int?>("PartialOffDayTypeID")
                        .HasColumnType("int");

                    b.Property<TimeSpan?>("TotalHours")
                        .HasColumnType("time");

                    b.HasKey("EmployeeHoursAwaitingApprovalID");

                    b.HasIndex("EmployeeHoursID")
                        .IsUnique();

                    b.HasIndex("EmployeeHoursStatusEntry1ID");

                    b.HasIndex("EmployeeHoursStatusEntry2ID");

                    b.HasIndex("EmployeeID");

                    b.HasIndex("OffDayTypeID");

                    b.HasIndex("PartialOffDayTypeID");

                    b.ToTable("EmployeeHoursAwaitingApprovals");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.EmployeeHoursStatus", b =>
                {
                    b.Property<int>("EmployeeHoursStatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmployeeHoursStatusID");

                    b.ToTable("EmployeeHoursStatuses");

                    b.HasData(
                        new
                        {
                            EmployeeHoursStatusID = 1,
                            Description = "Work from home"
                        },
                        new
                        {
                            EmployeeHoursStatusID = 2,
                            Description = "Edit existing hours"
                        },
                        new
                        {
                            EmployeeHoursStatusID = 3,
                            Description = "Forgot to report"
                        });
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.EmployeeInfoNotification", b =>
                {
                    b.Property<int>("NotificationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Action")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApplicationUserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Controller")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<DateTime>("NotificationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("NotificationStatusID")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeStamp")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("NotificationID");

                    b.HasIndex("ApplicationUserID");

                    b.HasIndex("EmployeeID");

                    b.HasIndex("NotificationStatusID");

                    b.ToTable("EmployeeInfoNotifications");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.EmployeeStatus", b =>
                {
                    b.Property<int>("EmployeeStatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviation")
                        .HasColumnType("char(2)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LastCentarixID")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastCentarixIDTimeStamp")
                        .HasColumnType("datetime2");

                    b.HasKey("EmployeeStatusID");

                    b.ToTable("EmployeeStatuses");

                    b.HasData(
                        new
                        {
                            EmployeeStatusID = 1,
                            Abbreviation = "E",
                            Description = "Employee",
                            LastCentarixID = 0,
                            LastCentarixIDTimeStamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            EmployeeStatusID = 2,
                            Abbreviation = "F",
                            Description = "Freelancer",
                            LastCentarixID = 0,
                            LastCentarixIDTimeStamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            EmployeeStatusID = 3,
                            Abbreviation = "A",
                            Description = "Advisor",
                            LastCentarixID = 0,
                            LastCentarixIDTimeStamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            EmployeeStatusID = 4,
                            Abbreviation = "U",
                            Description = "User",
                            LastCentarixID = 0,
                            LastCentarixIDTimeStamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.Experiment", b =>
                {
                    b.Property<int>("ExperimentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AmountOfVisits")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExperimentCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaximumAge")
                        .HasColumnType("int");

                    b.Property<int>("MinimumAge")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfParticipants")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("ExperimentID");

                    b.ToTable("Experiments");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.ExperimentEntry", b =>
                {
                    b.Property<int>("ExperimentEntryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("ParticipantID")
                        .HasColumnType("int");

                    b.Property<int>("SiteID")
                        .HasColumnType("int");

                    b.Property<int>("VisitNumber")
                        .HasColumnType("int");

                    b.HasKey("ExperimentEntryID");

                    b.HasIndex("ApplicationUserID");

                    b.HasIndex("SiteID");

                    b.HasIndex("ParticipantID", "VisitNumber")
                        .IsUnique();

                    b.ToTable("ExperimentEntries");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.ExperimentTest", b =>
                {
                    b.Property<int>("ExperimentID")
                        .HasColumnType("int");

                    b.Property<int>("TestID")
                        .HasColumnType("int");

                    b.HasKey("ExperimentID", "TestID");

                    b.HasIndex("TestID");

                    b.ToTable("ExperimentTest");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.FavoriteProtocol", b =>
                {
                    b.Property<int>("FavoriteID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("ProtocolVersionID")
                        .HasColumnType("int");

                    b.HasKey("FavoriteID");

                    b.HasIndex("ApplicationUserID");

                    b.HasIndex("ProtocolVersionID");

                    b.ToTable("FavoriteProtocols");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.FavoriteReport", b =>
                {
                    b.Property<int>("FavoriteID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("ReportID")
                        .HasColumnType("int");

                    b.HasKey("FavoriteID");

                    b.HasIndex("ApplicationUserID");

                    b.HasIndex("ReportID");

                    b.ToTable("FavoriteReports");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.FavoriteRequest", b =>
                {
                    b.Property<int>("FavoriteID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("RequestID")
                        .HasColumnType("int");

                    b.HasKey("FavoriteID");

                    b.HasIndex("ApplicationUserID");

                    b.HasIndex("RequestID");

                    b.ToTable("FavoriteRequests");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.FavoriteResource", b =>
                {
                    b.Property<int>("FavoriteID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ResourceID")
                        .HasColumnType("int");

                    b.HasKey("FavoriteID");

                    b.HasIndex("ApplicationUserID");

                    b.HasIndex("ResourceID");

                    b.ToTable("FavoriteResources");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.Freelancer", b =>
                {
                    b.Property<int>("FreelancerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EmployeeId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("FreelancerID");

                    b.HasIndex("EmployeeId")
                        .IsUnique()
                        .HasFilter("[EmployeeId] IS NOT NULL");

                    b.ToTable("Freelancers");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.FunctionLine", b =>
                {
                    b.Property<int>("ID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FunctionTypeID")
                        .HasColumnType("int");

                    b.Property<bool>("IsTemporaryDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LineID")
                        .HasColumnType("int");

                    b.Property<int?>("ProductID")
                        .HasColumnType("int");

                    b.Property<int?>("ProtocolVersionID")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("Timer")
                        .HasColumnType("time");

                    b.HasKey("ID");

                    b.HasIndex("FunctionTypeID");

                    b.HasIndex("LineID");

                    b.HasIndex("ProductID");

                    b.HasIndex("ProtocolVersionID");

                    b.ToTable("FunctionLines");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.FunctionLineID", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("ID");

                    b.ToTable("FunctionLineIDs");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.FunctionReport", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FunctionTypeID")
                        .HasColumnType("int");

                    b.Property<bool>("IsTemporary")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTemporaryDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ProductID")
                        .HasColumnType("int");

                    b.Property<int?>("ProtocolVersionID")
                        .HasColumnType("int");

                    b.Property<int>("ReportID")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("Timer")
                        .HasColumnType("time");

                    b.HasKey("ID");

                    b.HasIndex("FunctionTypeID");

                    b.HasIndex("ProductID");

                    b.HasIndex("ProtocolVersionID");

                    b.HasIndex("ReportID");

                    b.ToTable("FunctionReports");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.FunctionResult", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FunctionTypeID")
                        .HasColumnType("int");

                    b.Property<bool>("IsTemporary")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTemporaryDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ProductID")
                        .HasColumnType("int");

                    b.Property<int>("ProtocolInstanceID")
                        .HasColumnType("int");

                    b.Property<int?>("ProtocolVersionID")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("Timer")
                        .HasColumnType("time");

                    b.HasKey("ID");

                    b.HasIndex("FunctionTypeID");

                    b.HasIndex("ProductID");

                    b.HasIndex("ProtocolInstanceID");

                    b.HasIndex("ProtocolVersionID");

                    b.ToTable("FunctionResults");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.FunctionType", b =>
                {
                    b.Property<int>("FunctionTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DescriptionEnum")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FunctionDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IconActionClass")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FunctionTypeID");

                    b.ToTable("FunctionTypes");

                    b.HasData(
                        new
                        {
                            FunctionTypeID = 1,
                            DescriptionEnum = "AddImage",
                            FunctionDescription = "Add Image",
                            Icon = "icon-account_box-24px1",
                            IconActionClass = "add-image-to-line"
                        },
                        new
                        {
                            FunctionTypeID = 2,
                            DescriptionEnum = "AddTimer",
                            FunctionDescription = "Add Timer",
                            Icon = "icon-centarix-icons-19",
                            IconActionClass = "add-timer-to-line"
                        },
                        new
                        {
                            FunctionTypeID = 3,
                            DescriptionEnum = "AddComment",
                            FunctionDescription = "Add Comment",
                            Icon = "icon-comment-24px",
                            IconActionClass = "add-comment-to-line"
                        },
                        new
                        {
                            FunctionTypeID = 4,
                            DescriptionEnum = "AddWarning",
                            FunctionDescription = "Add Warning",
                            Icon = "icon-report_problem-24px",
                            IconActionClass = "add-warning-to-line"
                        },
                        new
                        {
                            FunctionTypeID = 5,
                            DescriptionEnum = "AddTip",
                            FunctionDescription = "Add Tip",
                            Icon = "icon-tip-24px",
                            IconActionClass = "add-tip-to-line"
                        },
                        new
                        {
                            FunctionTypeID = 6,
                            DescriptionEnum = "AddTable",
                            FunctionDescription = "Add Table",
                            Icon = "icon-table_chart-24px1",
                            IconActionClass = "add-table-to-line"
                        },
                        new
                        {
                            FunctionTypeID = 7,
                            DescriptionEnum = "AddTemplate",
                            FunctionDescription = "Add Template",
                            Icon = "",
                            IconActionClass = "add-template-to-line"
                        },
                        new
                        {
                            FunctionTypeID = 8,
                            DescriptionEnum = "AddStop",
                            FunctionDescription = "Add Stop",
                            Icon = "icon-stop-24px",
                            IconActionClass = "add-stop-to-line"
                        },
                        new
                        {
                            FunctionTypeID = 9,
                            DescriptionEnum = "AddLinkToProduct",
                            FunctionDescription = "Add Link To Product",
                            Icon = "icon-attach-item-24px",
                            IconActionClass = "add-product-to-line"
                        },
                        new
                        {
                            FunctionTypeID = 10,
                            DescriptionEnum = "AddLinkToProtocol",
                            FunctionDescription = "Add Link To Protocol",
                            Icon = "icon-attach-protocol-24px",
                            IconActionClass = "add-protocol-to-line"
                        },
                        new
                        {
                            FunctionTypeID = 11,
                            DescriptionEnum = "AddFile",
                            FunctionDescription = "Add File",
                            Icon = "icon-description-24px2",
                            IconActionClass = "add-file-to-line"
                        });
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.Gender", b =>
                {
                    b.Property<int>("GenderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GenderID");

                    b.ToTable("Genders");

                    b.HasData(
                        new
                        {
                            GenderID = 1,
                            Description = "Male"
                        },
                        new
                        {
                            GenderID = 2,
                            Description = "Female"
                        });
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.GlobalInfo", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GlobalInfoType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("GlobalInfos");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.Invoice", b =>
                {
                    b.Property<int>("InvoiceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InvoiceNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("InvoiceID");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.IpRange", b =>
                {
                    b.Property<int>("IpRangeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("FromIpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToIpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IpRangeID");

                    b.ToTable("IpRanges");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.JobCategoryType", b =>
                {
                    b.Property<int>("JobCategoryTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("JobCategoryTypeID");

                    b.ToTable("JobCategoryTypes");

                    b.HasData(
                        new
                        {
                            JobCategoryTypeID = 1,
                            Description = "Executive"
                        },
                        new
                        {
                            JobCategoryTypeID = 2,
                            Description = "Rejuvenation"
                        },
                        new
                        {
                            JobCategoryTypeID = 3,
                            Description = "Biomarker"
                        },
                        new
                        {
                            JobCategoryTypeID = 4,
                            Description = "Delivery Systems"
                        },
                        new
                        {
                            JobCategoryTypeID = 5,
                            Description = "Clinical Trials"
                        },
                        new
                        {
                            JobCategoryTypeID = 6,
                            Description = "Business Development"
                        },
                        new
                        {
                            JobCategoryTypeID = 7,
                            Description = "Software Development"
                        },
                        new
                        {
                            JobCategoryTypeID = 8,
                            Description = "General"
                        },
                        new
                        {
                            JobCategoryTypeID = 9,
                            Description = "Lab"
                        },
                        new
                        {
                            JobCategoryTypeID = 10,
                            Description = "Bioinformatics"
                        });
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.JobSubcategoryType", b =>
                {
                    b.Property<int>("JobSubcategoryTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("JobCategoryTypeID")
                        .HasColumnType("int");

                    b.HasKey("JobSubcategoryTypeID");

                    b.HasIndex("JobCategoryTypeID");

                    b.ToTable("JobSubcategoryTypes");

                    b.HasData(
                        new
                        {
                            JobSubcategoryTypeID = 201,
                            Description = "Senior Scientist",
                            JobCategoryTypeID = 2
                        },
                        new
                        {
                            JobSubcategoryTypeID = 202,
                            Description = "Research Associate",
                            JobCategoryTypeID = 2
                        },
                        new
                        {
                            JobSubcategoryTypeID = 203,
                            Description = "Lab Technician",
                            JobCategoryTypeID = 2
                        },
                        new
                        {
                            JobSubcategoryTypeID = 204,
                            Description = "Team Manager",
                            JobCategoryTypeID = 2
                        },
                        new
                        {
                            JobSubcategoryTypeID = 205,
                            Description = "Production Worker",
                            JobCategoryTypeID = 2
                        },
                        new
                        {
                            JobSubcategoryTypeID = 206,
                            Description = "Operation Executive",
                            JobCategoryTypeID = 2
                        },
                        new
                        {
                            JobSubcategoryTypeID = 207,
                            Description = "Business Development",
                            JobCategoryTypeID = 2
                        },
                        new
                        {
                            JobSubcategoryTypeID = 208,
                            Description = "Sales",
                            JobCategoryTypeID = 2
                        },
                        new
                        {
                            JobSubcategoryTypeID = 209,
                            Description = "Lab Manager",
                            JobCategoryTypeID = 2
                        },
                        new
                        {
                            JobSubcategoryTypeID = 210,
                            Description = "Bioinformatician",
                            JobCategoryTypeID = 2
                        },
                        new
                        {
                            JobSubcategoryTypeID = 301,
                            Description = "Senior Scientist",
                            JobCategoryTypeID = 3
                        },
                        new
                        {
                            JobSubcategoryTypeID = 302,
                            Description = "Research Associate",
                            JobCategoryTypeID = 3
                        },
                        new
                        {
                            JobSubcategoryTypeID = 303,
                            Description = "Lab Technician",
                            JobCategoryTypeID = 3
                        },
                        new
                        {
                            JobSubcategoryTypeID = 304,
                            Description = "Team Manager",
                            JobCategoryTypeID = 3
                        },
                        new
                        {
                            JobSubcategoryTypeID = 305,
                            Description = "Production Worker",
                            JobCategoryTypeID = 3
                        },
                        new
                        {
                            JobSubcategoryTypeID = 306,
                            Description = "Operation Executive",
                            JobCategoryTypeID = 3
                        },
                        new
                        {
                            JobSubcategoryTypeID = 307,
                            Description = "Business Development",
                            JobCategoryTypeID = 3
                        },
                        new
                        {
                            JobSubcategoryTypeID = 308,
                            Description = "Sales",
                            JobCategoryTypeID = 3
                        },
                        new
                        {
                            JobSubcategoryTypeID = 309,
                            Description = "Lab Manager",
                            JobCategoryTypeID = 3
                        },
                        new
                        {
                            JobSubcategoryTypeID = 310,
                            Description = "Bioinformatician",
                            JobCategoryTypeID = 3
                        },
                        new
                        {
                            JobSubcategoryTypeID = 401,
                            Description = "Senior Scientist",
                            JobCategoryTypeID = 4
                        },
                        new
                        {
                            JobSubcategoryTypeID = 402,
                            Description = "Research Associate",
                            JobCategoryTypeID = 4
                        },
                        new
                        {
                            JobSubcategoryTypeID = 403,
                            Description = "Lab Technician",
                            JobCategoryTypeID = 4
                        },
                        new
                        {
                            JobSubcategoryTypeID = 404,
                            Description = "Team Manager",
                            JobCategoryTypeID = 4
                        },
                        new
                        {
                            JobSubcategoryTypeID = 405,
                            Description = "Production Worker",
                            JobCategoryTypeID = 4
                        },
                        new
                        {
                            JobSubcategoryTypeID = 406,
                            Description = "Operation Executive",
                            JobCategoryTypeID = 4
                        },
                        new
                        {
                            JobSubcategoryTypeID = 407,
                            Description = "Business Development",
                            JobCategoryTypeID = 4
                        },
                        new
                        {
                            JobSubcategoryTypeID = 408,
                            Description = "Sales",
                            JobCategoryTypeID = 4
                        },
                        new
                        {
                            JobSubcategoryTypeID = 409,
                            Description = "Lab Manager",
                            JobCategoryTypeID = 4
                        },
                        new
                        {
                            JobSubcategoryTypeID = 410,
                            Description = "Bioinformatician",
                            JobCategoryTypeID = 4
                        },
                        new
                        {
                            JobSubcategoryTypeID = 101,
                            Description = "CEO",
                            JobCategoryTypeID = 1
                        },
                        new
                        {
                            JobSubcategoryTypeID = 102,
                            Description = "CTO",
                            JobCategoryTypeID = 1
                        },
                        new
                        {
                            JobSubcategoryTypeID = 103,
                            Description = "COO",
                            JobCategoryTypeID = 1
                        },
                        new
                        {
                            JobSubcategoryTypeID = 104,
                            Description = "President",
                            JobCategoryTypeID = 1
                        },
                        new
                        {
                            JobSubcategoryTypeID = 105,
                            Description = "Director",
                            JobCategoryTypeID = 1
                        },
                        new
                        {
                            JobSubcategoryTypeID = 106,
                            Description = "CSO",
                            JobCategoryTypeID = 1
                        },
                        new
                        {
                            JobSubcategoryTypeID = 107,
                            Description = "CMO",
                            JobCategoryTypeID = 1
                        },
                        new
                        {
                            JobSubcategoryTypeID = 108,
                            Description = "CFO",
                            JobCategoryTypeID = 1
                        },
                        new
                        {
                            JobSubcategoryTypeID = 109,
                            Description = "CBO",
                            JobCategoryTypeID = 1
                        },
                        new
                        {
                            JobSubcategoryTypeID = 601,
                            Description = "Sales",
                            JobCategoryTypeID = 6
                        },
                        new
                        {
                            JobSubcategoryTypeID = 701,
                            Description = "Elixir",
                            JobCategoryTypeID = 7
                        },
                        new
                        {
                            JobSubcategoryTypeID = 702,
                            Description = "Automation Developer",
                            JobCategoryTypeID = 7
                        },
                        new
                        {
                            JobSubcategoryTypeID = 703,
                            Description = "Other",
                            JobCategoryTypeID = 7
                        },
                        new
                        {
                            JobSubcategoryTypeID = 801,
                            Description = "Cooking",
                            JobCategoryTypeID = 8
                        },
                        new
                        {
                            JobSubcategoryTypeID = 802,
                            Description = "Cleaning",
                            JobCategoryTypeID = 8
                        },
                        new
                        {
                            JobSubcategoryTypeID = 803,
                            Description = "IT",
                            JobCategoryTypeID = 8
                        },
                        new
                        {
                            JobSubcategoryTypeID = 804,
                            Description = "Administration",
                            JobCategoryTypeID = 8
                        },
                        new
                        {
                            JobSubcategoryTypeID = 805,
                            Description = "Operations Manager",
                            JobCategoryTypeID = 8
                        },
                        new
                        {
                            JobSubcategoryTypeID = 806,
                            Description = "Branch Manager",
                            JobCategoryTypeID = 8
                        },
                        new
                        {
                            JobSubcategoryTypeID = 901,
                            Description = "Lab Manager",
                            JobCategoryTypeID = 9
                        },
                        new
                        {
                            JobSubcategoryTypeID = 902,
                            Description = "Automations Manager",
                            JobCategoryTypeID = 9
                        },
                        new
                        {
                            JobSubcategoryTypeID = 903,
                            Description = "Automations Implementer",
                            JobCategoryTypeID = 9
                        },
                        new
                        {
                            JobSubcategoryTypeID = 1001,
                            Description = "Senior Bioinformatician",
                            JobCategoryTypeID = 10
                        },
                        new
                        {
                            JobSubcategoryTypeID = 1002,
                            Description = "Bioinformatician Executive",
                            JobCategoryTypeID = 10
                        },
                        new
                        {
                            JobSubcategoryTypeID = 1003,
                            Description = "Bioinformatician Team Manager",
                            JobCategoryTypeID = 10
                        },
                        new
                        {
                            JobSubcategoryTypeID = 1004,
                            Description = "Bioinformatics Technician",
                            JobCategoryTypeID = 10
                        },
                        new
                        {
                            JobSubcategoryTypeID = 1005,
                            Description = "Bioinformatics Researcher",
                            JobCategoryTypeID = 10
                        },
                        new
                        {
                            JobSubcategoryTypeID = 501,
                            Description = "Clinical Trials",
                            JobCategoryTypeID = 5
                        });
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.LabPart", b =>
                {
                    b.Property<int>("LabPartID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("HasShelves")
                        .HasColumnType("bit");

                    b.Property<string>("LabPartName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LabPartNameAbbrev")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LabPartID");

                    b.ToTable("LabParts");

                    b.HasData(
                        new
                        {
                            LabPartID = 1,
                            HasShelves = true,
                            LabPartName = "Closet",
                            LabPartNameAbbrev = "C"
                        },
                        new
                        {
                            LabPartID = 2,
                            HasShelves = true,
                            LabPartName = "Glass Closet",
                            LabPartNameAbbrev = "G"
                        },
                        new
                        {
                            LabPartID = 3,
                            HasShelves = false,
                            LabPartName = "Table",
                            LabPartNameAbbrev = "T"
                        },
                        new
                        {
                            LabPartID = 4,
                            HasShelves = true,
                            LabPartName = "Drawer",
                            LabPartNameAbbrev = "D"
                        },
                        new
                        {
                            LabPartID = 5,
                            HasShelves = false,
                            LabPartName = "Shelf",
                            LabPartNameAbbrev = "S"
                        },
                        new
                        {
                            LabPartID = 6,
                            HasShelves = false,
                            LabPartName = "Bench",
                            LabPartNameAbbrev = "B"
                        });
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.Line", b =>
                {
                    b.Property<int>("LineID")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsTemporaryDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LineNumber")
                        .HasColumnType("int");

                    b.Property<int>("LineTypeID")
                        .HasColumnType("int");

                    b.Property<int?>("ParentLineID")
                        .HasColumnType("int");

                    b.Property<int>("ProtocolVersionID")
                        .HasColumnType("int");

                    b.HasKey("LineID");

                    b.HasIndex("LineTypeID");

                    b.HasIndex("ParentLineID");

                    b.HasIndex("ProtocolVersionID");

                    b.ToTable("Lines");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.LineChange", b =>
                {
                    b.Property<int>("LineID")
                        .HasColumnType("int");

                    b.Property<int>("ProtocolInstanceID")
                        .HasColumnType("int");

                    b.Property<string>("ChangeText")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LineID", "ProtocolInstanceID");

                    b.HasIndex("ProtocolInstanceID");

                    b.ToTable("LineChanges");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.LineType", b =>
                {
                    b.Property<int>("LineTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("LineTypeChildID")
                        .HasColumnType("int");

                    b.Property<string>("LineTypeDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LineTypeParentID")
                        .HasColumnType("int");

                    b.HasKey("LineTypeID");

                    b.HasIndex("LineTypeChildID");

                    b.HasIndex("LineTypeParentID");

                    b.ToTable("LineTypes");

                    b.HasData(
                        new
                        {
                            LineTypeID = 1,
                            LineTypeChildID = 2,
                            LineTypeDescription = "Header"
                        },
                        new
                        {
                            LineTypeID = 2,
                            LineTypeChildID = 3,
                            LineTypeDescription = "Sub Header",
                            LineTypeParentID = 1
                        },
                        new
                        {
                            LineTypeID = 3,
                            LineTypeDescription = "Step",
                            LineTypeParentID = 2
                        });
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.Link", b =>
                {
                    b.Property<int>("LinkID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LinkDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProtocolVersionID")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LinkID");

                    b.HasIndex("ProtocolVersionID");

                    b.ToTable("Links");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.LocationInstance", b =>
                {
                    b.Property<int>("LocationInstanceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("ContainsItems")
                        .HasColumnType("bit");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<bool>("IsEmptyShelf")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFull")
                        .HasColumnType("bit");

                    b.Property<int?>("LabPartID")
                        .HasColumnType("int");

                    b.Property<string>("LocationInstanceAbbrev")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocationInstanceName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LocationInstanceParentID")
                        .HasColumnType("int");

                    b.Property<int>("LocationNumber")
                        .HasColumnType("int");

                    b.Property<int?>("LocationRoomInstanceID")
                        .HasColumnType("int");

                    b.Property<int>("LocationTypeID")
                        .HasColumnType("int");

                    b.Property<int>("Width")
                        .HasColumnType("int");

                    b.HasKey("LocationInstanceID");

                    b.HasIndex("LabPartID");

                    b.HasIndex("LocationInstanceParentID");

                    b.HasIndex("LocationRoomInstanceID");

                    b.HasIndex("LocationTypeID");

                    b.ToTable("LocationInstances");

                    b.HasDiscriminator<string>("Discriminator").HasValue("LocationInstance");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.LocationRoomInstance", b =>
                {
                    b.Property<int>("LocationRoomInstanceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LocationRoomInstanceAbbrev")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocationRoomInstanceName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LocationRoomTypeID")
                        .HasColumnType("int");

                    b.HasKey("LocationRoomInstanceID");

                    b.HasIndex("LocationRoomTypeID");

                    b.ToTable("LocationRoomInstances");

                    b.HasData(
                        new
                        {
                            LocationRoomInstanceID = 1,
                            LocationRoomInstanceAbbrev = "L1",
                            LocationRoomInstanceName = "Laboratory 1",
                            LocationRoomTypeID = 1
                        },
                        new
                        {
                            LocationRoomInstanceID = 2,
                            LocationRoomInstanceAbbrev = "L2",
                            LocationRoomInstanceName = "Laboratory 2",
                            LocationRoomTypeID = 1
                        },
                        new
                        {
                            LocationRoomInstanceID = 3,
                            LocationRoomInstanceAbbrev = "TC1",
                            LocationRoomInstanceName = "Tissue Culture 1",
                            LocationRoomTypeID = 2
                        },
                        new
                        {
                            LocationRoomInstanceID = 4,
                            LocationRoomInstanceAbbrev = "E1",
                            LocationRoomInstanceName = "Equipment Room 1",
                            LocationRoomTypeID = 3
                        },
                        new
                        {
                            LocationRoomInstanceID = 5,
                            LocationRoomInstanceAbbrev = "R1",
                            LocationRoomInstanceName = "Refrigerator Room 1",
                            LocationRoomTypeID = 4
                        },
                        new
                        {
                            LocationRoomInstanceID = 6,
                            LocationRoomInstanceAbbrev = "W1",
                            LocationRoomInstanceName = "Washing Room 1",
                            LocationRoomTypeID = 5
                        },
                        new
                        {
                            LocationRoomInstanceID = 7,
                            LocationRoomInstanceAbbrev = "S1",
                            LocationRoomInstanceName = "Storage Room 1",
                            LocationRoomTypeID = 6
                        },
                        new
                        {
                            LocationRoomInstanceID = 8,
                            LocationRoomInstanceAbbrev = "DSL3",
                            LocationRoomInstanceName = "DS-Lab 3",
                            LocationRoomTypeID = 1
                        },
                        new
                        {
                            LocationRoomInstanceID = 9,
                            LocationRoomInstanceAbbrev = "DSL4",
                            LocationRoomInstanceName = "DS-Lab 4",
                            LocationRoomTypeID = 1
                        },
                        new
                        {
                            LocationRoomInstanceID = 10,
                            LocationRoomInstanceAbbrev = "DSTC2",
                            LocationRoomInstanceName = "DS-Tissue Culture 2",
                            LocationRoomTypeID = 2
                        },
                        new
                        {
                            LocationRoomInstanceID = 11,
                            LocationRoomInstanceAbbrev = "DSW2",
                            LocationRoomInstanceName = "DS-Washing Room 2",
                            LocationRoomTypeID = 5
                        },
                        new
                        {
                            LocationRoomInstanceID = 12,
                            LocationRoomInstanceAbbrev = "LN1",
                            LocationRoomInstanceName = "Liquid Nitrogen Room 1",
                            LocationRoomTypeID = 7
                        },
                        new
                        {
                            LocationRoomInstanceID = 13,
                            LocationRoomInstanceAbbrev = "BL5",
                            LocationRoomInstanceName = "Biomarker Lab 5",
                            LocationRoomTypeID = 1
                        },
                        new
                        {
                            LocationRoomInstanceID = 14,
                            LocationRoomInstanceAbbrev = "S2",
                            LocationRoomInstanceName = "Storage Room 2",
                            LocationRoomTypeID = 6
                        },
                        new
                        {
                            LocationRoomInstanceID = 15,
                            LocationRoomInstanceAbbrev = "S3",
                            LocationRoomInstanceName = "Storage Room 3",
                            LocationRoomTypeID = 6
                        });
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.LocationRoomType", b =>
                {
                    b.Property<int>("LocationRoomTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LocationAbbreviation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocationRoomTypeDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LocationRoomTypeID");

                    b.ToTable("LocationRoomTypes");

                    b.HasData(
                        new
                        {
                            LocationRoomTypeID = 1,
                            LocationAbbreviation = "L",
                            LocationRoomTypeDescription = "Laboratory"
                        },
                        new
                        {
                            LocationRoomTypeID = 2,
                            LocationAbbreviation = "TC",
                            LocationRoomTypeDescription = "Tissue Culture"
                        },
                        new
                        {
                            LocationRoomTypeID = 3,
                            LocationAbbreviation = "E",
                            LocationRoomTypeDescription = "Equipment Room"
                        },
                        new
                        {
                            LocationRoomTypeID = 4,
                            LocationAbbreviation = "R",
                            LocationRoomTypeDescription = "Refrigerator Room"
                        },
                        new
                        {
                            LocationRoomTypeID = 5,
                            LocationAbbreviation = "W",
                            LocationRoomTypeDescription = "Washing Room"
                        },
                        new
                        {
                            LocationRoomTypeID = 6,
                            LocationAbbreviation = "S",
                            LocationRoomTypeDescription = "Storage Room"
                        },
                        new
                        {
                            LocationRoomTypeID = 7,
                            LocationAbbreviation = "LN",
                            LocationRoomTypeDescription = "Liquid Nitrogen Room"
                        });
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.LocationType", b =>
                {
                    b.Property<int>("LocationTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Depth")
                        .HasColumnType("int");

                    b.Property<int>("Limit")
                        .HasColumnType("int");

                    b.Property<int?>("LocationTypeChildID")
                        .HasColumnType("int");

                    b.Property<string>("LocationTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocationTypeNameAbbre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LocationTypeParentID")
                        .HasColumnType("int");

                    b.Property<string>("LocationTypePluralName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LocationTypeID");

                    b.HasIndex("LocationTypeChildID");

                    b.HasIndex("LocationTypeParentID");

                    b.ToTable("LocationTypes");

                    b.HasData(
                        new
                        {
                            LocationTypeID = 100,
                            Depth = 0,
                            Limit = 0,
                            LocationTypeChildID = 101,
                            LocationTypeName = "-196°C",
                            LocationTypePluralName = "-196°C"
                        },
                        new
                        {
                            LocationTypeID = 101,
                            Depth = 1,
                            Limit = 0,
                            LocationTypeChildID = 102,
                            LocationTypeName = "Rack",
                            LocationTypeNameAbbre = "R",
                            LocationTypeParentID = 100,
                            LocationTypePluralName = "Racks"
                        },
                        new
                        {
                            LocationTypeID = 102,
                            Depth = 2,
                            Limit = 0,
                            LocationTypeChildID = 103,
                            LocationTypeName = "Box",
                            LocationTypeNameAbbre = "B",
                            LocationTypeParentID = 101,
                            LocationTypePluralName = "Boxes"
                        },
                        new
                        {
                            LocationTypeID = 103,
                            Depth = 3,
                            Limit = 1,
                            LocationTypeName = "Box Unit",
                            LocationTypeNameAbbre = "B",
                            LocationTypeParentID = 102,
                            LocationTypePluralName = "Box Units"
                        },
                        new
                        {
                            LocationTypeID = 200,
                            Depth = 0,
                            Limit = 0,
                            LocationTypeChildID = 201,
                            LocationTypeName = "-80°C",
                            LocationTypePluralName = "-80°C"
                        },
                        new
                        {
                            LocationTypeID = 201,
                            Depth = 1,
                            Limit = 0,
                            LocationTypeChildID = 202,
                            LocationTypeName = "Floor",
                            LocationTypeNameAbbre = "F",
                            LocationTypeParentID = 200,
                            LocationTypePluralName = "Floors"
                        },
                        new
                        {
                            LocationTypeID = 202,
                            Depth = 2,
                            Limit = 0,
                            LocationTypeChildID = 203,
                            LocationTypeName = "Rack",
                            LocationTypeNameAbbre = "R",
                            LocationTypeParentID = 201,
                            LocationTypePluralName = "Racks"
                        },
                        new
                        {
                            LocationTypeID = 203,
                            Depth = 3,
                            Limit = 0,
                            LocationTypeChildID = 204,
                            LocationTypeName = "Shelf",
                            LocationTypeNameAbbre = "S",
                            LocationTypeParentID = 202,
                            LocationTypePluralName = "Shelves"
                        },
                        new
                        {
                            LocationTypeID = 204,
                            Depth = 4,
                            Limit = 0,
                            LocationTypeChildID = 205,
                            LocationTypeName = "Box",
                            LocationTypeNameAbbre = "B",
                            LocationTypeParentID = 203,
                            LocationTypePluralName = "Boxes"
                        },
                        new
                        {
                            LocationTypeID = 205,
                            Depth = 5,
                            Limit = 1,
                            LocationTypeName = "Box Unit",
                            LocationTypeNameAbbre = "B",
                            LocationTypeParentID = 204,
                            LocationTypePluralName = "Box Units"
                        },
                        new
                        {
                            LocationTypeID = 300,
                            Depth = 0,
                            Limit = 0,
                            LocationTypeChildID = 301,
                            LocationTypeName = "-20°C",
                            LocationTypePluralName = "-20°C"
                        },
                        new
                        {
                            LocationTypeID = 301,
                            Depth = 1,
                            Limit = 0,
                            LocationTypeName = "Shelf",
                            LocationTypeNameAbbre = "S",
                            LocationTypeParentID = 300,
                            LocationTypePluralName = "Shelves"
                        },
                        new
                        {
                            LocationTypeID = 400,
                            Depth = 0,
                            Limit = 0,
                            LocationTypeChildID = 401,
                            LocationTypeName = "4°C",
                            LocationTypePluralName = "4°C"
                        },
                        new
                        {
                            LocationTypeID = 401,
                            Depth = 1,
                            Limit = 0,
                            LocationTypeName = "Shelf",
                            LocationTypeNameAbbre = "S",
                            LocationTypeParentID = 400,
                            LocationTypePluralName = "Shelves"
                        },
                        new
                        {
                            LocationTypeID = 500,
                            Depth = 0,
                            Limit = 0,
                            LocationTypeChildID = 501,
                            LocationTypeName = "25°C",
                            LocationTypePluralName = "25°C"
                        },
                        new
                        {
                            LocationTypeID = 501,
                            Depth = 2,
                            Limit = 0,
                            LocationTypeChildID = 502,
                            LocationTypeName = "Lab Part",
                            LocationTypeParentID = 500,
                            LocationTypePluralName = "Lab Parts"
                        },
                        new
                        {
                            LocationTypeID = 502,
                            Depth = 3,
                            Limit = 0,
                            LocationTypeName = "Section",
                            LocationTypeNameAbbre = "S",
                            LocationTypeParentID = 501,
                            LocationTypePluralName = "Sections"
                        },
                        new
                        {
                            LocationTypeID = 600,
                            Depth = 0,
                            Limit = 0,
                            LocationTypeName = "Quartzy",
                            LocationTypeNameAbbre = "Q",
                            LocationTypePluralName = "Quartzy"
                        });
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.MaritalStatus", b =>
                {
                    b.Property<int>("MaritalStatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MaritalStatusID");

                    b.ToTable("MaritalStatuses");

                    b.HasData(
                        new
                        {
                            MaritalStatusID = 1,
                            Description = "Married"
                        },
                        new
                        {
                            MaritalStatusID = 2,
                            Description = "Single"
                        },
                        new
                        {
                            MaritalStatusID = 3,
                            Description = "Divorced"
                        });
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.Material", b =>
                {
                    b.Property<int>("MaterialID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Info")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("MaterialCategoryID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProductID")
                        .HasColumnType("int");

                    b.Property<int>("ProtocolVersionID")
                        .HasColumnType("int");

                    b.HasKey("MaterialID");

                    b.HasIndex("MaterialCategoryID");

                    b.HasIndex("ProductID");

                    b.HasIndex("ProtocolVersionID");

                    b.ToTable("Materials");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.MaterialCategory", b =>
                {
                    b.Property<int>("MaterialCategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("MaterialCategoryDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MaterialCategoryID");

                    b.ToTable("MaterialCategories");

                    b.HasData(
                        new
                        {
                            MaterialCategoryID = 1,
                            MaterialCategoryDescription = "Reagents"
                        },
                        new
                        {
                            MaterialCategoryID = 2,
                            MaterialCategoryDescription = "Plastics"
                        },
                        new
                        {
                            MaterialCategoryID = 3,
                            MaterialCategoryDescription = "Equipment"
                        },
                        new
                        {
                            MaterialCategoryID = 4,
                            MaterialCategoryDescription = "Buffers"
                        });
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.NotificationStatus", b =>
                {
                    b.Property<int>("NotificationStatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NotificationStatusID");

                    b.ToTable("NotificationStatuses");

                    b.HasDiscriminator<string>("Discriminator").HasValue("NotificationStatus");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.OffDayType", b =>
                {
                    b.Property<int>("OffDayTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionEnum")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OffDayTypeID");

                    b.ToTable("OffDayTypes");

                    b.HasData(
                        new
                        {
                            OffDayTypeID = 1,
                            Description = "Sick Day",
                            DescriptionEnum = "SickDay"
                        },
                        new
                        {
                            OffDayTypeID = 2,
                            Description = "Vacation Day",
                            DescriptionEnum = "VacationDay"
                        },
                        new
                        {
                            OffDayTypeID = 3,
                            Description = "Maternity Leave",
                            DescriptionEnum = "MaternityLeave"
                        },
                        new
                        {
                            OffDayTypeID = 4,
                            Description = "Special Day",
                            DescriptionEnum = "SpecialDay"
                        },
                        new
                        {
                            OffDayTypeID = 5,
                            Description = "Unpaid Leave",
                            DescriptionEnum = "UnpaidLeave"
                        });
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.OldVendorCountry", b =>
                {
                    b.Property<int>("OldVendorCountryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("OldVendorCountryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VendorID")
                        .HasColumnType("int");

                    b.HasKey("OldVendorCountryID");

                    b.ToTable("OldVendorCountries");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.ParentCategory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryJson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryJsonID")
                        .HasColumnType("int");

                    b.Property<int>("CategoryTypeID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsProprietary")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.HasIndex("CategoryTypeID");

                    b.ToTable("ParentCategories");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CategoryJsonID = 0,
                            CategoryTypeID = 1,
                            Description = "Consumables",
                            IsProprietary = false
                        },
                        new
                        {
                            ID = 2,
                            CategoryJsonID = 0,
                            CategoryTypeID = 1,
                            Description = "Reagents And Chemicals",
                            IsProprietary = false
                        },
                        new
                        {
                            ID = 3,
                            CategoryJsonID = 0,
                            CategoryTypeID = 1,
                            Description = "Biological",
                            IsProprietary = false
                        },
                        new
                        {
                            ID = 4,
                            CategoryJsonID = 0,
                            CategoryTypeID = 1,
                            Description = "Reusable",
                            IsProprietary = false
                        },
                        new
                        {
                            ID = 5,
                            CategoryJsonID = 0,
                            CategoryTypeID = 1,
                            Description = "Safety",
                            IsProprietary = false
                        },
                        new
                        {
                            ID = 6,
                            CategoryJsonID = 0,
                            CategoryTypeID = 1,
                            Description = "General",
                            IsProprietary = false
                        },
                        new
                        {
                            ID = 7,
                            CategoryJsonID = 0,
                            CategoryTypeID = 1,
                            Description = "Clinical",
                            IsProprietary = false
                        },
                        new
                        {
                            ID = 14,
                            CategoryJsonID = 0,
                            CategoryTypeID = 1,
                            Description = "Samples",
                            IsProprietary = true
                        },
                        new
                        {
                            ID = 8,
                            CategoryJsonID = 0,
                            CategoryTypeID = 2,
                            Description = "IT",
                            IsProprietary = false
                        },
                        new
                        {
                            ID = 9,
                            CategoryJsonID = 0,
                            CategoryTypeID = 2,
                            Description = "Day To Day",
                            IsProprietary = false
                        },
                        new
                        {
                            ID = 10,
                            CategoryJsonID = 0,
                            CategoryTypeID = 2,
                            Description = "Travel",
                            IsProprietary = false
                        },
                        new
                        {
                            ID = 11,
                            CategoryJsonID = 0,
                            CategoryTypeID = 2,
                            Description = "Advice",
                            IsProprietary = false
                        },
                        new
                        {
                            ID = 12,
                            CategoryJsonID = 0,
                            CategoryTypeID = 2,
                            Description = "Regulations",
                            IsProprietary = false
                        },
                        new
                        {
                            ID = 13,
                            CategoryJsonID = 0,
                            CategoryTypeID = 2,
                            Description = "Government",
                            IsProprietary = false
                        });
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.ParentQuote", b =>
                {
                    b.Property<int>("ParentQuoteID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("QuoteDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("QuoteNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ParentQuoteID");

                    b.HasIndex("ApplicationUserID");

                    b.ToTable("ParentQuotes");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.ParentRequest", b =>
                {
                    b.Property<int>("ParentRequestID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Credit")
                        .HasColumnType("float");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsShippingPaid")
                        .HasColumnType("bit");

                    b.Property<string>("NoteToSupplier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("OrderNumber")
                        .HasColumnType("bigint");

                    b.Property<string>("QuartzyOrderNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Shipping")
                        .HasColumnType("float");

                    b.Property<string>("SupplierOrderNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Taxes")
                        .HasColumnType("float");

                    b.HasKey("ParentRequestID");

                    b.HasIndex("ApplicationUserID");

                    b.HasIndex("OrderNumber")
                        .IsUnique()
                        .HasFilter("[OrderNumber] IS NOT NULL");

                    b.HasIndex("QuartzyOrderNumber")
                        .IsUnique()
                        .HasFilter("[QuartzyOrderNumber] IS NOT NULL");

                    b.ToTable("ParentRequests");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.Participant", b =>
                {
                    b.Property<int>("ParticipantID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CentarixID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("ExperimentID")
                        .HasColumnType("int");

                    b.Property<int>("GenderID")
                        .HasColumnType("int");

                    b.Property<int>("ParticipantStatusID")
                        .HasColumnType("int");

                    b.HasKey("ParticipantID");

                    b.HasIndex("ExperimentID");

                    b.HasIndex("GenderID");

                    b.HasIndex("ParticipantStatusID");

                    b.HasIndex("ParticipantID", "CentarixID")
                        .IsUnique()
                        .HasFilter("[CentarixID] IS NOT NULL");

                    b.ToTable("Participants");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.ParticipantStatus", b =>
                {
                    b.Property<int>("ParticipantStatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ParticipantStatusID");

                    b.ToTable("ParticipantStatuses");

                    b.HasData(
                        new
                        {
                            ParticipantStatusID = 1,
                            Description = "Active"
                        },
                        new
                        {
                            ParticipantStatusID = 2,
                            Description = "Dropout"
                        });
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.Payment", b =>
                {
                    b.Property<int>("PaymentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CheckNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CompanyAccountID")
                        .HasColumnType("int");

                    b.Property<int?>("CreditCardID")
                        .HasColumnType("int");

                    b.Property<bool>("HasInvoice")
                        .HasColumnType("bit");

                    b.Property<int>("InstallmentNumber")
                        .HasColumnType("int");

                    b.Property<int?>("InvoiceID")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<int?>("ParentRequestID")
                        .HasColumnType("int");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PaymentReferenceDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PaymentTypeID")
                        .HasColumnType("int");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RequestID")
                        .HasColumnType("int");

                    b.Property<bool>("ShippingPaidHere")
                        .HasColumnType("bit");

                    b.Property<decimal>("Sum")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("PaymentID");

                    b.HasIndex("CompanyAccountID");

                    b.HasIndex("CreditCardID");

                    b.HasIndex("InvoiceID");

                    b.HasIndex("ParentRequestID");

                    b.HasIndex("PaymentTypeID");

                    b.HasIndex("RequestID");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.PaymentStatus", b =>
                {
                    b.Property<int>("PaymentStatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PaymentStatusDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PaymentStatusID");

                    b.ToTable("PaymentStatuses");

                    b.HasData(
                        new
                        {
                            PaymentStatusID = 2,
                            PaymentStatusDescription = "+ 30"
                        },
                        new
                        {
                            PaymentStatusID = 3,
                            PaymentStatusDescription = "Pay Now"
                        },
                        new
                        {
                            PaymentStatusID = 4,
                            PaymentStatusDescription = "Pay Upon Arrival"
                        },
                        new
                        {
                            PaymentStatusID = 5,
                            PaymentStatusDescription = "Installments"
                        },
                        new
                        {
                            PaymentStatusID = 7,
                            PaymentStatusDescription = "Standing Order"
                        },
                        new
                        {
                            PaymentStatusID = 8,
                            PaymentStatusDescription = "Specify Payment Later"
                        });
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.PaymentType", b =>
                {
                    b.Property<int>("PaymentTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PaymentTypeDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PaymentTypeID");

                    b.ToTable("PaymentTypes");

                    b.HasData(
                        new
                        {
                            PaymentTypeID = 1,
                            PaymentTypeDescription = "Credit Card"
                        },
                        new
                        {
                            PaymentTypeID = 2,
                            PaymentTypeDescription = "Check"
                        },
                        new
                        {
                            PaymentTypeID = 3,
                            PaymentTypeDescription = "Wire"
                        });
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.PhysicalAddress", b =>
                {
                    b.Property<int>("PhysicalAddressID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmployeeID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PhysicalAddressID");

                    b.HasIndex("EmployeeID");

                    b.ToTable("PhysicalAddresses");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.Product", b =>
                {
                    b.Property<int>("ProductID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CatalogNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ProductComment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ProductCreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("ProductHebrewName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductMedia")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductSubcategoryID")
                        .HasColumnType("int");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal?>("SubSubUnit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("SubSubUnitTypeID")
                        .HasColumnType("int");

                    b.Property<decimal?>("SubUnit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("SubUnitTypeID")
                        .HasColumnType("int");

                    b.Property<int?>("UnitTypeID")
                        .HasColumnType("int");

                    b.Property<int?>("VendorID")
                        .HasColumnType("int");

                    b.HasKey("ProductID");

                    b.HasIndex("ProductSubcategoryID");

                    b.HasIndex("SerialNumber")
                        .IsUnique()
                        .HasFilter("[SerialNumber] IS NOT NULL");

                    b.HasIndex("SubSubUnitTypeID");

                    b.HasIndex("SubUnitTypeID");

                    b.HasIndex("UnitTypeID");

                    b.HasIndex("VendorID");

                    b.HasIndex("SerialNumber", "VendorID")
                        .IsUnique()
                        .HasFilter("[SerialNumber] IS NOT NULL AND [VendorID] IS NOT NULL");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.ProductComment", b =>
                {
                    b.Property<int>("CommentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CommentText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CommentTimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<int>("CommentTypeID")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("ObjectID")
                        .HasColumnType("int");

                    b.HasKey("CommentID");

                    b.HasIndex("ApplicationUserID");

                    b.HasIndex("CommentTypeID");

                    b.HasIndex("ObjectID");

                    b.ToTable("ProductComments");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.ProductSubcategory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryJson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryJsonID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsOldSubCategory")
                        .HasColumnType("bit");

                    b.Property<int>("ParentCategoryID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ParentCategoryID");

                    b.ToTable("ProductSubcategories");

                    b.HasData(
                        new
                        {
                            ID = 101,
                            CategoryJsonID = 0,
                            Description = "PCR",
                            ImageURL = "/images/css/CategoryImages/consumables/pcr_consumables.png",
                            IsOldSubCategory = false,
                            ParentCategoryID = 1
                        },
                        new
                        {
                            ID = 102,
                            CategoryJsonID = 0,
                            Description = "Cell Culture Plates",
                            ImageURL = "/images/css/CategoryImages/consumables/culture_plates.png",
                            IsOldSubCategory = false,
                            ParentCategoryID = 1
                        },
                        new
                        {
                            ID = 103,
                            CategoryJsonID = 0,
                            Description = "Petri Dish",
                            ImageURL = "/images/css/CategoryImages/consumables/petri_dish.png",
                            IsOldSubCategory = false,
                            ParentCategoryID = 1
                        },
                        new
                        {
                            ID = 104,
                            CategoryJsonID = 0,
                            Description = "Tips",
                            ImageURL = "/images/css/CategoryImages/consumables/tips2.png",
                            IsOldSubCategory = false,
                            ParentCategoryID = 1
                        },
                        new
                        {
                            ID = 105,
                            CategoryJsonID = 0,
                            Description = "Pipets",
                            ImageURL = "/images/css/CategoryImages/consumables/pipettes.png",
                            IsOldSubCategory = false,
                            ParentCategoryID = 1
                        },
                        new
                        {
                            ID = 106,
                            CategoryJsonID = 0,
                            Description = "Tubes",
                            ImageURL = "/images/css/CategoryImages/consumables/tubes.png",
                            IsOldSubCategory = false,
                            ParentCategoryID = 1
                        },
                        new
                        {
                            ID = 107,
                            CategoryJsonID = 0,
                            Description = "Robot Consumables",
                            ImageURL = "/images/css/CategoryImages/consumables/robot_consumables_tips.png",
                            IsOldSubCategory = false,
                            ParentCategoryID = 1
                        },
                        new
                        {
                            ID = 108,
                            CategoryJsonID = 0,
                            Description = "DD-PCR Plastics",
                            ImageURL = "/images/css/CategoryImages/consumables/ddpcr_consumables.png",
                            IsOldSubCategory = false,
                            ParentCategoryID = 1
                        },
                        new
                        {
                            ID = 109,
                            CategoryJsonID = 0,
                            Description = "Q-PCR Plastics",
                            ImageURL = "/images/css/CategoryImages/consumables/rtpcr_consumables.png",
                            IsOldSubCategory = false,
                            ParentCategoryID = 1
                        },
                        new
                        {
                            ID = 110,
                            CategoryJsonID = 0,
                            Description = "FPLC Consumables",
                            ImageURL = "/images/css/CategoryImages/consumables/fplc_consumables.png",
                            IsOldSubCategory = false,
                            ParentCategoryID = 1
                        },
                        new
                        {
                            ID = 111,
                            CategoryJsonID = 0,
                            Description = "TFF Consumables",
                            ImageURL = "/images/css/CategoryImages/consumables/tff_consumables.png",
                            IsOldSubCategory = false,
                            ParentCategoryID = 1
                        },
                        new
                        {
                            ID = 112,
                            CategoryJsonID = 0,
                            Description = "Column",
                            ImageURL = "/images/css/CategoryImages/consumables/column.png",
                            IsOldSubCategory = false,
                            ParentCategoryID = 1
                        },
                        new
                        {
                            ID = 113,
                            CategoryJsonID = 0,
                            Description = "Filtration system",
                            ImageURL = "/images/css/CategoryImages/consumables/filteration_system.png",
                            IsOldSubCategory = false,
                            ParentCategoryID = 1
                        },
                        new
                        {
                            ID = 114,
                            CategoryJsonID = 0,
                            Description = "Flasks",
                            ImageURL = "/images/css/CategoryImages/consumables/flasks.png",
                            IsOldSubCategory = false,
                            ParentCategoryID = 1
                        },
                        new
                        {
                            ID = 115,
                            CategoryJsonID = 0,
                            Description = "Bags",
                            ImageURL = "/images/css/CategoryImages/consumables/bags.png",
                            IsOldSubCategory = false,
                            ParentCategoryID = 1
                        },
                        new
                        {
                            ID = 116,
                            CategoryJsonID = 0,
                            Description = "Syringes",
                            ImageURL = "/images/css/CategoryImages/consumables/syringes.png",
                            IsOldSubCategory = false,
                            ParentCategoryID = 1
                        },
                        new
                        {
                            ID = 117,
                            CategoryJsonID = 0,
                            Description = "Covaris Consumables",
                            ImageURL = "/images/css/CategoryImages/consumables/covaris_consumables.png",
                            IsOldSubCategory = false,
                            ParentCategoryID = 1
                        },
                        new
                        {
                            ID = 118,
                            CategoryJsonID = 0,
                            Description = "Tapestation consumables",
                            ImageURL = "/images/css/CategoryImages/consumables/tapestation_consumables.png",
                            IsOldSubCategory = false,
                            ParentCategoryID = 1
                        },
                        new
                        {
                            ID = 119,
                            CategoryJsonID = 0,
                            Description = "Sequencing",
                            ImageURL = "/images/css/CategoryImages/consumables/sequencing.png",
                            IsOldSubCategory = false,
                            ParentCategoryID = 1
                        },
                        new
                        {
                            ID = 120,
                            CategoryJsonID = 0,
                            Description = "General Consumables",
                            ImageURL = "/images/css/CategoryImages/consumables/general.png",
                            IsOldSubCategory = false,
                            ParentCategoryID = 1
                        },
                        new
                        {
                            ID = 201,
                            CategoryJsonID = 0,
                            Description = "Chemical Powder",
                            ImageURL = "/images/css/CategoryImages/reagents/chemical_powder.png",
                            IsOldSubCategory = false,
                            ParentCategoryID = 2
                        },
                        new
                        {
                            ID = 202,
                            CategoryJsonID = 0,
                            Description = "Antibody",
                            ImageURL = "/images/css/CategoryImages/reagents/antibody.png",
                            IsOldSubCategory = false,
                            ParentCategoryID = 2
                        },
                        new
                        {
                            ID = 203,
                            CategoryJsonID = 0,
                            Description = "Cell Media",
                            ImageURL = "/images/css/CategoryImages/reagents/cell_media.png",
                            IsOldSubCategory = false,
                            ParentCategoryID = 2
                        },
                        new
                        {
                            ID = 204,
                            CategoryJsonID = 0,
                            Description = "",
                            ImageURL = "/images/css/CategoryImages/reagents/chemical_solution2.png",
                            IsOldSubCategory = false,
                            ParentCategoryID = 2
                        },
                        new
                        {
                            ID = 205,
                            CategoryJsonID = 0,
                            Description = "Kit",
                            ImageURL = "/images/css/CategoryImages/reagents/kit.png",
                            IsOldSubCategory = false,
                            ParentCategoryID = 2
                        },
                        new
                        {
                            ID = 206,
                            CategoryJsonID = 0,
                            Description = "PCR Reagents",
                            ImageURL = "/images/css/CategoryImages/reagents/PCR_reagent.png",
                            IsOldSubCategory = false,
                            ParentCategoryID = 2
                        },
                        new
                        {
                            ID = 207,
                            CategoryJsonID = 0,
                            Description = "Q-PCR Reagents",
                            ImageURL = "/images/css/CategoryImages/reagents/ddPCR_reagent2.png",
                            IsOldSubCategory = false,
                            ParentCategoryID = 2
                        },
                        new
                        {
                            ID = 208,
                            CategoryJsonID = 0,
                            Description = "Probes",
                            ImageURL = "/images/css/CategoryImages/reagents/dna_probes2.png",
                            IsOldSubCategory = false,
                            ParentCategoryID = 2
                        },
                        new
                        {
                            ID = 209,
                            CategoryJsonID = 0,
                            Description = "Primers and Oligos",
                            ImageURL = "/images/css/CategoryImages/reagents/primer.png",
                            IsOldSubCategory = false,
                            ParentCategoryID = 2
                        },
                        new
                        {
                            ID = 210,
                            CategoryJsonID = 0,
                            Description = "Cell Media Supplements",
                            ImageURL = "/images/css/CategoryImages/reagents/media_supplement.png",
                            IsOldSubCategory = false,
                            ParentCategoryID = 2
                        },
                        new
                        {
                            ID = 211,
                            CategoryJsonID = 0,
                            Description = "Antibiotics",
                            ImageURL = "/images/css/CategoryImages/reagents/antibiotics.png",
                            IsOldSubCategory = false,
                            ParentCategoryID = 2
                        },
                        new
                        {
                            ID = 212,
                            CategoryJsonID = 0,
                            Description = "Restriction Enzyme",
                            ImageURL = "/images/css/CategoryImages/reagents/restriction_enzyme.png",
                            IsOldSubCategory = false,
                            ParentCategoryID = 2
                        },
                        new
                        {
                            ID = 213,
                            CategoryJsonID = 0,
                            Description = "RNA Enzyme",
                            ImageURL = "/images/css/CategoryImages/reagents/rna_enzyme.png",
                            IsOldSubCategory = false,
                            ParentCategoryID = 2
                        },
                        new
                        {
                            ID = 214,
                            CategoryJsonID = 0,
                            Description = "FPLC Reagent",
                            ImageURL = "/images/css/CategoryImages/reagents/fplc_reagent.png",
                            IsOldSubCategory = false,
                            ParentCategoryID = 2
                        },
                        new
                        {
                            ID = 215,
                            CategoryJsonID = 0,
                            Description = "TFF Reagent",
                            ImageURL = "/images/css/CategoryImages/reagents/TFF_reagent.png",
                            IsOldSubCategory = false,
                            ParentCategoryID = 2
                        },
                        new
                        {
                            ID = 216,
                            CategoryJsonID = 0,
                            Description = "Nucleic Acid Quantitation (DNA/RNA qubit assay, Picogreen assay)",
                            ImageURL = "/images/css/CategoryImages/reagents/nucleic_acid_quantitation.png",
                            IsOldSubCategory = false,
                            ParentCategoryID = 2
                        },
                        new
                        {
                            ID = 217,
                            CategoryJsonID = 0,
                            Description = "General Reagents and Chemicals",
                            ImageURL = "/images/css/CategoryImages/reagents/general_reagents.png",
                            IsOldSubCategory = false,
                            ParentCategoryID = 2
                        },
                        new
                        {
                            ID = 218,
                            CategoryJsonID = 0,
                            Description = "DNA Enzymes",
                            ImageURL = "/images/css/CategoryImages/reagents/dna_enzyme.png",
                            IsOldSubCategory = false,
                            ParentCategoryID = 2
                        },
                        new
                        {
                            ID = 219,
                            CategoryJsonID = 0,
                            Description = "Gas Refilling",
                            ImageURL = "/images/css/CategoryImages/reagents/gas_refilling2.png",
                            IsOldSubCategory = false,
                            ParentCategoryID = 2
                        },
                        new
                        {
                            ID = 220,
                            CategoryJsonID = 0,
                            Description = "DD-PCR Reagents",
                            ImageURL = "/images/css/CategoryImages/reagents/ddPCR_reagent3.png",
                            IsOldSubCategory = false,
                            ParentCategoryID = 2
                        },
                        new
                        {
                            ID = 301,
                            CategoryJsonID = 0,
                            Description = "Cells",
                            ImageURL = "/images/css/CategoryImages/biological/cell1.png",
                            IsOldSubCategory = false,
                            ParentCategoryID = 3
                        },
                        new
                        {
                            ID = 302,
                            CategoryJsonID = 0,
                            Description = "Virus",
                            ImageURL = "/images/css/CategoryImages/biological/virus.png",
                            IsOldSubCategory = false,
                            ParentCategoryID = 3
                        },
                        new
                        {
                            ID = 303,
                            CategoryJsonID = 0,
                            Description = "Plasmid",
                            ImageURL = "/images/css/CategoryImages/biological/plasmid2.png",
                            IsOldSubCategory = false,
                            ParentCategoryID = 3
                        },
                        new
                        {
                            ID = 304,
                            CategoryJsonID = 0,
                            Description = "Bacterial Stock",
                            ImageURL = "/images/css/CategoryImages/biological/bacteria.png",
                            IsOldSubCategory = false,
                            ParentCategoryID = 3
                        },
                        new
                        {
                            ID = 305,
                            CategoryJsonID = 0,
                            Description = "General Biological",
                            ImageURL = "/images/css/CategoryImages/biological/general.png",
                            IsOldSubCategory = false,
                            ParentCategoryID = 3
                        },
                        new
                        {
                            ID = 401,
                            CategoryJsonID = 0,
                            Description = "Reusable",
                            ImageURL = "/images/css/CategoryImages/reusable/all_reusables.png",
                            IsOldSubCategory = false,
                            ParentCategoryID = 4
                        },
                        new
                        {
                            ID = 501,
                            CategoryJsonID = 0,
                            Description = "PPE (Personal Protective Equipment)",
                            ImageURL = "/images/css/CategoryImages/safety/protective_wear.png",
                            IsOldSubCategory = false,
                            ParentCategoryID = 5
                        },
                        new
                        {
                            ID = 502,
                            CategoryJsonID = 0,
                            Description = "Lab Safety",
                            ImageURL = "/images/css/CategoryImages/safety/safety.png",
                            IsOldSubCategory = false,
                            ParentCategoryID = 5
                        },
                        new
                        {
                            ID = 601,
                            CategoryJsonID = 0,
                            Description = "General",
                            ImageURL = "/images/css/CategoryImages/general/general.png",
                            IsOldSubCategory = false,
                            ParentCategoryID = 6
                        },
                        new
                        {
                            ID = 701,
                            CategoryJsonID = 0,
                            Description = "EDTA Tubes",
                            ImageURL = "/images/css/CategoryImages/clinical/edta_tubes3.png",
                            IsOldSubCategory = false,
                            ParentCategoryID = 7
                        },
                        new
                        {
                            ID = 702,
                            CategoryJsonID = 0,
                            Description = "Serum Tubes",
                            ImageURL = "/images/css/CategoryImages/clinical/serum_tubes.png",
                            IsOldSubCategory = false,
                            ParentCategoryID = 7
                        },
                        new
                        {
                            ID = 703,
                            CategoryJsonID = 0,
                            Description = "Sample Collection and Processing (Blood, Saliva Collection, Swabsticks, Sepmate, and Ficoll for PBMC, Extraction kits for DNA/RNA)",
                            ImageURL = "/images/css/CategoryImages/clinical/sample_collection.png",
                            IsOldSubCategory = false,
                            ParentCategoryID = 7
                        },
                        new
                        {
                            ID = 801,
                            CategoryJsonID = 0,
                            Description = "Communications",
                            ImageURL = "/images/css/CategoryImages/it/communications.png",
                            IsOldSubCategory = false,
                            ParentCategoryID = 8
                        },
                        new
                        {
                            ID = 802,
                            CategoryJsonID = 0,
                            Description = "Cybersecurity",
                            ImageURL = "/images/css/CategoryImages/it/cybersecurity.png",
                            IsOldSubCategory = false,
                            ParentCategoryID = 8
                        },
                        new
                        {
                            ID = 803,
                            CategoryJsonID = 0,
                            Description = "Hardware",
                            ImageURL = "/images/css/CategoryImages/it/hardware3.png",
                            IsOldSubCategory = false,
                            ParentCategoryID = 8
                        },
                        new
                        {
                            ID = 804,
                            CategoryJsonID = 0,
                            Description = "General",
                            ImageURL = "/images/css/CategoryImages/it/general.png",
                            IsOldSubCategory = false,
                            ParentCategoryID = 8
                        },
                        new
                        {
                            ID = 901,
                            CategoryJsonID = 0,
                            Description = "Bookeeping",
                            ImageURL = "/images/css/CategoryImages/daytoday/taxes2.png",
                            IsOldSubCategory = false,
                            ParentCategoryID = 9
                        },
                        new
                        {
                            ID = 902,
                            CategoryJsonID = 0,
                            Description = "Books",
                            ImageURL = "/images/css/CategoryImages/daytoday/books.png",
                            IsOldSubCategory = false,
                            ParentCategoryID = 9
                        },
                        new
                        {
                            ID = 903,
                            CategoryJsonID = 0,
                            Description = "Branding",
                            ImageURL = "/images/css/CategoryImages/daytoday/branding.png",
                            IsOldSubCategory = false,
                            ParentCategoryID = 9
                        },
                        new
                        {
                            ID = 904,
                            CategoryJsonID = 0,
                            Description = "Company Events",
                            ImageURL = "/images/css/CategoryImages/daytoday/company_events.png",
                            IsOldSubCategory = false,
                            ParentCategoryID = 9
                        },
                        new
                        {
                            ID = 905,
                            CategoryJsonID = 0,
                            Description = "Electricity",
                            ImageURL = "/images/css/CategoryImages/daytoday/electricity2.png",
                            IsOldSubCategory = false,
                            ParentCategoryID = 9
                        },
                        new
                        {
                            ID = 906,
                            CategoryJsonID = 0,
                            Description = "Fees",
                            ImageURL = "/images/css/CategoryImages/daytoday/fees.png",
                            IsOldSubCategory = false,
                            ParentCategoryID = 9
                        },
                        new
                        {
                            ID = 907,
                            CategoryJsonID = 0,
                            Description = "Food",
                            ImageURL = "/images/css/CategoryImages/daytoday/food.png",
                            IsOldSubCategory = false,
                            ParentCategoryID = 9
                        },
                        new
                        {
                            ID = 908,
                            CategoryJsonID = 0,
                            Description = "Furniture",
                            ImageURL = "/images/css/CategoryImages/daytoday/furniture2.png",
                            IsOldSubCategory = false,
                            ParentCategoryID = 9
                        },
                        new
                        {
                            ID = 909,
                            CategoryJsonID = 0,
                            Description = "General Day To Day",
                            ImageURL = "/images/css/CategoryImages/daytoday/general.png",
                            IsOldSubCategory = false,
                            ParentCategoryID = 9
                        },
                        new
                        {
                            ID = 910,
                            CategoryJsonID = 0,
                            Description = "Graphic",
                            ImageURL = "/images/css/CategoryImages/daytoday/graphics.png",
                            IsOldSubCategory = false,
                            ParentCategoryID = 9
                        },
                        new
                        {
                            ID = 911,
                            CategoryJsonID = 0,
                            Description = "Insurance",
                            ImageURL = "/images/css/CategoryImages/daytoday/insurance.png",
                            IsOldSubCategory = false,
                            ParentCategoryID = 9
                        },
                        new
                        {
                            ID = 912,
                            CategoryJsonID = 0,
                            Description = "Parking",
                            ImageURL = "/images/css/CategoryImages/daytoday/parking2.png",
                            IsOldSubCategory = false,
                            ParentCategoryID = 9
                        },
                        new
                        {
                            ID = 913,
                            CategoryJsonID = 0,
                            Description = "Renovation",
                            ImageURL = "/images/css/CategoryImages/daytoday/renovation.png",
                            IsOldSubCategory = false,
                            ParentCategoryID = 9
                        },
                        new
                        {
                            ID = 914,
                            CategoryJsonID = 0,
                            Description = "Rent",
                            ImageURL = "/images/css/CategoryImages/daytoday/rent2.png",
                            IsOldSubCategory = false,
                            ParentCategoryID = 9
                        },
                        new
                        {
                            ID = 915,
                            CategoryJsonID = 0,
                            Description = "Shipment",
                            ImageURL = "/images/css/CategoryImages/daytoday/shippment.png",
                            IsOldSubCategory = false,
                            ParentCategoryID = 9
                        },
                        new
                        {
                            ID = 1001,
                            CategoryJsonID = 0,
                            Description = "Conference",
                            ImageURL = "/images/css/CategoryImages/travel/conference3.png",
                            IsOldSubCategory = false,
                            ParentCategoryID = 10
                        },
                        new
                        {
                            ID = 1002,
                            CategoryJsonID = 0,
                            Description = "Flight Tickets",
                            ImageURL = "/images/css/CategoryImages/travel/flight_tickets.png",
                            IsOldSubCategory = false,
                            ParentCategoryID = 10
                        },
                        new
                        {
                            ID = 1003,
                            CategoryJsonID = 0,
                            Description = "Food",
                            ImageURL = "/images/css/CategoryImages/travel/food.png",
                            IsOldSubCategory = false,
                            ParentCategoryID = 10
                        },
                        new
                        {
                            ID = 1004,
                            CategoryJsonID = 0,
                            Description = "Hotels",
                            ImageURL = "/images/css/CategoryImages/travel/hotels3.png",
                            IsOldSubCategory = false,
                            ParentCategoryID = 10
                        },
                        new
                        {
                            ID = 1005,
                            CategoryJsonID = 0,
                            Description = "General Travel",
                            ImageURL = "/images/css/CategoryImages/travel/travel.png",
                            IsOldSubCategory = false,
                            ParentCategoryID = 10
                        },
                        new
                        {
                            ID = 1006,
                            CategoryJsonID = 0,
                            Description = "General",
                            ImageURL = "/images/css/CategoryImages/travel/general.png",
                            IsOldSubCategory = false,
                            ParentCategoryID = 10
                        },
                        new
                        {
                            ID = 1101,
                            CategoryJsonID = 0,
                            Description = "Business Advice",
                            ImageURL = "/images/css/CategoryImages/advice/business_advice.png",
                            IsOldSubCategory = false,
                            ParentCategoryID = 11
                        },
                        new
                        {
                            ID = 1102,
                            CategoryJsonID = 0,
                            Description = "Clinical Regulations",
                            ImageURL = "/images/css/CategoryImages/advice/clinical_regulation2.png",
                            IsOldSubCategory = false,
                            ParentCategoryID = 11
                        },
                        new
                        {
                            ID = 1103,
                            CategoryJsonID = 0,
                            Description = "General",
                            ImageURL = "/images/css/CategoryImages/advice/general.png",
                            IsOldSubCategory = false,
                            ParentCategoryID = 11
                        },
                        new
                        {
                            ID = 1104,
                            CategoryJsonID = 0,
                            Description = "Legal",
                            ImageURL = "/images/css/CategoryImages/advice/legal.png",
                            IsOldSubCategory = false,
                            ParentCategoryID = 11
                        },
                        new
                        {
                            ID = 1105,
                            CategoryJsonID = 0,
                            Description = "Scientific Advice",
                            ImageURL = "/images/css/CategoryImages/advice/scientific_advice3.png",
                            IsOldSubCategory = false,
                            ParentCategoryID = 11
                        },
                        new
                        {
                            ID = 1201,
                            CategoryJsonID = 0,
                            Description = "Regulations",
                            ImageURL = "/images/css/CategoryImages/regulations/regulations.png",
                            IsOldSubCategory = false,
                            ParentCategoryID = 12
                        },
                        new
                        {
                            ID = 1202,
                            CategoryJsonID = 0,
                            Description = "Safety",
                            ImageURL = "/images/css/CategoryImages/regulations/safety.png",
                            IsOldSubCategory = false,
                            ParentCategoryID = 12
                        },
                        new
                        {
                            ID = 1203,
                            CategoryJsonID = 0,
                            Description = "General",
                            ImageURL = "/images/css/CategoryImages/regulations/general.png",
                            IsOldSubCategory = false,
                            ParentCategoryID = 12
                        },
                        new
                        {
                            ID = 1301,
                            CategoryJsonID = 0,
                            Description = "Taxes",
                            ImageURL = "/images/css/CategoryImages/government/taxes4.png",
                            IsOldSubCategory = false,
                            ParentCategoryID = 13
                        },
                        new
                        {
                            ID = 1302,
                            CategoryJsonID = 0,
                            Description = "General",
                            ImageURL = "/images/css/CategoryImages/government/general.png",
                            IsOldSubCategory = false,
                            ParentCategoryID = 13
                        },
                        new
                        {
                            ID = 1401,
                            CategoryJsonID = 0,
                            Description = "Virus",
                            ImageURL = "/images/css/CategoryImages/samples/virus.png",
                            IsOldSubCategory = false,
                            ParentCategoryID = 14
                        },
                        new
                        {
                            ID = 1402,
                            CategoryJsonID = 0,
                            Description = "Plasmid",
                            ImageURL = "/images/css/CategoryImages/samples/plasmid.png",
                            IsOldSubCategory = false,
                            ParentCategoryID = 14
                        },
                        new
                        {
                            ID = 1403,
                            CategoryJsonID = 0,
                            Description = "Probes",
                            ImageURL = "/images/css/CategoryImages/samples/dna_probes2.png",
                            IsOldSubCategory = false,
                            ParentCategoryID = 14
                        },
                        new
                        {
                            ID = 1404,
                            CategoryJsonID = 0,
                            Description = "Cells",
                            ImageURL = "/images/css/CategoryImages/samples/cell1.png",
                            IsOldSubCategory = false,
                            ParentCategoryID = 14
                        },
                        new
                        {
                            ID = 1405,
                            CategoryJsonID = 0,
                            Description = "Bacteria with Plasmids",
                            ImageURL = "/images/css/CategoryImages/samples/bacteria2.png",
                            IsOldSubCategory = false,
                            ParentCategoryID = 14
                        },
                        new
                        {
                            ID = 1406,
                            CategoryJsonID = 0,
                            Description = "Blood",
                            ImageURL = "/images/css/CategoryImages/samples/blood.png",
                            IsOldSubCategory = false,
                            ParentCategoryID = 14
                        },
                        new
                        {
                            ID = 1407,
                            CategoryJsonID = 0,
                            Description = "Serum",
                            ImageURL = "/images/css/CategoryImages/samples/serum.png",
                            IsOldSubCategory = false,
                            ParentCategoryID = 14
                        },
                        new
                        {
                            ID = 1408,
                            CategoryJsonID = 0,
                            Description = "Buffer",
                            ImageURL = "/images/css/CategoryImages/samples/buffer2.png",
                            IsOldSubCategory = false,
                            ParentCategoryID = 14
                        },
                        new
                        {
                            ID = 1409,
                            CategoryJsonID = 0,
                            Description = "Media",
                            ImageURL = "/images/css/CategoryImages/samples/media2.png",
                            IsOldSubCategory = false,
                            ParentCategoryID = 14
                        },
                        new
                        {
                            ID = 1501,
                            CategoryJsonID = 0,
                            Description = "Old Sub category",
                            ImageURL = "/images/css/CategoryImages/consumables/general.png",
                            IsOldSubCategory = true,
                            ParentCategoryID = 1
                        },
                        new
                        {
                            ID = 1502,
                            CategoryJsonID = 0,
                            Description = "Old Sub category",
                            ImageURL = "/images/css/CategoryImages/reagents/general_reagents.png",
                            IsOldSubCategory = true,
                            ParentCategoryID = 2
                        },
                        new
                        {
                            ID = 1503,
                            CategoryJsonID = 0,
                            Description = "Old Sub category",
                            ImageURL = "/images/css/CategoryImages/biological/general.png",
                            IsOldSubCategory = true,
                            ParentCategoryID = 3
                        },
                        new
                        {
                            ID = 1504,
                            CategoryJsonID = 0,
                            Description = "Old Sub category",
                            ImageURL = "/images/css/CategoryImages/reusable/all_reusables.png",
                            IsOldSubCategory = true,
                            ParentCategoryID = 4
                        },
                        new
                        {
                            ID = 1505,
                            CategoryJsonID = 0,
                            Description = "Old Sub category",
                            ImageURL = "/images/css/CategoryImages/safety/safety.png",
                            IsOldSubCategory = true,
                            ParentCategoryID = 5
                        });
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.Project", b =>
                {
                    b.Property<int>("ProjectID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ProjectDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProjectID");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            ProjectID = 1,
                            ProjectDescription = "Rejuvenation"
                        },
                        new
                        {
                            ProjectID = 2,
                            ProjectDescription = "Delivery Systems"
                        },
                        new
                        {
                            ProjectID = 3,
                            ProjectDescription = "Biomarkers"
                        },
                        new
                        {
                            ProjectID = 4,
                            ProjectDescription = "Clinical Trials"
                        },
                        new
                        {
                            ProjectID = 5,
                            ProjectDescription = "General"
                        });
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.Protocol", b =>
                {
                    b.Property<int>("ProtocolID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProtocolSubCategoryID")
                        .HasColumnType("int");

                    b.Property<int>("ProtocolTypeID")
                        .HasColumnType("int");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Theory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UniqueCode")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ProtocolID");

                    b.HasIndex("ProtocolSubCategoryID");

                    b.HasIndex("ProtocolTypeID");

                    b.HasIndex("UniqueCode")
                        .IsUnique()
                        .HasFilter("[UniqueCode] IS NOT NULL");

                    b.ToTable("Protocols");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.ProtocolCategory", b =>
                {
                    b.Property<int>("ProtocolCategoryTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ProtocolCategoryDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProtocolCategoryTypeID");

                    b.ToTable("ProtocolCategories");

                    b.HasData(
                        new
                        {
                            ProtocolCategoryTypeID = 1,
                            ProtocolCategoryDescription = "Rejuvenation"
                        },
                        new
                        {
                            ProtocolCategoryTypeID = 2,
                            ProtocolCategoryDescription = "Biomarkers"
                        },
                        new
                        {
                            ProtocolCategoryTypeID = 3,
                            ProtocolCategoryDescription = "Delivery Systems"
                        });
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.ProtocolComment", b =>
                {
                    b.Property<int>("CommentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CommentText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CommentTimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<int>("CommentTypeID")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("ObjectID")
                        .HasColumnType("int");

                    b.HasKey("CommentID");

                    b.HasIndex("ApplicationUserID");

                    b.HasIndex("CommentTypeID");

                    b.HasIndex("ObjectID");

                    b.ToTable("ProtocolComments");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.ProtocolInstance", b =>
                {
                    b.Property<int>("ProtocolInstanceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CurrentLineID")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsFinished")
                        .HasColumnType("bit");

                    b.Property<int>("ProtocolVersionID")
                        .HasColumnType("int");

                    b.Property<string>("ResultDescription")
                        .HasColumnType("ntext");

                    b.Property<bool>("ResultsReported")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TemporaryResultDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProtocolInstanceID");

                    b.HasIndex("ApplicationUserID");

                    b.HasIndex("CurrentLineID");

                    b.HasIndex("ProtocolVersionID");

                    b.ToTable("ProtocolInstances");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.ProtocolSubCategory", b =>
                {
                    b.Property<int>("ProtocolSubCategoryTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProtocolCategoryTypeID")
                        .HasColumnType("int");

                    b.Property<string>("ProtocolSubCategoryTypeDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProtocolSubCategoryTypeID");

                    b.HasIndex("ProtocolCategoryTypeID");

                    b.ToTable("ProtocolSubCategories");

                    b.HasData(
                        new
                        {
                            ProtocolSubCategoryTypeID = 1,
                            ProtocolCategoryTypeID = 1,
                            ProtocolSubCategoryTypeDescription = "Telomeres "
                        },
                        new
                        {
                            ProtocolSubCategoryTypeID = 2,
                            ProtocolCategoryTypeID = 1,
                            ProtocolSubCategoryTypeDescription = "Epigenetics"
                        },
                        new
                        {
                            ProtocolSubCategoryTypeID = 3,
                            ProtocolCategoryTypeID = 2,
                            ProtocolSubCategoryTypeDescription = "Telomeres "
                        },
                        new
                        {
                            ProtocolSubCategoryTypeID = 4,
                            ProtocolCategoryTypeID = 2,
                            ProtocolSubCategoryTypeDescription = "Transcription"
                        },
                        new
                        {
                            ProtocolSubCategoryTypeID = 5,
                            ProtocolCategoryTypeID = 2,
                            ProtocolSubCategoryTypeDescription = "Methylation"
                        },
                        new
                        {
                            ProtocolSubCategoryTypeID = 6,
                            ProtocolCategoryTypeID = 3,
                            ProtocolSubCategoryTypeDescription = "AAV"
                        });
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.ProtocolType", b =>
                {
                    b.Property<int>("ProtocolTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ProtocolTypeDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProtocolTypeID");

                    b.ToTable("ProtocolTypes");

                    b.HasData(
                        new
                        {
                            ProtocolTypeID = 1,
                            ProtocolTypeDescription = "Research"
                        },
                        new
                        {
                            ProtocolTypeID = 2,
                            ProtocolTypeDescription = "Kit"
                        },
                        new
                        {
                            ProtocolTypeID = 3,
                            ProtocolTypeDescription = "SOP"
                        },
                        new
                        {
                            ProtocolTypeID = 4,
                            ProtocolTypeDescription = "Buffer"
                        },
                        new
                        {
                            ProtocolTypeID = 5,
                            ProtocolTypeDescription = "Robiotic"
                        },
                        new
                        {
                            ProtocolTypeID = 6,
                            ProtocolTypeDescription = "Maintenance"
                        });
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.ProtocolVersion", b =>
                {
                    b.Property<int>("ProtocolVersionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserCreatorID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProtocolID")
                        .HasColumnType("int");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Theory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VersionNumber")
                        .HasColumnType("int");

                    b.HasKey("ProtocolVersionID");

                    b.HasIndex("ApplicationUserCreatorID");

                    b.HasIndex("ProtocolID", "VersionNumber")
                        .IsUnique();

                    b.ToTable("ProtocolVersions");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.QuoteStatus", b =>
                {
                    b.Property<int>("QuoteStatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("QuoteStatusDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("QuoteStatusID");

                    b.ToTable("QuoteStatuses");

                    b.HasData(
                        new
                        {
                            QuoteStatusID = -1,
                            QuoteStatusDescription = "NoStatus"
                        },
                        new
                        {
                            QuoteStatusID = 1,
                            QuoteStatusDescription = "AwaitingRequestOfQuote"
                        },
                        new
                        {
                            QuoteStatusID = 2,
                            QuoteStatusDescription = "AwaitingQuoteResponse"
                        },
                        new
                        {
                            QuoteStatusID = 3,
                            QuoteStatusDescription = "AwaitingQuoteOrder"
                        },
                        new
                        {
                            QuoteStatusID = 4,
                            QuoteStatusDescription = "QuoteRecieved"
                        });
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.Report", b =>
                {
                    b.Property<int>("ReportID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<int>("ReportCategoryID")
                        .HasColumnType("int");

                    b.Property<string>("ReportNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReportText")
                        .HasColumnType("ntext");

                    b.Property<string>("ReportTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReportTypeID")
                        .HasColumnType("int");

                    b.Property<string>("TemporaryReportText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WeekNumber")
                        .HasColumnType("int");

                    b.HasKey("ReportID");

                    b.HasIndex("ReportCategoryID");

                    b.HasIndex("ReportTypeID");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.ReportType", b =>
                {
                    b.Property<int>("ReportTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ReportTypeDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ReportTypeID");

                    b.ToTable("ReportTypes");

                    b.HasData(
                        new
                        {
                            ReportTypeID = 1,
                            ReportTypeDescription = "Daily"
                        },
                        new
                        {
                            ReportTypeID = 2,
                            ReportTypeDescription = "Weekly"
                        },
                        new
                        {
                            ReportTypeID = 3,
                            ReportTypeDescription = "Monthly"
                        });
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.Request", b =>
                {
                    b.Property<int>("RequestID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Amount")
                        .HasColumnType("int");

                    b.Property<string>("ApplicationUserCreatorID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ApplicationUserReceiverID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ArrivalDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Batch")
                        .HasColumnType("int");

                    b.Property<DateTime?>("BatchExpiration")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Currency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("DevelopersBoolean")
                        .HasColumnType("bit");

                    b.Property<decimal>("ExchangeRate")
                        .HasColumnType("decimal(18,3)");

                    b.Property<byte?>("ExpectedSupplyDays")
                        .HasColumnType("tinyint");

                    b.Property<bool>("IncludeVAT")
                        .HasColumnType("bit");

                    b.Property<long?>("Installments")
                        .HasColumnType("bigint");

                    b.Property<int?>("InvoiceID")
                        .HasColumnType("int");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<bool>("IsClarify")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInInventory")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPartial")
                        .HasColumnType("bit");

                    b.Property<string>("NoteForClarifyDelivery")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentQuoteID")
                        .HasColumnType("int");

                    b.Property<int?>("ParentRequestID")
                        .HasColumnType("int");

                    b.Property<int?>("Passage")
                        .HasColumnType("int");

                    b.Property<int?>("PaymentStatusID")
                        .HasColumnType("int");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<int?>("QuoteStatusID")
                        .HasColumnType("int");

                    b.Property<int>("RequestStatusID")
                        .HasColumnType("int");

                    b.Property<int>("SerialNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("NEXT VALUE FOR dbo.SerialNumberHelper");

                    b.Property<int?>("SubProjectID")
                        .HasColumnType("int");

                    b.Property<int?>("Terms")
                        .HasColumnType("int");

                    b.Property<string>("URL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Unit")
                        .HasColumnType("bigint");

                    b.Property<byte?>("Warranty")
                        .HasColumnType("tinyint");

                    b.HasKey("RequestID");

                    b.HasIndex("ApplicationUserCreatorID");

                    b.HasIndex("ApplicationUserReceiverID");

                    b.HasIndex("InvoiceID");

                    b.HasIndex("ParentQuoteID");

                    b.HasIndex("ParentRequestID");

                    b.HasIndex("PaymentStatusID");

                    b.HasIndex("ProductID");

                    b.HasIndex("QuoteStatusID");

                    b.HasIndex("RequestStatusID");

                    b.HasIndex("SerialNumber")
                        .IsUnique();

                    b.HasIndex("SubProjectID");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.RequestComment", b =>
                {
                    b.Property<int>("CommentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CommentText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CommentTimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<int>("CommentTypeID")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("ObjectID")
                        .HasColumnType("int");

                    b.HasKey("CommentID");

                    b.HasIndex("ApplicationUserID");

                    b.HasIndex("CommentTypeID");

                    b.HasIndex("ObjectID");

                    b.ToTable("RequestComments");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.RequestList", b =>
                {
                    b.Property<int>("ListID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserOwnerID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ListID");

                    b.HasIndex("ApplicationUserOwnerID");

                    b.ToTable("RequestLists");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.RequestListRequest", b =>
                {
                    b.Property<int>("ListID")
                        .HasColumnType("int");

                    b.Property<int>("RequestID")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.HasKey("ListID", "RequestID");

                    b.HasIndex("RequestID");

                    b.ToTable("RequestListRequests");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.RequestLocationInstance", b =>
                {
                    b.Property<int>("RequestID")
                        .HasColumnType("int");

                    b.Property<int>("LocationInstanceID")
                        .HasColumnType("int");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<int?>("ParentLocationInstanceID")
                        .HasColumnType("int");

                    b.HasKey("RequestID", "LocationInstanceID");

                    b.HasIndex("LocationInstanceID");

                    b.HasIndex("ParentLocationInstanceID");

                    b.ToTable("RequestLocationInstances");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.RequestNotification", b =>
                {
                    b.Property<int>("NotificationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Action")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApplicationUserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Controller")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<DateTime>("NotificationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("NotificationStatusID")
                        .HasColumnType("int");

                    b.Property<int>("RequestID")
                        .HasColumnType("int");

                    b.Property<string>("RequestName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TimeStamp")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Vendor")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NotificationID");

                    b.HasIndex("ApplicationUserID");

                    b.HasIndex("NotificationStatusID");

                    b.HasIndex("RequestID");

                    b.ToTable("RequestNotifications");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.RequestStatus", b =>
                {
                    b.Property<int>("RequestStatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RequestStatusDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RequestStatusID");

                    b.ToTable("RequestStatuses");

                    b.HasData(
                        new
                        {
                            RequestStatusID = 1,
                            RequestStatusDescription = "New"
                        },
                        new
                        {
                            RequestStatusID = 2,
                            RequestStatusDescription = "Ordered"
                        },
                        new
                        {
                            RequestStatusID = 3,
                            RequestStatusDescription = "RecievedAndIsInventory"
                        },
                        new
                        {
                            RequestStatusID = 6,
                            RequestStatusDescription = "Approved"
                        },
                        new
                        {
                            RequestStatusID = 7,
                            RequestStatusDescription = "Saved To Inventory"
                        });
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.Resource", b =>
                {
                    b.Property<int>("ResourceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserCreatorID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstAuthor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPersonal")
                        .HasColumnType("bit");

                    b.Property<string>("Journal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastAuthor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PubMedID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ResourceTypeID")
                        .HasColumnType("int");

                    b.Property<string>("Summary")
                        .HasColumnType("ntext");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ResourceID");

                    b.HasIndex("ApplicationUserCreatorID");

                    b.HasIndex("ResourceTypeID");

                    b.ToTable("Resources");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.ResourceCategory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryJson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryJsonID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsMain")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReportsCategory")
                        .HasColumnType("bit");

                    b.Property<bool>("IsResourceType")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.ToTable("ResourceCategories");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CategoryJsonID = 0,
                            Description = "Rejuvenation",
                            ImageUrl = "rejuvenation_image.svg",
                            IsMain = true,
                            IsReportsCategory = true,
                            IsResourceType = false
                        },
                        new
                        {
                            ID = 2,
                            CategoryJsonID = 0,
                            Description = "Biomarkers",
                            ImageUrl = "biomarkers_image.svg",
                            IsMain = true,
                            IsReportsCategory = true,
                            IsResourceType = false
                        },
                        new
                        {
                            ID = 3,
                            CategoryJsonID = 0,
                            Description = "Delivery Systems",
                            ImageUrl = "delivery_systems_image.svg",
                            IsMain = true,
                            IsReportsCategory = true,
                            IsResourceType = false
                        },
                        new
                        {
                            ID = 4,
                            CategoryJsonID = 0,
                            Description = "Clinical Trials",
                            ImageUrl = "clinical_trials_image.svg",
                            IsMain = true,
                            IsReportsCategory = false,
                            IsResourceType = false
                        },
                        new
                        {
                            ID = 5,
                            CategoryJsonID = 0,
                            Description = "AAV",
                            IsMain = false,
                            IsReportsCategory = false,
                            IsResourceType = false
                        },
                        new
                        {
                            ID = 6,
                            CategoryJsonID = 0,
                            Description = "Telomere Rejuvenation",
                            IsMain = false,
                            IsReportsCategory = false,
                            IsResourceType = false
                        },
                        new
                        {
                            ID = 7,
                            CategoryJsonID = 0,
                            Description = "Telomere Measurement",
                            IsMain = false,
                            IsReportsCategory = false,
                            IsResourceType = false
                        },
                        new
                        {
                            ID = 8,
                            CategoryJsonID = 0,
                            Description = "Methylation Biomarker",
                            IsMain = false,
                            IsReportsCategory = false,
                            IsResourceType = false
                        },
                        new
                        {
                            ID = 9,
                            CategoryJsonID = 0,
                            Description = "Transcriptome",
                            IsMain = false,
                            IsReportsCategory = false,
                            IsResourceType = false
                        },
                        new
                        {
                            ID = 10,
                            CategoryJsonID = 0,
                            Description = "Serum Rejuvenation",
                            IsMain = false,
                            IsReportsCategory = false,
                            IsResourceType = false
                        },
                        new
                        {
                            ID = 11,
                            CategoryJsonID = 0,
                            Description = "Reprogramming",
                            IsMain = false,
                            IsReportsCategory = false,
                            IsResourceType = false
                        },
                        new
                        {
                            ID = 12,
                            CategoryJsonID = 0,
                            Description = "Methylation Rejuvenation",
                            IsMain = false,
                            IsReportsCategory = false,
                            IsResourceType = false
                        },
                        new
                        {
                            ID = 13,
                            CategoryJsonID = 0,
                            Description = "New Methods",
                            IsMain = false,
                            IsReportsCategory = false,
                            IsResourceType = false
                        },
                        new
                        {
                            ID = 14,
                            CategoryJsonID = 0,
                            Description = "Software",
                            ImageUrl = "software_image.svg",
                            IsMain = false,
                            IsReportsCategory = false,
                            IsResourceType = true
                        },
                        new
                        {
                            ID = 15,
                            CategoryJsonID = 0,
                            Description = "Learning",
                            ImageUrl = "learning_image.svg",
                            IsMain = false,
                            IsReportsCategory = false,
                            IsResourceType = true
                        },
                        new
                        {
                            ID = 16,
                            CategoryJsonID = 0,
                            Description = "Companies",
                            ImageUrl = "companies_image.svg",
                            IsMain = false,
                            IsReportsCategory = false,
                            IsResourceType = true
                        },
                        new
                        {
                            ID = 17,
                            CategoryJsonID = 0,
                            Description = "News",
                            ImageUrl = "news_image.svg",
                            IsMain = false,
                            IsReportsCategory = false,
                            IsResourceType = true
                        });
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.ResourceNote", b =>
                {
                    b.Property<int>("ResourceNoteID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Note")
                        .HasColumnType("ntext");

                    b.Property<int>("ResourceID")
                        .HasColumnType("int");

                    b.HasKey("ResourceNoteID");

                    b.HasIndex("ResourceID");

                    b.ToTable("ResourceNotes");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.ResourceResourceCategory", b =>
                {
                    b.Property<int>("ResourceID")
                        .HasColumnType("int");

                    b.Property<int>("ResourceCategoryID")
                        .HasColumnType("int");

                    b.HasKey("ResourceID", "ResourceCategoryID");

                    b.HasIndex("ResourceCategoryID");

                    b.ToTable("ResourceResourceCategory");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.ResourceType", b =>
                {
                    b.Property<int>("ResourceTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ResourceTypeDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ResourceTypeId");

                    b.ToTable("ResourceTypes");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.SalariedEmployee", b =>
                {
                    b.Property<int>("SalariedEmployeeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EmployeeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("HoursPerDay")
                        .HasColumnType("float");

                    b.HasKey("SalariedEmployeeID");

                    b.HasIndex("EmployeeId")
                        .IsUnique()
                        .HasFilter("[EmployeeId] IS NOT NULL");

                    b.ToTable("SalariedEmployees");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.ShareProtocol", b =>
                {
                    b.Property<int>("ShareID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FromApplicationUserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ObjectID")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeStamp")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("ToApplicationUserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ShareID");

                    b.HasIndex("FromApplicationUserID");

                    b.HasIndex("ObjectID");

                    b.HasIndex("ToApplicationUserID");

                    b.ToTable("ShareProtocols");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.ShareRequest", b =>
                {
                    b.Property<int>("ShareID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FromApplicationUserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ObjectID")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeStamp")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("ToApplicationUserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ShareID");

                    b.HasIndex("FromApplicationUserID");

                    b.HasIndex("ObjectID");

                    b.HasIndex("ToApplicationUserID");

                    b.ToTable("ShareRequests");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.ShareRequestList", b =>
                {
                    b.Property<int>("ShareID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FromApplicationUserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ObjectID")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeStamp")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("ToApplicationUserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("ViewOnly")
                        .HasColumnType("bit");

                    b.HasKey("ShareID");

                    b.HasIndex("FromApplicationUserID");

                    b.HasIndex("ObjectID");

                    b.HasIndex("ToApplicationUserID");

                    b.ToTable("ShareRequestLists");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.ShareResource", b =>
                {
                    b.Property<int>("ShareID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FromApplicationUserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ObjectID")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeStamp")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("ToApplicationUserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ShareID");

                    b.HasIndex("FromApplicationUserID");

                    b.HasIndex("ObjectID");

                    b.HasIndex("ToApplicationUserID");

                    b.ToTable("ShareResources");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.Site", b =>
                {
                    b.Property<int>("SiteID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Line1Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrimaryContactID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("SiteID");

                    b.HasIndex("PrimaryContactID");

                    b.ToTable("Sites");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.SubProject", b =>
                {
                    b.Property<int>("SubProjectID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProjectID")
                        .HasColumnType("int");

                    b.Property<string>("SubProjectDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SubProjectID");

                    b.HasIndex("ProjectID");

                    b.ToTable("SubProjects");

                    b.HasData(
                        new
                        {
                            SubProjectID = 101,
                            ProjectID = 1,
                            SubProjectDescription = "General"
                        },
                        new
                        {
                            SubProjectID = 102,
                            ProjectID = 1,
                            SubProjectDescription = "Epigenetic Rejuvenation"
                        },
                        new
                        {
                            SubProjectID = 103,
                            ProjectID = 1,
                            SubProjectDescription = "Plasma Rejuvenation"
                        },
                        new
                        {
                            SubProjectID = 201,
                            ProjectID = 2,
                            SubProjectDescription = "General"
                        },
                        new
                        {
                            SubProjectID = 202,
                            ProjectID = 2,
                            SubProjectDescription = "AAV"
                        },
                        new
                        {
                            SubProjectID = 301,
                            ProjectID = 3,
                            SubProjectDescription = "General"
                        },
                        new
                        {
                            SubProjectID = 302,
                            ProjectID = 3,
                            SubProjectDescription = "Epigenetic Clock"
                        },
                        new
                        {
                            SubProjectID = 303,
                            ProjectID = 3,
                            SubProjectDescription = "Telomere Measurement"
                        },
                        new
                        {
                            SubProjectID = 401,
                            ProjectID = 4,
                            SubProjectDescription = "General"
                        },
                        new
                        {
                            SubProjectID = 402,
                            ProjectID = 4,
                            SubProjectDescription = "Biomarker Trial"
                        },
                        new
                        {
                            SubProjectID = 501,
                            ProjectID = 5,
                            SubProjectDescription = "General"
                        });
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.Tag", b =>
                {
                    b.Property<int>("TagID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TagDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TagID");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.TagProtocol", b =>
                {
                    b.Property<int>("TagID")
                        .HasColumnType("int");

                    b.Property<int>("ProtocolID")
                        .HasColumnType("int");

                    b.HasKey("TagID", "ProtocolID");

                    b.HasIndex("ProtocolID");

                    b.ToTable("TagProtocols");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.TempLineID", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("ID");

                    b.ToTable("TempLineIDs");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.TempLinesJson", b =>
                {
                    b.Property<Guid>("TempLinesJsonID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Json")
                        .HasColumnType("ntext");

                    b.HasKey("TempLinesJsonID");

                    b.ToTable("TempLinesJsons");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.TempReportJson", b =>
                {
                    b.Property<Guid>("TempReportJsonID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Json")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TempReportJsonID");

                    b.ToTable("TempReportJsons");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.TempRequestJson", b =>
                {
                    b.Property<int>("TempRequestJsonID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("GuidID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsCurrent")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOriginal")
                        .HasColumnType("bit");

                    b.Property<string>("Json")
                        .HasColumnType("ntext");

                    b.Property<int>("SequencePosition")
                        .HasColumnType("int");

                    b.HasKey("TempRequestJsonID");

                    b.HasIndex("ApplicationUserID");

                    b.ToTable("TempRequestJsons");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.TempResultsJson", b =>
                {
                    b.Property<Guid>("TempResultsJsonID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Json")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TempResultsJsonID");

                    b.ToTable("TempResultsJsons");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.Test", b =>
                {
                    b.Property<int>("TestID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SiteID")
                        .HasColumnType("int");

                    b.Property<int?>("TestCategoryID")
                        .HasColumnType("int");

                    b.HasKey("TestID");

                    b.HasIndex("SiteID");

                    b.HasIndex("TestCategoryID");

                    b.ToTable("Tests");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.TestCategory", b =>
                {
                    b.Property<int>("TestCategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DivisionID")
                        .HasColumnType("int");

                    b.HasKey("TestCategoryID");

                    b.HasIndex("DivisionID");

                    b.ToTable("TestCategories");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.TestGroup", b =>
                {
                    b.Property<int>("TestGroupID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsNone")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SequencePosition")
                        .HasColumnType("int");

                    b.Property<int>("TestOuterGroupID")
                        .HasColumnType("int");

                    b.HasKey("TestGroupID");

                    b.HasIndex("TestOuterGroupID");

                    b.ToTable("TestGroups");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.TestHeader", b =>
                {
                    b.Property<int>("TestHeaderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Calculation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsSkip")
                        .HasColumnType("bit");

                    b.Property<string>("List")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SequencePosition")
                        .HasColumnType("int");

                    b.Property<int>("TestGroupID")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TestHeaderID");

                    b.HasIndex("TestGroupID");

                    b.HasIndex("SequencePosition", "TestGroupID")
                        .IsUnique();

                    b.ToTable("TestHeaders");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.TestOuterGroup", b =>
                {
                    b.Property<int>("TestOuterGroupID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsNone")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SequencePosition")
                        .HasColumnType("int");

                    b.Property<int>("TestID")
                        .HasColumnType("int");

                    b.HasKey("TestOuterGroupID");

                    b.HasIndex("TestID");

                    b.ToTable("TestOuterGroups");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.TestValue", b =>
                {
                    b.Property<int>("TestValueID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ExperimentEntryID")
                        .HasColumnType("int");

                    b.Property<int>("TestHeaderID")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TestValueID");

                    b.HasIndex("ExperimentEntryID");

                    b.HasIndex("TestHeaderID");

                    b.ToTable("TestValues");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.TimekeeperNotification", b =>
                {
                    b.Property<int>("NotificationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Action")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApplicationUserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Controller")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployeeHoursID")
                        .HasColumnType("int");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<DateTime>("NotificationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("NotificationStatusID")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeStamp")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("NotificationID");

                    b.HasIndex("ApplicationUserID");

                    b.HasIndex("EmployeeHoursID");

                    b.HasIndex("NotificationStatusID");

                    b.ToTable("TimekeeperNotifications");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.Timepoint", b =>
                {
                    b.Property<int>("TimepointID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AmountOfVisits")
                        .HasColumnType("int");

                    b.Property<int>("ExperimentID")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("TimepointID");

                    b.HasIndex("ExperimentID");

                    b.ToTable("Timepoints");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.UnitParentType", b =>
                {
                    b.Property<int>("UnitParentTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("UnitParentTypeDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UnitParentTypeID");

                    b.ToTable("UnitParentTypes");

                    b.HasData(
                        new
                        {
                            UnitParentTypeID = 1,
                            UnitParentTypeDescription = "Units"
                        },
                        new
                        {
                            UnitParentTypeID = 2,
                            UnitParentTypeDescription = "Weight/Volume"
                        },
                        new
                        {
                            UnitParentTypeID = 3,
                            UnitParentTypeDescription = "Test"
                        });
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.UnitType", b =>
                {
                    b.Property<int>("UnitTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("UnitParentTypeID")
                        .HasColumnType("int");

                    b.Property<string>("UnitTypeDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UnitTypeID");

                    b.HasIndex("UnitParentTypeID");

                    b.ToTable("UnitTypes");

                    b.HasData(
                        new
                        {
                            UnitTypeID = 1,
                            UnitParentTypeID = 1,
                            UnitTypeDescription = "Bottle"
                        },
                        new
                        {
                            UnitTypeID = 2,
                            UnitParentTypeID = 1,
                            UnitTypeDescription = "Box"
                        },
                        new
                        {
                            UnitTypeID = 3,
                            UnitParentTypeID = 1,
                            UnitTypeDescription = "Pack"
                        },
                        new
                        {
                            UnitTypeID = 4,
                            UnitParentTypeID = 1,
                            UnitTypeDescription = "Bag"
                        },
                        new
                        {
                            UnitTypeID = 5,
                            UnitParentTypeID = 1,
                            UnitTypeDescription = "Unit"
                        },
                        new
                        {
                            UnitTypeID = 6,
                            UnitParentTypeID = 1,
                            UnitTypeDescription = "Vial"
                        },
                        new
                        {
                            UnitTypeID = 24,
                            UnitParentTypeID = 1,
                            UnitTypeDescription = "Tube"
                        },
                        new
                        {
                            UnitTypeID = 7,
                            UnitParentTypeID = 2,
                            UnitTypeDescription = "Kg"
                        },
                        new
                        {
                            UnitTypeID = 8,
                            UnitParentTypeID = 2,
                            UnitTypeDescription = "gr"
                        },
                        new
                        {
                            UnitTypeID = 9,
                            UnitParentTypeID = 2,
                            UnitTypeDescription = "mg"
                        },
                        new
                        {
                            UnitTypeID = 10,
                            UnitParentTypeID = 2,
                            UnitTypeDescription = "ug"
                        },
                        new
                        {
                            UnitTypeID = 11,
                            UnitParentTypeID = 2,
                            UnitTypeDescription = "Liter"
                        },
                        new
                        {
                            UnitTypeID = 12,
                            UnitParentTypeID = 2,
                            UnitTypeDescription = "ml"
                        },
                        new
                        {
                            UnitTypeID = 13,
                            UnitParentTypeID = 2,
                            UnitTypeDescription = "ul"
                        },
                        new
                        {
                            UnitTypeID = 14,
                            UnitParentTypeID = 2,
                            UnitTypeDescription = "gal"
                        },
                        new
                        {
                            UnitTypeID = 20,
                            UnitParentTypeID = 2,
                            UnitTypeDescription = "pmol"
                        },
                        new
                        {
                            UnitTypeID = 21,
                            UnitParentTypeID = 2,
                            UnitTypeDescription = "nmol"
                        },
                        new
                        {
                            UnitTypeID = 22,
                            UnitParentTypeID = 2,
                            UnitTypeDescription = "umol"
                        },
                        new
                        {
                            UnitTypeID = 23,
                            UnitParentTypeID = 2,
                            UnitTypeDescription = "mol"
                        },
                        new
                        {
                            UnitTypeID = 15,
                            UnitParentTypeID = 3,
                            UnitTypeDescription = "rxhs"
                        },
                        new
                        {
                            UnitTypeID = 16,
                            UnitParentTypeID = 3,
                            UnitTypeDescription = "test"
                        },
                        new
                        {
                            UnitTypeID = 17,
                            UnitParentTypeID = 3,
                            UnitTypeDescription = "preps"
                        },
                        new
                        {
                            UnitTypeID = 18,
                            UnitParentTypeID = 3,
                            UnitTypeDescription = "assays"
                        },
                        new
                        {
                            UnitTypeID = -1,
                            UnitParentTypeID = 1,
                            UnitTypeDescription = "Quartzy Unit"
                        });
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.UnitTypeParentCategory", b =>
                {
                    b.Property<int>("UnitTypeID")
                        .HasColumnType("int");

                    b.Property<int>("ParentCategoryID")
                        .HasColumnType("int");

                    b.HasKey("UnitTypeID", "ParentCategoryID");

                    b.HasIndex("ParentCategoryID");

                    b.ToTable("UnitTypeParentCategory");

                    b.HasData(
                        new
                        {
                            UnitTypeID = 1,
                            ParentCategoryID = 1
                        },
                        new
                        {
                            UnitTypeID = 2,
                            ParentCategoryID = 1
                        },
                        new
                        {
                            UnitTypeID = 3,
                            ParentCategoryID = 1
                        },
                        new
                        {
                            UnitTypeID = 5,
                            ParentCategoryID = 1
                        },
                        new
                        {
                            UnitTypeID = 24,
                            ParentCategoryID = 1
                        },
                        new
                        {
                            UnitTypeID = 17,
                            ParentCategoryID = 2
                        },
                        new
                        {
                            UnitTypeID = 18,
                            ParentCategoryID = 2
                        },
                        new
                        {
                            UnitTypeID = 1,
                            ParentCategoryID = 2
                        },
                        new
                        {
                            UnitTypeID = 2,
                            ParentCategoryID = 2
                        },
                        new
                        {
                            UnitTypeID = 3,
                            ParentCategoryID = 2
                        },
                        new
                        {
                            UnitTypeID = 5,
                            ParentCategoryID = 2
                        },
                        new
                        {
                            UnitTypeID = 7,
                            ParentCategoryID = 2
                        },
                        new
                        {
                            UnitTypeID = 8,
                            ParentCategoryID = 2
                        },
                        new
                        {
                            UnitTypeID = 9,
                            ParentCategoryID = 2
                        },
                        new
                        {
                            UnitTypeID = 10,
                            ParentCategoryID = 2
                        },
                        new
                        {
                            UnitTypeID = 11,
                            ParentCategoryID = 2
                        },
                        new
                        {
                            UnitTypeID = 12,
                            ParentCategoryID = 2
                        },
                        new
                        {
                            UnitTypeID = 13,
                            ParentCategoryID = 2
                        },
                        new
                        {
                            UnitTypeID = 20,
                            ParentCategoryID = 2
                        },
                        new
                        {
                            UnitTypeID = 21,
                            ParentCategoryID = 2
                        },
                        new
                        {
                            UnitTypeID = 22,
                            ParentCategoryID = 2
                        },
                        new
                        {
                            UnitTypeID = 23,
                            ParentCategoryID = 2
                        },
                        new
                        {
                            UnitTypeID = 24,
                            ParentCategoryID = 2
                        },
                        new
                        {
                            UnitTypeID = 5,
                            ParentCategoryID = 3
                        },
                        new
                        {
                            UnitTypeID = 1,
                            ParentCategoryID = 4
                        },
                        new
                        {
                            UnitTypeID = 2,
                            ParentCategoryID = 4
                        },
                        new
                        {
                            UnitTypeID = 3,
                            ParentCategoryID = 4
                        },
                        new
                        {
                            UnitTypeID = 5,
                            ParentCategoryID = 4
                        },
                        new
                        {
                            UnitTypeID = 24,
                            ParentCategoryID = 4
                        },
                        new
                        {
                            UnitTypeID = 5,
                            ParentCategoryID = 14
                        },
                        new
                        {
                            UnitTypeID = 10,
                            ParentCategoryID = 14
                        },
                        new
                        {
                            UnitTypeID = 9,
                            ParentCategoryID = 14
                        },
                        new
                        {
                            UnitTypeID = 20,
                            ParentCategoryID = 14
                        },
                        new
                        {
                            UnitTypeID = 21,
                            ParentCategoryID = 14
                        },
                        new
                        {
                            UnitTypeID = 22,
                            ParentCategoryID = 14
                        },
                        new
                        {
                            UnitTypeID = 13,
                            ParentCategoryID = 14
                        },
                        new
                        {
                            UnitTypeID = 12,
                            ParentCategoryID = 14
                        },
                        new
                        {
                            UnitTypeID = 11,
                            ParentCategoryID = 14
                        },
                        new
                        {
                            UnitTypeID = 1,
                            ParentCategoryID = 5
                        },
                        new
                        {
                            UnitTypeID = 2,
                            ParentCategoryID = 5
                        },
                        new
                        {
                            UnitTypeID = 3,
                            ParentCategoryID = 5
                        },
                        new
                        {
                            UnitTypeID = 5,
                            ParentCategoryID = 5
                        },
                        new
                        {
                            UnitTypeID = 24,
                            ParentCategoryID = 5
                        },
                        new
                        {
                            UnitTypeID = 1,
                            ParentCategoryID = 7
                        },
                        new
                        {
                            UnitTypeID = 2,
                            ParentCategoryID = 7
                        },
                        new
                        {
                            UnitTypeID = 3,
                            ParentCategoryID = 7
                        },
                        new
                        {
                            UnitTypeID = 5,
                            ParentCategoryID = 7
                        },
                        new
                        {
                            UnitTypeID = 24,
                            ParentCategoryID = 7
                        },
                        new
                        {
                            UnitTypeID = 1,
                            ParentCategoryID = 6
                        },
                        new
                        {
                            UnitTypeID = 2,
                            ParentCategoryID = 6
                        },
                        new
                        {
                            UnitTypeID = 3,
                            ParentCategoryID = 6
                        },
                        new
                        {
                            UnitTypeID = 4,
                            ParentCategoryID = 6
                        },
                        new
                        {
                            UnitTypeID = 5,
                            ParentCategoryID = 6
                        },
                        new
                        {
                            UnitTypeID = 6,
                            ParentCategoryID = 6
                        },
                        new
                        {
                            UnitTypeID = 7,
                            ParentCategoryID = 6
                        },
                        new
                        {
                            UnitTypeID = 8,
                            ParentCategoryID = 6
                        },
                        new
                        {
                            UnitTypeID = 9,
                            ParentCategoryID = 6
                        },
                        new
                        {
                            UnitTypeID = 10,
                            ParentCategoryID = 6
                        },
                        new
                        {
                            UnitTypeID = 11,
                            ParentCategoryID = 6
                        },
                        new
                        {
                            UnitTypeID = 12,
                            ParentCategoryID = 6
                        },
                        new
                        {
                            UnitTypeID = 13,
                            ParentCategoryID = 6
                        },
                        new
                        {
                            UnitTypeID = 14,
                            ParentCategoryID = 6
                        },
                        new
                        {
                            UnitTypeID = 15,
                            ParentCategoryID = 6
                        },
                        new
                        {
                            UnitTypeID = 16,
                            ParentCategoryID = 6
                        },
                        new
                        {
                            UnitTypeID = 17,
                            ParentCategoryID = 6
                        },
                        new
                        {
                            UnitTypeID = 18,
                            ParentCategoryID = 6
                        },
                        new
                        {
                            UnitTypeID = 20,
                            ParentCategoryID = 6
                        },
                        new
                        {
                            UnitTypeID = 21,
                            ParentCategoryID = 6
                        },
                        new
                        {
                            UnitTypeID = 22,
                            ParentCategoryID = 6
                        },
                        new
                        {
                            UnitTypeID = 23,
                            ParentCategoryID = 6
                        },
                        new
                        {
                            UnitTypeID = 24,
                            ParentCategoryID = 6
                        });
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.Vendor", b =>
                {
                    b.Property<int>("VendorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryID")
                        .HasColumnType("int");

                    b.Property<string>("InfoEmail")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("OrdersEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("QuotesEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("VendorAccountNum")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VendorBIC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VendorBank")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("VendorBankBranch")
                        .HasColumnType("nvarchar(4)")
                        .HasMaxLength(4);

                    b.Property<string>("VendorBuisnessID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("VendorCellPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VendorCity")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("VendorEnName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("VendorFax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VendorGoldAccount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VendorHeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("VendorRoutingNum")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VendorStreet")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("VendorSwift")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VendorTelephone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VendorWebsite")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VendorZip")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VendorID");

                    b.HasIndex("CountryID", "VendorBuisnessID")
                        .IsUnique();

                    b.ToTable("Vendors");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.VendorCategoryType", b =>
                {
                    b.Property<int>("VendorID")
                        .HasColumnType("int");

                    b.Property<int>("CategoryTypeID")
                        .HasColumnType("int");

                    b.HasKey("VendorID", "CategoryTypeID");

                    b.HasIndex("CategoryTypeID");

                    b.ToTable("VendorCategoryType");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.VendorComment", b =>
                {
                    b.Property<int>("CommentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CommentText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CommentTimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<int>("CommentTypeID")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("ObjectID")
                        .HasColumnType("int");

                    b.HasKey("CommentID");

                    b.HasIndex("ApplicationUserID");

                    b.HasIndex("CommentTypeID");

                    b.HasIndex("ObjectID");

                    b.ToTable("VendorComments");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.VendorContact", b =>
                {
                    b.Property<int>("VendorContactID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("VendorContactEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VendorContactName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VendorContactPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VendorID")
                        .HasColumnType("int");

                    b.HasKey("VendorContactID");

                    b.HasIndex("VendorID");

                    b.ToTable("VendorContacts");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.Employee", b =>
                {
                    b.HasBaseType("PrototypeWithAuth.Data.ApplicationUser");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<int?>("CitizenshipID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DegreeID")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeStatusID")
                        .HasColumnType("int");

                    b.Property<double>("EmployerTax")
                        .HasColumnType("float");

                    b.Property<double>("GrossSalary")
                        .HasColumnType("float");

                    b.Property<string>("IDNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("IncomeTax")
                        .HasColumnType("float");

                    b.Property<bool>("IsUser")
                        .HasColumnType("bit");

                    b.Property<int?>("JobSubcategoryTypeID")
                        .HasColumnType("int");

                    b.Property<int?>("MaritalStatusID")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("RollOverSickDays")
                        .HasColumnType("float");

                    b.Property<double>("RollOverVacationDays")
                        .HasColumnType("float");

                    b.Property<double>("SpecialDays")
                        .HasColumnType("float");

                    b.Property<DateTime>("StartedWorking")
                        .HasColumnType("datetime2");

                    b.Property<int>("TaxCredits")
                        .HasColumnType("int");

                    b.Property<double>("VacationDays")
                        .HasColumnType("float");

                    b.HasIndex("CitizenshipID");

                    b.HasIndex("DegreeID");

                    b.HasIndex("EmployeeStatusID");

                    b.HasIndex("JobSubcategoryTypeID");

                    b.HasIndex("MaritalStatusID");

                    b.HasDiscriminator().HasValue("Employee");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.ExternalCalibration", b =>
                {
                    b.HasBaseType("PrototypeWithAuth.Models.Calibration");

                    b.HasDiscriminator().HasValue("ExternalCalibration");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.InternalCalibration", b =>
                {
                    b.HasBaseType("PrototypeWithAuth.Models.Calibration");

                    b.HasDiscriminator().HasValue("InternalCalibration");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.Repair", b =>
                {
                    b.HasBaseType("PrototypeWithAuth.Models.Calibration");

                    b.HasDiscriminator().HasValue("Repair");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.TemporaryLocationInstance", b =>
                {
                    b.HasBaseType("PrototypeWithAuth.Models.LocationInstance");

                    b.HasDiscriminator().HasValue("TemporaryLocationInstance");

                    b.HasData(
                        new
                        {
                            LocationInstanceID = -1,
                            ContainsItems = false,
                            Height = 0,
                            IsEmptyShelf = true,
                            IsFull = false,
                            LocationInstanceAbbrev = "Quartzy",
                            LocationInstanceName = "Quartzy Temporary",
                            LocationNumber = 1,
                            LocationTypeID = 600,
                            Width = 0
                        });
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.EmployeeInfoNotificationStatus", b =>
                {
                    b.HasBaseType("PrototypeWithAuth.Models.NotificationStatus");

                    b.HasDiscriminator().HasValue("EmployeeInfoNotificationStatus");

                    b.HasData(
                        new
                        {
                            NotificationStatusID = 6,
                            Color = "--black-87",
                            Description = "Happy Birthday",
                            Icon = "icon-cake_black_24dp"
                        });
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.RequestNotificationStatus", b =>
                {
                    b.HasBaseType("PrototypeWithAuth.Models.NotificationStatus");

                    b.HasDiscriminator().HasValue("RequestNotificationStatus");

                    b.HasData(
                        new
                        {
                            NotificationStatusID = 1,
                            Color = "--notifications-orderlate-color",
                            Description = "OrderLate",
                            Icon = "icon-priority_high-24px"
                        },
                        new
                        {
                            NotificationStatusID = 2,
                            Color = "--notifications-ordered-color",
                            Description = "ItemOrdered",
                            Icon = "icon-centarix-icons-03"
                        },
                        new
                        {
                            NotificationStatusID = 3,
                            Color = "--notifications-approved-color",
                            Description = "ItemApproved",
                            Icon = "icon-done-24px"
                        },
                        new
                        {
                            NotificationStatusID = 4,
                            Color = "--notifications-received-color",
                            Description = "ItemReceived",
                            Icon = "icon-local_mall-24px"
                        });
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.TimekeeperNotificationStatus", b =>
                {
                    b.HasBaseType("PrototypeWithAuth.Models.NotificationStatus");

                    b.HasDiscriminator().HasValue("TimekeeperNotificationStatus");

                    b.HasData(
                        new
                        {
                            NotificationStatusID = 5,
                            Color = "--timekeeper-color",
                            Description = "UpdateHours",
                            Icon = "icon-notification_timekeeper-24px"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PrototypeWithAuth.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PrototypeWithAuth.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PrototypeWithAuth.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PrototypeWithAuth.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.Advisor", b =>
                {
                    b.HasOne("PrototypeWithAuth.Models.Employee", "Employee")
                        .WithOne("Advisor")
                        .HasForeignKey("PrototypeWithAuth.Models.Advisor", "EmployeeID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.AuthorProtocol", b =>
                {
                    b.HasOne("PrototypeWithAuth.Models.Author", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PrototypeWithAuth.Models.Protocol", "Protocol")
                        .WithMany()
                        .HasForeignKey("ProtocolID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.Calibration", b =>
                {
                    b.HasOne("PrototypeWithAuth.Models.CalibrationType", "CalibrationType")
                        .WithMany()
                        .HasForeignKey("CalibrationTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PrototypeWithAuth.Models.Request", "Request")
                        .WithMany()
                        .HasForeignKey("RequestID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.CentarixID", b =>
                {
                    b.HasOne("PrototypeWithAuth.Models.Employee", "Employee")
                        .WithMany("CentarixIDs")
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PrototypeWithAuth.Models.EmployeeStatus", "EmployeeStatus")
                        .WithMany()
                        .HasForeignKey("EmployeeStatusID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.CompanyDayOff", b =>
                {
                    b.HasOne("PrototypeWithAuth.Models.CompanyDayOffType", "CompanyDayOffType")
                        .WithMany()
                        .HasForeignKey("CompanyDayOffTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.Country", b =>
                {
                    b.HasOne("PrototypeWithAuth.Models.Currency", "Currency")
                        .WithMany("Countries")
                        .HasForeignKey("CurrencyID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.CreditCard", b =>
                {
                    b.HasOne("PrototypeWithAuth.Models.CompanyAccount", "CompanyAccount")
                        .WithMany("CreditCards")
                        .HasForeignKey("CompanyAccountID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.EmployeeHours", b =>
                {
                    b.HasOne("PrototypeWithAuth.Models.CompanyDayOff", "CompanyDayOff")
                        .WithMany()
                        .HasForeignKey("CompanyDayOffID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PrototypeWithAuth.Models.EmployeeHoursStatus", "EmployeeHoursStatusEntry1")
                        .WithMany()
                        .HasForeignKey("EmployeeHoursStatusEntry1ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PrototypeWithAuth.Models.EmployeeHoursStatus", "EmployeeHoursStatusEntry2")
                        .WithMany("EmployeeHours")
                        .HasForeignKey("EmployeeHoursStatusEntry2ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PrototypeWithAuth.Models.Employee", "Employee")
                        .WithMany("EmployeeHours")
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PrototypeWithAuth.Models.OffDayType", "OffDayType")
                        .WithMany("EmployeeHours")
                        .HasForeignKey("OffDayTypeID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PrototypeWithAuth.Models.OffDayType", "PartialOffDayType")
                        .WithMany("EmployeeHoursPartial")
                        .HasForeignKey("PartialOffDayTypeID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.EmployeeHoursAwaitingApproval", b =>
                {
                    b.HasOne("PrototypeWithAuth.Models.EmployeeHours", "EmployeeHours")
                        .WithOne("EmployeeHoursAwaitingApproval")
                        .HasForeignKey("PrototypeWithAuth.Models.EmployeeHoursAwaitingApproval", "EmployeeHoursID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PrototypeWithAuth.Models.EmployeeHoursStatus", "EmployeeHoursStatusEntry1")
                        .WithMany()
                        .HasForeignKey("EmployeeHoursStatusEntry1ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PrototypeWithAuth.Models.EmployeeHoursStatus", "EmployeeHoursStatusEntry2")
                        .WithMany("EmployeeHoursAwaitingApprovals")
                        .HasForeignKey("EmployeeHoursStatusEntry2ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PrototypeWithAuth.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PrototypeWithAuth.Models.OffDayType", "OffDayType")
                        .WithMany("EmployeeHoursAwaitingApprovals")
                        .HasForeignKey("OffDayTypeID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PrototypeWithAuth.Models.OffDayType", "PartialOffDayType")
                        .WithMany("EmployeeHoursAwaitingApprovalsPartial")
                        .HasForeignKey("PartialOffDayTypeID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.EmployeeInfoNotification", b =>
                {
                    b.HasOne("PrototypeWithAuth.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PrototypeWithAuth.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PrototypeWithAuth.Models.EmployeeInfoNotificationStatus", "NotificationStatus")
                        .WithMany("EmployeeInfoNotifications")
                        .HasForeignKey("NotificationStatusID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.ExperimentEntry", b =>
                {
                    b.HasOne("PrototypeWithAuth.Models.Employee", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PrototypeWithAuth.Models.Participant", "Participant")
                        .WithMany("ExperimentEntries")
                        .HasForeignKey("ParticipantID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PrototypeWithAuth.Models.Site", "Site")
                        .WithMany("ExperimentEntries")
                        .HasForeignKey("SiteID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.ExperimentTest", b =>
                {
                    b.HasOne("PrototypeWithAuth.Models.Experiment", "Experiment")
                        .WithMany("ExperimentTests")
                        .HasForeignKey("ExperimentID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PrototypeWithAuth.Models.Test", "Test")
                        .WithMany("ExperimentTests")
                        .HasForeignKey("TestID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.FavoriteProtocol", b =>
                {
                    b.HasOne("PrototypeWithAuth.Data.ApplicationUser", "ApplicationUser")
                        .WithMany("FavoriteProtocols")
                        .HasForeignKey("ApplicationUserID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PrototypeWithAuth.Models.ProtocolVersion", "ProtocolVersion")
                        .WithMany()
                        .HasForeignKey("ProtocolVersionID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.FavoriteReport", b =>
                {
                    b.HasOne("PrototypeWithAuth.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PrototypeWithAuth.Models.Report", "Report")
                        .WithMany()
                        .HasForeignKey("ReportID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.FavoriteRequest", b =>
                {
                    b.HasOne("PrototypeWithAuth.Data.ApplicationUser", "ApplicationUser")
                        .WithMany("FavoriteRequests")
                        .HasForeignKey("ApplicationUserID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PrototypeWithAuth.Models.Request", "Request")
                        .WithMany("FavoriteRequests")
                        .HasForeignKey("RequestID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.FavoriteResource", b =>
                {
                    b.HasOne("PrototypeWithAuth.Data.ApplicationUser", "ApplicationUser")
                        .WithMany("FavoriteResources")
                        .HasForeignKey("ApplicationUserID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PrototypeWithAuth.Models.Resource", "Resource")
                        .WithMany("FavoriteResources")
                        .HasForeignKey("ResourceID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.Freelancer", b =>
                {
                    b.HasOne("PrototypeWithAuth.Models.Employee", "Employee")
                        .WithOne("Freelancer")
                        .HasForeignKey("PrototypeWithAuth.Models.Freelancer", "EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.FunctionLine", b =>
                {
                    b.HasOne("PrototypeWithAuth.Models.FunctionType", "FunctionType")
                        .WithMany()
                        .HasForeignKey("FunctionTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PrototypeWithAuth.Models.Line", "Line")
                        .WithMany("FunctionLines")
                        .HasForeignKey("LineID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PrototypeWithAuth.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PrototypeWithAuth.Models.ProtocolVersion", "ProtocolVersion")
                        .WithMany()
                        .HasForeignKey("ProtocolVersionID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.FunctionReport", b =>
                {
                    b.HasOne("PrototypeWithAuth.Models.FunctionType", "FunctionType")
                        .WithMany()
                        .HasForeignKey("FunctionTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PrototypeWithAuth.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PrototypeWithAuth.Models.ProtocolVersion", "ProtocolVersion")
                        .WithMany()
                        .HasForeignKey("ProtocolVersionID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PrototypeWithAuth.Models.Report", "Report")
                        .WithMany()
                        .HasForeignKey("ReportID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.FunctionResult", b =>
                {
                    b.HasOne("PrototypeWithAuth.Models.FunctionType", "FunctionType")
                        .WithMany()
                        .HasForeignKey("FunctionTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PrototypeWithAuth.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PrototypeWithAuth.Models.ProtocolInstance", "ProtocolInstance")
                        .WithMany()
                        .HasForeignKey("ProtocolInstanceID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PrototypeWithAuth.Models.ProtocolVersion", "ProtocolVersion")
                        .WithMany()
                        .HasForeignKey("ProtocolVersionID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.JobSubcategoryType", b =>
                {
                    b.HasOne("PrototypeWithAuth.Models.JobCategoryType", "JobCategoryType")
                        .WithMany("JobSubcategoryTypes")
                        .HasForeignKey("JobCategoryTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.Line", b =>
                {
                    b.HasOne("PrototypeWithAuth.Models.LineType", "LineType")
                        .WithMany()
                        .HasForeignKey("LineTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PrototypeWithAuth.Models.Line", "ParentLine")
                        .WithMany()
                        .HasForeignKey("ParentLineID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PrototypeWithAuth.Models.ProtocolVersion", "ProtocolVersion")
                        .WithMany("Lines")
                        .HasForeignKey("ProtocolVersionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.LineChange", b =>
                {
                    b.HasOne("PrototypeWithAuth.Models.Line", "Line")
                        .WithMany("LineChange")
                        .HasForeignKey("LineID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PrototypeWithAuth.Models.ProtocolInstance", "ProtocolInstance")
                        .WithMany("LineChange")
                        .HasForeignKey("ProtocolInstanceID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.LineType", b =>
                {
                    b.HasOne("PrototypeWithAuth.Models.LineType", "LineTypeChild")
                        .WithMany()
                        .HasForeignKey("LineTypeChildID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PrototypeWithAuth.Models.LineType", "LineTypeParent")
                        .WithMany()
                        .HasForeignKey("LineTypeParentID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.Link", b =>
                {
                    b.HasOne("PrototypeWithAuth.Models.ProtocolVersion", "ProtocolVersion")
                        .WithMany("Urls")
                        .HasForeignKey("ProtocolVersionID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.LocationInstance", b =>
                {
                    b.HasOne("PrototypeWithAuth.Models.LabPart", "LabPart")
                        .WithMany()
                        .HasForeignKey("LabPartID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PrototypeWithAuth.Models.LocationInstance", "LocationInstanceParent")
                        .WithMany()
                        .HasForeignKey("LocationInstanceParentID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PrototypeWithAuth.Models.LocationRoomInstance", "LocationRoomInstance")
                        .WithMany()
                        .HasForeignKey("LocationRoomInstanceID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PrototypeWithAuth.Models.LocationType", "LocationType")
                        .WithMany()
                        .HasForeignKey("LocationTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.LocationRoomInstance", b =>
                {
                    b.HasOne("PrototypeWithAuth.Models.LocationRoomType", "LocationRoomType")
                        .WithMany()
                        .HasForeignKey("LocationRoomTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.LocationType", b =>
                {
                    b.HasOne("PrototypeWithAuth.Models.LocationType", "LocationTypeChild")
                        .WithMany()
                        .HasForeignKey("LocationTypeChildID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PrototypeWithAuth.Models.LocationType", "LocationTypeParent")
                        .WithMany()
                        .HasForeignKey("LocationTypeParentID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.Material", b =>
                {
                    b.HasOne("PrototypeWithAuth.Models.MaterialCategory", "MaterialCategory")
                        .WithMany()
                        .HasForeignKey("MaterialCategoryID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PrototypeWithAuth.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PrototypeWithAuth.Models.ProtocolVersion", "ProtocolVersion")
                        .WithMany("Materials")
                        .HasForeignKey("ProtocolVersionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.ParentCategory", b =>
                {
                    b.HasOne("PrototypeWithAuth.Models.CategoryType", "CategoryType")
                        .WithMany("ParentCategories")
                        .HasForeignKey("CategoryTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.ParentQuote", b =>
                {
                    b.HasOne("PrototypeWithAuth.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.ParentRequest", b =>
                {
                    b.HasOne("PrototypeWithAuth.Data.ApplicationUser", "ApplicationUser")
                        .WithMany("ParentRequests")
                        .HasForeignKey("ApplicationUserID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.Participant", b =>
                {
                    b.HasOne("PrototypeWithAuth.Models.Experiment", "Experiment")
                        .WithMany("Participants")
                        .HasForeignKey("ExperimentID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PrototypeWithAuth.Models.Gender", "Gender")
                        .WithMany("Participants")
                        .HasForeignKey("GenderID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PrototypeWithAuth.Models.ParticipantStatus", "ParticipantStatus")
                        .WithMany("Participants")
                        .HasForeignKey("ParticipantStatusID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.Payment", b =>
                {
                    b.HasOne("PrototypeWithAuth.Models.CompanyAccount", "CompanyAccount")
                        .WithMany()
                        .HasForeignKey("CompanyAccountID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PrototypeWithAuth.Models.CreditCard", "CreditCard")
                        .WithMany()
                        .HasForeignKey("CreditCardID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PrototypeWithAuth.Models.Invoice", "Invoice")
                        .WithMany()
                        .HasForeignKey("InvoiceID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PrototypeWithAuth.Models.ParentRequest", null)
                        .WithMany("Payments")
                        .HasForeignKey("ParentRequestID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PrototypeWithAuth.Models.PaymentType", "PaymentType")
                        .WithMany()
                        .HasForeignKey("PaymentTypeID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PrototypeWithAuth.Models.Request", "Request")
                        .WithMany("Payments")
                        .HasForeignKey("RequestID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.PhysicalAddress", b =>
                {
                    b.HasOne("PrototypeWithAuth.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.Product", b =>
                {
                    b.HasOne("PrototypeWithAuth.Models.ProductSubcategory", "ProductSubcategory")
                        .WithMany("Products")
                        .HasForeignKey("ProductSubcategoryID")
                        .HasConstraintName("FK_Products_ProductSubcategory")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PrototypeWithAuth.Models.UnitType", "SubSubUnitType")
                        .WithMany()
                        .HasForeignKey("SubSubUnitTypeID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PrototypeWithAuth.Models.UnitType", "SubUnitType")
                        .WithMany()
                        .HasForeignKey("SubUnitTypeID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PrototypeWithAuth.Models.UnitType", "UnitType")
                        .WithMany()
                        .HasForeignKey("UnitTypeID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PrototypeWithAuth.Models.Vendor", "Vendor")
                        .WithMany("Products")
                        .HasForeignKey("VendorID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.ProductComment", b =>
                {
                    b.HasOne("PrototypeWithAuth.Models.Employee", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PrototypeWithAuth.Models.CommentType", "CommentType")
                        .WithMany()
                        .HasForeignKey("CommentTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PrototypeWithAuth.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ObjectID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.ProductSubcategory", b =>
                {
                    b.HasOne("PrototypeWithAuth.Models.ParentCategory", "ParentCategory")
                        .WithMany("ProductSubcategories")
                        .HasForeignKey("ParentCategoryID")
                        .HasConstraintName("FK_ProductSubcategories_ParentCategory")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.Protocol", b =>
                {
                    b.HasOne("PrototypeWithAuth.Models.ProtocolSubCategory", "ProtocolSubCategory")
                        .WithMany()
                        .HasForeignKey("ProtocolSubCategoryID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PrototypeWithAuth.Models.ProtocolType", "ProtocolType")
                        .WithMany()
                        .HasForeignKey("ProtocolTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.ProtocolComment", b =>
                {
                    b.HasOne("PrototypeWithAuth.Models.Employee", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PrototypeWithAuth.Models.CommentType", "CommentType")
                        .WithMany()
                        .HasForeignKey("CommentTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PrototypeWithAuth.Models.Protocol", "Protocol")
                        .WithMany()
                        .HasForeignKey("ObjectID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.ProtocolInstance", b =>
                {
                    b.HasOne("PrototypeWithAuth.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PrototypeWithAuth.Models.Line", "CurrentLine")
                        .WithMany()
                        .HasForeignKey("CurrentLineID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PrototypeWithAuth.Models.ProtocolVersion", "ProtocolVersion")
                        .WithMany("ProtocolInstances")
                        .HasForeignKey("ProtocolVersionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.ProtocolSubCategory", b =>
                {
                    b.HasOne("PrototypeWithAuth.Models.ProtocolCategory", "ProtocolCategoryType")
                        .WithMany()
                        .HasForeignKey("ProtocolCategoryTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.ProtocolVersion", b =>
                {
                    b.HasOne("PrototypeWithAuth.Data.ApplicationUser", "ApplicationUserCreator")
                        .WithMany()
                        .HasForeignKey("ApplicationUserCreatorID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PrototypeWithAuth.Models.Protocol", "Protocol")
                        .WithMany()
                        .HasForeignKey("ProtocolID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.Report", b =>
                {
                    b.HasOne("PrototypeWithAuth.Models.ResourceCategory", "ReportCategory")
                        .WithMany("Reports")
                        .HasForeignKey("ReportCategoryID")
                        .HasConstraintName("FK_Reports_ResourceCategories_ReportCategoryID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PrototypeWithAuth.Models.ReportType", "ReportType")
                        .WithMany()
                        .HasForeignKey("ReportTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.Request", b =>
                {
                    b.HasOne("PrototypeWithAuth.Models.Employee", "ApplicationUserCreator")
                        .WithMany("RequestsCreated")
                        .HasForeignKey("ApplicationUserCreatorID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PrototypeWithAuth.Models.Employee", "ApplicationUserReceiver")
                        .WithMany("RequestsReceived")
                        .HasForeignKey("ApplicationUserReceiverID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PrototypeWithAuth.Models.Invoice", null)
                        .WithMany("Requests")
                        .HasForeignKey("InvoiceID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PrototypeWithAuth.Models.ParentQuote", "ParentQuote")
                        .WithMany("Requests")
                        .HasForeignKey("ParentQuoteID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PrototypeWithAuth.Models.ParentRequest", "ParentRequest")
                        .WithMany("Requests")
                        .HasForeignKey("ParentRequestID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PrototypeWithAuth.Models.PaymentStatus", "PaymentStatus")
                        .WithMany("Requests")
                        .HasForeignKey("PaymentStatusID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PrototypeWithAuth.Models.Product", "Product")
                        .WithMany("Requests")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PrototypeWithAuth.Models.QuoteStatus", "QuoteStatus")
                        .WithMany("Requests")
                        .HasForeignKey("QuoteStatusID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PrototypeWithAuth.Models.RequestStatus", "RequestStatus")
                        .WithMany("Requests")
                        .HasForeignKey("RequestStatusID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PrototypeWithAuth.Models.SubProject", "SubProject")
                        .WithMany("Requests")
                        .HasForeignKey("SubProjectID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.RequestComment", b =>
                {
                    b.HasOne("PrototypeWithAuth.Models.Employee", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PrototypeWithAuth.Models.CommentType", "CommentType")
                        .WithMany()
                        .HasForeignKey("CommentTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PrototypeWithAuth.Models.Request", "Request")
                        .WithMany()
                        .HasForeignKey("ObjectID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.RequestList", b =>
                {
                    b.HasOne("PrototypeWithAuth.Models.Employee", "ApplicationUserOwner")
                        .WithMany()
                        .HasForeignKey("ApplicationUserOwnerID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.RequestListRequest", b =>
                {
                    b.HasOne("PrototypeWithAuth.Models.RequestList", "List")
                        .WithMany("RequestListRequests")
                        .HasForeignKey("ListID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PrototypeWithAuth.Models.Request", "Request")
                        .WithMany("RequestListRequests")
                        .HasForeignKey("RequestID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.RequestLocationInstance", b =>
                {
                    b.HasOne("PrototypeWithAuth.Models.LocationInstance", "LocationInstance")
                        .WithMany("RequestLocationInstances")
                        .HasForeignKey("LocationInstanceID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PrototypeWithAuth.Models.LocationInstance", "ParentLocationInstance")
                        .WithMany("AllRequestLocationInstances")
                        .HasForeignKey("ParentLocationInstanceID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PrototypeWithAuth.Models.Request", "Request")
                        .WithMany("RequestLocationInstances")
                        .HasForeignKey("RequestID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.RequestNotification", b =>
                {
                    b.HasOne("PrototypeWithAuth.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PrototypeWithAuth.Models.RequestNotificationStatus", "NotificationStatus")
                        .WithMany("RequestNotifications")
                        .HasForeignKey("NotificationStatusID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PrototypeWithAuth.Models.Request", "Request")
                        .WithMany("RequestNotifications")
                        .HasForeignKey("RequestID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.Resource", b =>
                {
                    b.HasOne("PrototypeWithAuth.Data.ApplicationUser", "ApplicationUserCreator")
                        .WithMany("ResourcesCreated")
                        .HasForeignKey("ApplicationUserCreatorID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PrototypeWithAuth.Models.ResourceType", "ResourceType")
                        .WithMany()
                        .HasForeignKey("ResourceTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.ResourceNote", b =>
                {
                    b.HasOne("PrototypeWithAuth.Models.Resource", "Resource")
                        .WithMany()
                        .HasForeignKey("ResourceID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.ResourceResourceCategory", b =>
                {
                    b.HasOne("PrototypeWithAuth.Models.ResourceCategory", "ResourceCategory")
                        .WithMany("ResourceResourceCategories")
                        .HasForeignKey("ResourceCategoryID")
                        .HasConstraintName("FK_ResourceResourceCategory_ResourceCategories_ResourceCategoryID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PrototypeWithAuth.Models.Resource", "Resource")
                        .WithMany("ResourceResourceCategories")
                        .HasForeignKey("ResourceID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.SalariedEmployee", b =>
                {
                    b.HasOne("PrototypeWithAuth.Models.Employee", "Employee")
                        .WithOne("SalariedEmployee")
                        .HasForeignKey("PrototypeWithAuth.Models.SalariedEmployee", "EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.ShareProtocol", b =>
                {
                    b.HasOne("PrototypeWithAuth.Models.Employee", "FromApplicationUser")
                        .WithMany()
                        .HasForeignKey("FromApplicationUserID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PrototypeWithAuth.Models.ProtocolVersion", "ProtocolVersion")
                        .WithMany()
                        .HasForeignKey("ObjectID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PrototypeWithAuth.Models.Employee", "ToApplicationUser")
                        .WithMany()
                        .HasForeignKey("ToApplicationUserID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.ShareRequest", b =>
                {
                    b.HasOne("PrototypeWithAuth.Models.Employee", "FromApplicationUser")
                        .WithMany("ShareRequestsCreated")
                        .HasForeignKey("FromApplicationUserID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PrototypeWithAuth.Models.Request", "Request")
                        .WithMany("ShareRequests")
                        .HasForeignKey("ObjectID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PrototypeWithAuth.Models.Employee", "ToApplicationUser")
                        .WithMany("ShareRequestsReceived")
                        .HasForeignKey("ToApplicationUserID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.ShareRequestList", b =>
                {
                    b.HasOne("PrototypeWithAuth.Models.Employee", "FromApplicationUser")
                        .WithMany()
                        .HasForeignKey("FromApplicationUserID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PrototypeWithAuth.Models.RequestList", "RequestList")
                        .WithMany()
                        .HasForeignKey("ObjectID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PrototypeWithAuth.Models.Employee", "ToApplicationUser")
                        .WithMany()
                        .HasForeignKey("ToApplicationUserID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.ShareResource", b =>
                {
                    b.HasOne("PrototypeWithAuth.Models.Employee", "FromApplicationUser")
                        .WithMany("ShareResourcesCreated")
                        .HasForeignKey("FromApplicationUserID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PrototypeWithAuth.Models.Resource", "Resource")
                        .WithMany()
                        .HasForeignKey("ObjectID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PrototypeWithAuth.Models.Employee", "ToApplicationUser")
                        .WithMany("ShareResourcesReceived")
                        .HasForeignKey("ToApplicationUserID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.Site", b =>
                {
                    b.HasOne("PrototypeWithAuth.Data.ApplicationUser", "PrimaryContact")
                        .WithMany()
                        .HasForeignKey("PrimaryContactID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.SubProject", b =>
                {
                    b.HasOne("PrototypeWithAuth.Models.Project", "Project")
                        .WithMany("SubProjects")
                        .HasForeignKey("ProjectID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.TagProtocol", b =>
                {
                    b.HasOne("PrototypeWithAuth.Models.Protocol", "Protocol")
                        .WithMany()
                        .HasForeignKey("ProtocolID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PrototypeWithAuth.Models.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.TempRequestJson", b =>
                {
                    b.HasOne("PrototypeWithAuth.Data.ApplicationUser", "ApplicationUser")
                        .WithMany("TempRequestJsons")
                        .HasForeignKey("ApplicationUserID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.Test", b =>
                {
                    b.HasOne("PrototypeWithAuth.Models.Site", "Site")
                        .WithMany("Tests")
                        .HasForeignKey("SiteID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PrototypeWithAuth.Models.TestCategory", null)
                        .WithMany("Tests")
                        .HasForeignKey("TestCategoryID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.TestCategory", b =>
                {
                    b.HasOne("PrototypeWithAuth.Models.Division", "Division")
                        .WithMany("TestCategories")
                        .HasForeignKey("DivisionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.TestGroup", b =>
                {
                    b.HasOne("PrototypeWithAuth.Models.TestOuterGroup", "TestOuterGroup")
                        .WithMany("TestGroups")
                        .HasForeignKey("TestOuterGroupID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.TestHeader", b =>
                {
                    b.HasOne("PrototypeWithAuth.Models.TestGroup", "TestGroup")
                        .WithMany("TestHeaders")
                        .HasForeignKey("TestGroupID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.TestOuterGroup", b =>
                {
                    b.HasOne("PrototypeWithAuth.Models.Test", "Test")
                        .WithMany("TestOuterGroups")
                        .HasForeignKey("TestID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.TestValue", b =>
                {
                    b.HasOne("PrototypeWithAuth.Models.ExperimentEntry", "ExperimentEntry")
                        .WithMany()
                        .HasForeignKey("ExperimentEntryID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PrototypeWithAuth.Models.TestHeader", "TestHeader")
                        .WithMany()
                        .HasForeignKey("TestHeaderID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.TimekeeperNotification", b =>
                {
                    b.HasOne("PrototypeWithAuth.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PrototypeWithAuth.Models.EmployeeHours", "EmployeeHours")
                        .WithMany()
                        .HasForeignKey("EmployeeHoursID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PrototypeWithAuth.Models.TimekeeperNotificationStatus", "NotificationStatus")
                        .WithMany("TimekeeperNotifications")
                        .HasForeignKey("NotificationStatusID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.Timepoint", b =>
                {
                    b.HasOne("PrototypeWithAuth.Models.Experiment", "Experiment")
                        .WithMany("Timepoints")
                        .HasForeignKey("ExperimentID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.UnitType", b =>
                {
                    b.HasOne("PrototypeWithAuth.Models.UnitParentType", "UnitParentType")
                        .WithMany("UnitTypes")
                        .HasForeignKey("UnitParentTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.UnitTypeParentCategory", b =>
                {
                    b.HasOne("PrototypeWithAuth.Models.ParentCategory", "ParentCategory")
                        .WithMany("UnitTypeParentCategory")
                        .HasForeignKey("ParentCategoryID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PrototypeWithAuth.Models.UnitType", "UnitType")
                        .WithMany("UnitTypeParentCategory")
                        .HasForeignKey("UnitTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.Vendor", b =>
                {
                    b.HasOne("PrototypeWithAuth.Models.Country", "Country")
                        .WithMany("Vendors")
                        .HasForeignKey("CountryID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.VendorCategoryType", b =>
                {
                    b.HasOne("PrototypeWithAuth.Models.CategoryType", "CategoryType")
                        .WithMany("VendorCategoryTypes")
                        .HasForeignKey("CategoryTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PrototypeWithAuth.Models.Vendor", "Vendor")
                        .WithMany("VendorCategoryTypes")
                        .HasForeignKey("VendorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.VendorComment", b =>
                {
                    b.HasOne("PrototypeWithAuth.Models.Employee", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PrototypeWithAuth.Models.CommentType", "CommentType")
                        .WithMany()
                        .HasForeignKey("CommentTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PrototypeWithAuth.Models.Vendor", "Vendor")
                        .WithMany("VendorComments")
                        .HasForeignKey("ObjectID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.VendorContact", b =>
                {
                    b.HasOne("PrototypeWithAuth.Models.Vendor", "Vendor")
                        .WithMany("VendorContacts")
                        .HasForeignKey("VendorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.Employee", b =>
                {
                    b.HasOne("PrototypeWithAuth.Models.Citizenship", "Citizenship")
                        .WithMany("Employees")
                        .HasForeignKey("CitizenshipID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PrototypeWithAuth.Models.Degree", "Degree")
                        .WithMany("Employees")
                        .HasForeignKey("DegreeID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PrototypeWithAuth.Models.EmployeeStatus", "EmployeeStatus")
                        .WithMany("Employees")
                        .HasForeignKey("EmployeeStatusID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PrototypeWithAuth.Models.JobSubcategoryType", "JobSubcategoryType")
                        .WithMany("Employees")
                        .HasForeignKey("JobSubcategoryTypeID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PrototypeWithAuth.Models.MaritalStatus", "MaritalStatus")
                        .WithMany("Employees")
                        .HasForeignKey("MaritalStatusID")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
