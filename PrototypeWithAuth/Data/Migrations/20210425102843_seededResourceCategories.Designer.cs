// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PrototypeWithAuth.Data;

namespace PrototypeWithAuth.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210425102843_seededResourceCategories")]
    partial class seededResourceCategories
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("PrototypeWithAuth.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateLastReadNotifications")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSuspended")
                        .HasColumnType("bit");

                    b.Property<decimal>("LabMonthlyLimit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("LabOrderLimit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("LabUnitLimit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("NeedsToResetPassword")
                        .HasColumnType("bit");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<decimal>("OperationMonthlyLimit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("OperationOrderLimit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("OperationUnitLimit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("RememberTwoFactor")
                        .HasColumnType("bit");

                    b.Property<string>("SecureAppPass")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<int>("UserNum")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("UserNum")
                        .IsUnique();

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("ApplicationUser");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.Advisor", b =>
                {
                    b.Property<int>("AdvisorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EmployeeID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AdvisorID");

                    b.HasIndex("EmployeeID")
                        .IsUnique()
                        .HasFilter("[EmployeeID] IS NOT NULL");

                    b.ToTable("Advisors");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.Article", b =>
                {
                    b.Property<int>("ArticleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstAuthor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Journal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastAuthor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PubMedID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ResourceTypeID")
                        .HasColumnType("int");

                    b.Property<string>("Summary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ArticleID");

                    b.HasIndex("ResourceTypeID");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.Author", b =>
                {
                    b.Property<int>("AuthorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AuthorID");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.AuthorProtocol", b =>
                {
                    b.Property<int>("AuthorID")
                        .HasColumnType("int");

                    b.Property<int>("ProtocolID")
                        .HasColumnType("int");

                    b.HasKey("AuthorID", "ProtocolID");

                    b.HasIndex("ProtocolID");

                    b.ToTable("AuthorProtocols");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.Calibration", b =>
                {
                    b.Property<int>("CalibrationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CalibrationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CalibrationTypeID")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Days")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Done")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRepeat")
                        .HasColumnType("bit");

                    b.Property<int>("Months")
                        .HasColumnType("int");

                    b.Property<int>("RequestID")
                        .HasColumnType("int");

                    b.HasKey("CalibrationID");

                    b.HasIndex("CalibrationTypeID");

                    b.HasIndex("RequestID");

                    b.ToTable("Calibrations");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Calibration");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.CalibrationType", b =>
                {
                    b.Property<int>("CalibrationTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CalibrationTypeID");

                    b.ToTable("CalibrationTypes");

                    b.HasData(
                        new
                        {
                            CalibrationTypeID = 1,
                            Description = "Repair",
                            Icon = "icon-build-24px"
                        },
                        new
                        {
                            CalibrationTypeID = 2,
                            Description = "External Calibration",
                            Icon = "icon-miscellaneous_services-24px-1"
                        },
                        new
                        {
                            CalibrationTypeID = 3,
                            Description = "In House Maintainance",
                            Icon = "icon-inhouse-maintainance-24px"
                        });
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.CategoryType", b =>
                {
                    b.Property<int>("CategoryTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryTypeDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryTypeID");

                    b.ToTable("CategoryTypes");

                    b.HasData(
                        new
                        {
                            CategoryTypeID = 1,
                            CategoryTypeDescription = "Lab"
                        },
                        new
                        {
                            CategoryTypeID = 2,
                            CategoryTypeDescription = "Operational"
                        });
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.CentarixID", b =>
                {
                    b.Property<int>("CentarixIDID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CentarixIDNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("EmployeeStatusID")
                        .HasColumnType("int");

                    b.Property<bool>("IsCurrent")
                        .HasColumnType("bit");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.HasKey("CentarixIDID");

                    b.HasIndex("EmployeeID");

                    b.HasIndex("EmployeeStatusID");

                    b.ToTable("CentarixIDs");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.Citizenship", b =>
                {
                    b.Property<int>("CitizenshipID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CitizenshipID");

                    b.ToTable("Citizenships");

                    b.HasData(
                        new
                        {
                            CitizenshipID = 1,
                            Description = "Israel"
                        },
                        new
                        {
                            CitizenshipID = 2,
                            Description = "USA"
                        });
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.Comment", b =>
                {
                    b.Property<int>("CommentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CommentText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CommentTimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("CommentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("RequestID")
                        .HasColumnType("int");

                    b.HasKey("CommentID");

                    b.HasIndex("ApplicationUserID");

                    b.HasIndex("RequestID");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.CompanyAccount", b =>
                {
                    b.Property<int>("CompanyAccountID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CompanyBankName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CompanyAccountID");

                    b.ToTable("CompanyAccounts");

                    b.HasData(
                        new
                        {
                            CompanyAccountID = 1,
                            CompanyBankName = "Discount"
                        },
                        new
                        {
                            CompanyAccountID = 2,
                            CompanyBankName = "Mercantile"
                        },
                        new
                        {
                            CompanyAccountID = 3,
                            CompanyBankName = "Leumi"
                        },
                        new
                        {
                            CompanyAccountID = 4,
                            CompanyBankName = "Payoneer"
                        });
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.CompanyDayOff", b =>
                {
                    b.Property<int>("CompanyDayOffID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompanyDayOffTypeID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.HasKey("CompanyDayOffID");

                    b.HasIndex("CompanyDayOffTypeID");

                    b.ToTable("CompanyDayOffs");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.CompanyDayOffType", b =>
                {
                    b.Property<int>("CompanyDayOffTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CompanyDayOffTypeID");

                    b.ToTable("CompanyDayOffTypes");

                    b.HasData(
                        new
                        {
                            CompanyDayOffTypeID = 1,
                            Name = "Purim 1"
                        },
                        new
                        {
                            CompanyDayOffTypeID = 2,
                            Name = "Purim 2"
                        },
                        new
                        {
                            CompanyDayOffTypeID = 3,
                            Name = "Erev Pesach"
                        },
                        new
                        {
                            CompanyDayOffTypeID = 4,
                            Name = "Pesach"
                        },
                        new
                        {
                            CompanyDayOffTypeID = 5,
                            Name = "Erev Shviei Pesach"
                        },
                        new
                        {
                            CompanyDayOffTypeID = 6,
                            Name = "Shviei Pesach"
                        },
                        new
                        {
                            CompanyDayOffTypeID = 7,
                            Name = "Yom Hazmaut"
                        },
                        new
                        {
                            CompanyDayOffTypeID = 8,
                            Name = "Erev Shavuous"
                        },
                        new
                        {
                            CompanyDayOffTypeID = 9,
                            Name = "Shavuous"
                        },
                        new
                        {
                            CompanyDayOffTypeID = 10,
                            Name = "Erev Rosh Hashana"
                        },
                        new
                        {
                            CompanyDayOffTypeID = 11,
                            Name = "Rosh Hashana 1"
                        },
                        new
                        {
                            CompanyDayOffTypeID = 12,
                            Name = "Rosh Hashana 2"
                        },
                        new
                        {
                            CompanyDayOffTypeID = 13,
                            Name = "Erev Yom Kippur"
                        },
                        new
                        {
                            CompanyDayOffTypeID = 14,
                            Name = "Yom Kippur"
                        },
                        new
                        {
                            CompanyDayOffTypeID = 15,
                            Name = "Erev Sukkot"
                        },
                        new
                        {
                            CompanyDayOffTypeID = 16,
                            Name = "Sukkot"
                        },
                        new
                        {
                            CompanyDayOffTypeID = 17,
                            Name = "Erev Simchat Torah"
                        },
                        new
                        {
                            CompanyDayOffTypeID = 18,
                            Name = "Simchat Torah"
                        });
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.CreditCard", b =>
                {
                    b.Property<int>("CreditCardID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CardNumber")
                        .HasColumnType("nvarchar(4)")
                        .HasMaxLength(4);

                    b.Property<int>("CompanyAccountID")
                        .HasColumnType("int");

                    b.HasKey("CreditCardID");

                    b.HasIndex("CompanyAccountID");

                    b.ToTable("CreditCards");

                    b.HasData(
                        new
                        {
                            CreditCardID = 1,
                            CardNumber = "2543",
                            CompanyAccountID = 2
                        },
                        new
                        {
                            CreditCardID = 2,
                            CardNumber = "4694",
                            CompanyAccountID = 2
                        },
                        new
                        {
                            CreditCardID = 3,
                            CardNumber = "3485",
                            CompanyAccountID = 2
                        },
                        new
                        {
                            CreditCardID = 4,
                            CardNumber = "0054",
                            CompanyAccountID = 2
                        },
                        new
                        {
                            CreditCardID = 5,
                            CardNumber = "4971",
                            CompanyAccountID = 1
                        },
                        new
                        {
                            CreditCardID = 6,
                            CardNumber = "4424",
                            CompanyAccountID = 1
                        },
                        new
                        {
                            CreditCardID = 7,
                            CardNumber = "4432",
                            CompanyAccountID = 1
                        },
                        new
                        {
                            CreditCardID = 8,
                            CardNumber = "7972",
                            CompanyAccountID = 3
                        });
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.Degree", b =>
                {
                    b.Property<int>("DegreeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DegreeID");

                    b.ToTable("Degrees");

                    b.HasData(
                        new
                        {
                            DegreeID = 1,
                            Description = "B.Sc"
                        },
                        new
                        {
                            DegreeID = 2,
                            Description = "M.Sc"
                        },
                        new
                        {
                            DegreeID = 3,
                            Description = "P.hd"
                        },
                        new
                        {
                            DegreeID = 4,
                            Description = "Post P.hd"
                        },
                        new
                        {
                            DegreeID = 5,
                            Description = "No Degree"
                        },
                        new
                        {
                            DegreeID = 6,
                            Description = "Certificate"
                        });
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.EmployeeHours", b =>
                {
                    b.Property<int>("EmployeeHoursID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CompanyDayOffID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EmployeeHoursStatusEntry1ID")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeHoursStatusEntry2ID")
                        .HasColumnType("int");

                    b.Property<string>("EmployeeID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("Entry1")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Entry2")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Exit1")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Exit2")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsBonus")
                        .HasColumnType("bit");

                    b.Property<int?>("OffDayTypeID")
                        .HasColumnType("int");

                    b.Property<TimeSpan?>("PartialOffDayHours")
                        .HasColumnType("time");

                    b.Property<int?>("PartialOffDayTypeID")
                        .HasColumnType("int");

                    b.Property<TimeSpan?>("TotalHours")
                        .HasColumnType("time");

                    b.HasKey("EmployeeHoursID");

                    b.HasIndex("CompanyDayOffID");

                    b.HasIndex("EmployeeHoursStatusEntry1ID");

                    b.HasIndex("EmployeeHoursStatusEntry2ID");

                    b.HasIndex("EmployeeID");

                    b.HasIndex("OffDayTypeID");

                    b.HasIndex("PartialOffDayTypeID");

                    b.ToTable("EmployeeHours");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.EmployeeHoursAwaitingApproval", b =>
                {
                    b.Property<int>("EmployeeHoursAwaitingApprovalID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EmployeeHoursID")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeHoursStatusEntry1ID")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeHoursStatusEntry2ID")
                        .HasColumnType("int");

                    b.Property<string>("EmployeeID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("Entry1")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Entry2")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Exit1")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Exit2")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsBonus")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDenied")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("OffDayTypeID")
                        .HasColumnType("int");

                    b.Property<TimeSpan?>("PartialOffDayHours")
                        .HasColumnType("time");

                    b.Property<int?>("PartialOffDayTypeID")
                        .HasColumnType("int");

                    b.Property<TimeSpan?>("TotalHours")
                        .HasColumnType("time");

                    b.HasKey("EmployeeHoursAwaitingApprovalID");

                    b.HasIndex("EmployeeHoursID");

                    b.HasIndex("EmployeeHoursStatusEntry1ID");

                    b.HasIndex("EmployeeHoursStatusEntry2ID");

                    b.HasIndex("EmployeeID");

                    b.HasIndex("OffDayTypeID");

                    b.HasIndex("PartialOffDayTypeID");

                    b.ToTable("EmployeeHoursAwaitingApprovals");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.EmployeeHoursStatus", b =>
                {
                    b.Property<int>("EmployeeHoursStatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmployeeHoursStatusID");

                    b.ToTable("EmployeeHoursStatuses");

                    b.HasData(
                        new
                        {
                            EmployeeHoursStatusID = 1,
                            Description = "Work from home"
                        },
                        new
                        {
                            EmployeeHoursStatusID = 2,
                            Description = "Edit existing hours"
                        },
                        new
                        {
                            EmployeeHoursStatusID = 3,
                            Description = "Forgot to report"
                        });
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.EmployeeStatus", b =>
                {
                    b.Property<int>("EmployeeStatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviation")
                        .HasColumnType("char(2)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LastCentarixID")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastCentarixIDTimeStamp")
                        .HasColumnType("datetime2");

                    b.HasKey("EmployeeStatusID");

                    b.ToTable("EmployeeStatuses");

                    b.HasData(
                        new
                        {
                            EmployeeStatusID = 1,
                            Abbreviation = "E",
                            Description = "Employee",
                            LastCentarixID = 0,
                            LastCentarixIDTimeStamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            EmployeeStatusID = 2,
                            Abbreviation = "F",
                            Description = "Freelancer",
                            LastCentarixID = 0,
                            LastCentarixIDTimeStamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            EmployeeStatusID = 3,
                            Abbreviation = "A",
                            Description = "Advisor",
                            LastCentarixID = 0,
                            LastCentarixIDTimeStamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            EmployeeStatusID = 4,
                            Abbreviation = "U",
                            Description = "User",
                            LastCentarixID = 0,
                            LastCentarixIDTimeStamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.ExchangeRate", b =>
                {
                    b.Property<int>("ExchangeRateID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("LatestExchangeRate")
                        .HasColumnType("decimal(18,3)");

                    b.HasKey("ExchangeRateID");

                    b.ToTable("ExchangeRates");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.FavoriteRequest", b =>
                {
                    b.Property<int>("FavoriteRequestID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("RequestID")
                        .HasColumnType("int");

                    b.HasKey("FavoriteRequestID");

                    b.HasIndex("ApplicationUserID");

                    b.HasIndex("RequestID");

                    b.ToTable("FavoriteRequests");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.Freelancer", b =>
                {
                    b.Property<int>("FreelancerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EmployeeId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("FreelancerID");

                    b.HasIndex("EmployeeId")
                        .IsUnique()
                        .HasFilter("[EmployeeId] IS NOT NULL");

                    b.ToTable("Freelancers");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.FunctionLine", b =>
                {
                    b.Property<int>("FunctionTypeID")
                        .HasColumnType("int");

                    b.Property<int>("LineID")
                        .HasColumnType("int");

                    b.HasKey("FunctionTypeID", "LineID");

                    b.HasIndex("LineID");

                    b.ToTable("FunctionLines");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.FunctionType", b =>
                {
                    b.Property<int>("FunctionTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FunctionDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IconActionClass")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FunctionTypeID");

                    b.ToTable("FunctionTypes");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.Invoice", b =>
                {
                    b.Property<int>("InvoiceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InvoiceNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("InvoiceID");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.IpRange", b =>
                {
                    b.Property<int>("IpRangeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("FromIpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToIpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IpRangeID");

                    b.ToTable("IpRanges");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.JobCategoryType", b =>
                {
                    b.Property<int>("JobCategoryTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("JobCategoryTypeID");

                    b.ToTable("JobCategoryTypes");

                    b.HasData(
                        new
                        {
                            JobCategoryTypeID = 1,
                            Description = "Executive"
                        },
                        new
                        {
                            JobCategoryTypeID = 2,
                            Description = "Rejuvenation"
                        },
                        new
                        {
                            JobCategoryTypeID = 3,
                            Description = "Biomarker"
                        },
                        new
                        {
                            JobCategoryTypeID = 4,
                            Description = "Delivery Systems"
                        },
                        new
                        {
                            JobCategoryTypeID = 5,
                            Description = "Clinical Trials"
                        },
                        new
                        {
                            JobCategoryTypeID = 6,
                            Description = "Business Development"
                        },
                        new
                        {
                            JobCategoryTypeID = 7,
                            Description = "Software Development"
                        },
                        new
                        {
                            JobCategoryTypeID = 8,
                            Description = "General"
                        },
                        new
                        {
                            JobCategoryTypeID = 9,
                            Description = "Lab"
                        },
                        new
                        {
                            JobCategoryTypeID = 10,
                            Description = "Bioinformatics"
                        });
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.JobSubcategoryType", b =>
                {
                    b.Property<int>("JobSubcategoryTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("JobCategoryTypeID")
                        .HasColumnType("int");

                    b.HasKey("JobSubcategoryTypeID");

                    b.HasIndex("JobCategoryTypeID");

                    b.ToTable("JobSubcategoryTypes");

                    b.HasData(
                        new
                        {
                            JobSubcategoryTypeID = 201,
                            Description = "Senior Scientist",
                            JobCategoryTypeID = 2
                        },
                        new
                        {
                            JobSubcategoryTypeID = 202,
                            Description = "Research Associate",
                            JobCategoryTypeID = 2
                        },
                        new
                        {
                            JobSubcategoryTypeID = 203,
                            Description = "Lab Technician",
                            JobCategoryTypeID = 2
                        },
                        new
                        {
                            JobSubcategoryTypeID = 204,
                            Description = "Team Manager",
                            JobCategoryTypeID = 2
                        },
                        new
                        {
                            JobSubcategoryTypeID = 205,
                            Description = "Production Worker",
                            JobCategoryTypeID = 2
                        },
                        new
                        {
                            JobSubcategoryTypeID = 206,
                            Description = "Operation Executive",
                            JobCategoryTypeID = 2
                        },
                        new
                        {
                            JobSubcategoryTypeID = 207,
                            Description = "Business Development",
                            JobCategoryTypeID = 2
                        },
                        new
                        {
                            JobSubcategoryTypeID = 208,
                            Description = "Sales",
                            JobCategoryTypeID = 2
                        },
                        new
                        {
                            JobSubcategoryTypeID = 209,
                            Description = "Lab Manager",
                            JobCategoryTypeID = 2
                        },
                        new
                        {
                            JobSubcategoryTypeID = 210,
                            Description = "Bioinformatician",
                            JobCategoryTypeID = 2
                        },
                        new
                        {
                            JobSubcategoryTypeID = 301,
                            Description = "Senior Scientist",
                            JobCategoryTypeID = 3
                        },
                        new
                        {
                            JobSubcategoryTypeID = 302,
                            Description = "Research Associate",
                            JobCategoryTypeID = 3
                        },
                        new
                        {
                            JobSubcategoryTypeID = 303,
                            Description = "Lab Technician",
                            JobCategoryTypeID = 3
                        },
                        new
                        {
                            JobSubcategoryTypeID = 304,
                            Description = "Team Manager",
                            JobCategoryTypeID = 3
                        },
                        new
                        {
                            JobSubcategoryTypeID = 305,
                            Description = "Production Worker",
                            JobCategoryTypeID = 3
                        },
                        new
                        {
                            JobSubcategoryTypeID = 306,
                            Description = "Operation Executive",
                            JobCategoryTypeID = 3
                        },
                        new
                        {
                            JobSubcategoryTypeID = 307,
                            Description = "Business Development",
                            JobCategoryTypeID = 3
                        },
                        new
                        {
                            JobSubcategoryTypeID = 308,
                            Description = "Sales",
                            JobCategoryTypeID = 3
                        },
                        new
                        {
                            JobSubcategoryTypeID = 309,
                            Description = "Lab Manager",
                            JobCategoryTypeID = 3
                        },
                        new
                        {
                            JobSubcategoryTypeID = 310,
                            Description = "Bioinformatician",
                            JobCategoryTypeID = 3
                        },
                        new
                        {
                            JobSubcategoryTypeID = 401,
                            Description = "Senior Scientist",
                            JobCategoryTypeID = 4
                        },
                        new
                        {
                            JobSubcategoryTypeID = 402,
                            Description = "Research Associate",
                            JobCategoryTypeID = 4
                        },
                        new
                        {
                            JobSubcategoryTypeID = 403,
                            Description = "Lab Technician",
                            JobCategoryTypeID = 4
                        },
                        new
                        {
                            JobSubcategoryTypeID = 404,
                            Description = "Team Manager",
                            JobCategoryTypeID = 4
                        },
                        new
                        {
                            JobSubcategoryTypeID = 405,
                            Description = "Production Worker",
                            JobCategoryTypeID = 4
                        },
                        new
                        {
                            JobSubcategoryTypeID = 406,
                            Description = "Operation Executive",
                            JobCategoryTypeID = 4
                        },
                        new
                        {
                            JobSubcategoryTypeID = 407,
                            Description = "Business Development",
                            JobCategoryTypeID = 4
                        },
                        new
                        {
                            JobSubcategoryTypeID = 408,
                            Description = "Sales",
                            JobCategoryTypeID = 4
                        },
                        new
                        {
                            JobSubcategoryTypeID = 409,
                            Description = "Lab Manager",
                            JobCategoryTypeID = 4
                        },
                        new
                        {
                            JobSubcategoryTypeID = 410,
                            Description = "Bioinformatician",
                            JobCategoryTypeID = 4
                        },
                        new
                        {
                            JobSubcategoryTypeID = 101,
                            Description = "CEO",
                            JobCategoryTypeID = 1
                        },
                        new
                        {
                            JobSubcategoryTypeID = 102,
                            Description = "CTO",
                            JobCategoryTypeID = 1
                        },
                        new
                        {
                            JobSubcategoryTypeID = 103,
                            Description = "COO",
                            JobCategoryTypeID = 1
                        },
                        new
                        {
                            JobSubcategoryTypeID = 104,
                            Description = "President",
                            JobCategoryTypeID = 1
                        },
                        new
                        {
                            JobSubcategoryTypeID = 105,
                            Description = "Director",
                            JobCategoryTypeID = 1
                        },
                        new
                        {
                            JobSubcategoryTypeID = 106,
                            Description = "CSO",
                            JobCategoryTypeID = 1
                        },
                        new
                        {
                            JobSubcategoryTypeID = 107,
                            Description = "CMO",
                            JobCategoryTypeID = 1
                        },
                        new
                        {
                            JobSubcategoryTypeID = 108,
                            Description = "CFO",
                            JobCategoryTypeID = 1
                        },
                        new
                        {
                            JobSubcategoryTypeID = 109,
                            Description = "CBO",
                            JobCategoryTypeID = 1
                        },
                        new
                        {
                            JobSubcategoryTypeID = 601,
                            Description = "Sales",
                            JobCategoryTypeID = 6
                        },
                        new
                        {
                            JobSubcategoryTypeID = 701,
                            Description = "Elixir",
                            JobCategoryTypeID = 7
                        },
                        new
                        {
                            JobSubcategoryTypeID = 702,
                            Description = "Automation Developer",
                            JobCategoryTypeID = 7
                        },
                        new
                        {
                            JobSubcategoryTypeID = 703,
                            Description = "Other",
                            JobCategoryTypeID = 7
                        },
                        new
                        {
                            JobSubcategoryTypeID = 801,
                            Description = "Cooking",
                            JobCategoryTypeID = 8
                        },
                        new
                        {
                            JobSubcategoryTypeID = 802,
                            Description = "Cleaning",
                            JobCategoryTypeID = 8
                        },
                        new
                        {
                            JobSubcategoryTypeID = 803,
                            Description = "IT",
                            JobCategoryTypeID = 8
                        },
                        new
                        {
                            JobSubcategoryTypeID = 804,
                            Description = "Administration",
                            JobCategoryTypeID = 8
                        },
                        new
                        {
                            JobSubcategoryTypeID = 805,
                            Description = "Operations Manager",
                            JobCategoryTypeID = 8
                        },
                        new
                        {
                            JobSubcategoryTypeID = 806,
                            Description = "Branch Manager",
                            JobCategoryTypeID = 8
                        },
                        new
                        {
                            JobSubcategoryTypeID = 901,
                            Description = "Lab Manager",
                            JobCategoryTypeID = 9
                        },
                        new
                        {
                            JobSubcategoryTypeID = 902,
                            Description = "Automations Manager",
                            JobCategoryTypeID = 9
                        },
                        new
                        {
                            JobSubcategoryTypeID = 903,
                            Description = "Automations Implementer",
                            JobCategoryTypeID = 9
                        },
                        new
                        {
                            JobSubcategoryTypeID = 1001,
                            Description = "Senior Bioinformatician",
                            JobCategoryTypeID = 10
                        },
                        new
                        {
                            JobSubcategoryTypeID = 1002,
                            Description = "Bioinformatician Executive",
                            JobCategoryTypeID = 10
                        },
                        new
                        {
                            JobSubcategoryTypeID = 1003,
                            Description = "Bioinformatician Team Manager",
                            JobCategoryTypeID = 10
                        },
                        new
                        {
                            JobSubcategoryTypeID = 1004,
                            Description = "Bioinformatics Technician",
                            JobCategoryTypeID = 10
                        },
                        new
                        {
                            JobSubcategoryTypeID = 1005,
                            Description = "Bioinformatics Researcher",
                            JobCategoryTypeID = 10
                        },
                        new
                        {
                            JobSubcategoryTypeID = 501,
                            Description = "Clinical Trials",
                            JobCategoryTypeID = 5
                        });
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.LabPart", b =>
                {
                    b.Property<int>("LabPartID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("HasShelves")
                        .HasColumnType("bit");

                    b.Property<string>("LabPartName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LabPartNameAbbrev")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LabPartID");

                    b.ToTable("LabParts");

                    b.HasData(
                        new
                        {
                            LabPartID = 1,
                            HasShelves = true,
                            LabPartName = "Closet",
                            LabPartNameAbbrev = "C"
                        },
                        new
                        {
                            LabPartID = 2,
                            HasShelves = true,
                            LabPartName = "Glass Closet",
                            LabPartNameAbbrev = "G"
                        },
                        new
                        {
                            LabPartID = 3,
                            HasShelves = false,
                            LabPartName = "Table",
                            LabPartNameAbbrev = "T"
                        },
                        new
                        {
                            LabPartID = 4,
                            HasShelves = false,
                            LabPartName = "Drawer",
                            LabPartNameAbbrev = "D"
                        },
                        new
                        {
                            LabPartID = 5,
                            HasShelves = false,
                            LabPartName = "Shelf",
                            LabPartNameAbbrev = "S"
                        },
                        new
                        {
                            LabPartID = 6,
                            HasShelves = false,
                            LabPartName = "Bench",
                            LabPartNameAbbrev = "B"
                        });
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.Line", b =>
                {
                    b.Property<int>("LineID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LineNumber")
                        .HasColumnType("int");

                    b.Property<int>("LineTypeID")
                        .HasColumnType("int");

                    b.Property<int>("ParentLineID")
                        .HasColumnType("int");

                    b.Property<int>("ProtocolID")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("Timer")
                        .HasColumnType("time");

                    b.HasKey("LineID");

                    b.HasIndex("LineTypeID");

                    b.HasIndex("ParentLineID");

                    b.HasIndex("ProtocolID");

                    b.ToTable("Lines");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.LineType", b =>
                {
                    b.Property<int>("LineTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LineTypeChildID")
                        .HasColumnType("int");

                    b.Property<string>("LineTypeDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LineTypeParentID")
                        .HasColumnType("int");

                    b.HasKey("LineTypeID");

                    b.HasIndex("LineTypeChildID");

                    b.HasIndex("LineTypeParentID");

                    b.ToTable("LineTypes");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.Link", b =>
                {
                    b.Property<int>("LinkID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LinkDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProtocolID")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LinkID");

                    b.HasIndex("ProtocolID");

                    b.ToTable("Links");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.LocationInstance", b =>
                {
                    b.Property<int>("LocationInstanceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompanyLocationNo")
                        .HasColumnType("int");

                    b.Property<bool>("ContainsItems")
                        .HasColumnType("bit");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<bool>("IsEmptyShelf")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFull")
                        .HasColumnType("bit");

                    b.Property<int?>("LabPartID")
                        .HasColumnType("int");

                    b.Property<string>("LocationInstanceAbbrev")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocationInstanceName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LocationInstanceParentID")
                        .HasColumnType("int");

                    b.Property<int>("LocationNumber")
                        .HasColumnType("int");

                    b.Property<int?>("LocationRoomTypeID")
                        .HasColumnType("int");

                    b.Property<int>("LocationTypeID")
                        .HasColumnType("int");

                    b.Property<string>("Place")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Width")
                        .HasColumnType("int");

                    b.HasKey("LocationInstanceID");

                    b.HasIndex("LabPartID");

                    b.HasIndex("LocationInstanceParentID");

                    b.HasIndex("LocationRoomTypeID");

                    b.HasIndex("LocationTypeID");

                    b.ToTable("LocationInstances");

                    b.HasData(
                        new
                        {
                            LocationInstanceID = 1,
                            CompanyLocationNo = 0,
                            ContainsItems = false,
                            Height = 7,
                            IsEmptyShelf = false,
                            IsFull = false,
                            LocationInstanceName = "25°C",
                            LocationNumber = 0,
                            LocationTypeID = 500,
                            Width = 1
                        },
                        new
                        {
                            LocationInstanceID = 2,
                            CompanyLocationNo = 0,
                            ContainsItems = false,
                            Height = 0,
                            IsEmptyShelf = false,
                            IsFull = false,
                            LocationInstanceAbbrev = "L1",
                            LocationInstanceName = "Laboratory 1",
                            LocationInstanceParentID = 1,
                            LocationNumber = 0,
                            LocationRoomTypeID = 1,
                            LocationTypeID = 501,
                            Width = 1
                        },
                        new
                        {
                            LocationInstanceID = 3,
                            CompanyLocationNo = 0,
                            ContainsItems = false,
                            Height = 0,
                            IsEmptyShelf = false,
                            IsFull = false,
                            LocationInstanceAbbrev = "L2",
                            LocationInstanceName = "Laboratory 2",
                            LocationInstanceParentID = 1,
                            LocationNumber = 0,
                            LocationRoomTypeID = 1,
                            LocationTypeID = 501,
                            Width = 1
                        },
                        new
                        {
                            LocationInstanceID = 4,
                            CompanyLocationNo = 0,
                            ContainsItems = false,
                            Height = 0,
                            IsEmptyShelf = false,
                            IsFull = false,
                            LocationInstanceAbbrev = "TC1",
                            LocationInstanceName = "Tissue Culture 1",
                            LocationInstanceParentID = 1,
                            LocationNumber = 0,
                            LocationRoomTypeID = 2,
                            LocationTypeID = 501,
                            Width = 1
                        },
                        new
                        {
                            LocationInstanceID = 5,
                            CompanyLocationNo = 0,
                            ContainsItems = false,
                            Height = 0,
                            IsEmptyShelf = false,
                            IsFull = false,
                            LocationInstanceAbbrev = "E1",
                            LocationInstanceName = "Equipment Room 1",
                            LocationInstanceParentID = 1,
                            LocationNumber = 0,
                            LocationRoomTypeID = 3,
                            LocationTypeID = 501,
                            Width = 1
                        },
                        new
                        {
                            LocationInstanceID = 6,
                            CompanyLocationNo = 0,
                            ContainsItems = false,
                            Height = 0,
                            IsEmptyShelf = false,
                            IsFull = false,
                            LocationInstanceAbbrev = "R1",
                            LocationInstanceName = "Refrigerator Room 1",
                            LocationInstanceParentID = 1,
                            LocationNumber = 0,
                            LocationRoomTypeID = 4,
                            LocationTypeID = 501,
                            Width = 1
                        },
                        new
                        {
                            LocationInstanceID = 7,
                            CompanyLocationNo = 0,
                            ContainsItems = false,
                            Height = 0,
                            IsEmptyShelf = false,
                            IsFull = false,
                            LocationInstanceAbbrev = "W1",
                            LocationInstanceName = "Washing Room 1",
                            LocationInstanceParentID = 1,
                            LocationNumber = 0,
                            LocationRoomTypeID = 5,
                            LocationTypeID = 501,
                            Width = 1
                        },
                        new
                        {
                            LocationInstanceID = 8,
                            CompanyLocationNo = 0,
                            ContainsItems = false,
                            Height = 0,
                            IsEmptyShelf = false,
                            IsFull = false,
                            LocationInstanceAbbrev = "S1",
                            LocationInstanceName = "Storage Room 1",
                            LocationInstanceParentID = 1,
                            LocationNumber = 0,
                            LocationRoomTypeID = 6,
                            LocationTypeID = 501,
                            Width = 1
                        });
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.LocationRoomType", b =>
                {
                    b.Property<int>("LocationRoomTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LocationAbbreviation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocationRoomTypeDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LocationRoomTypeID");

                    b.ToTable("LocationRoomTypes");

                    b.HasData(
                        new
                        {
                            LocationRoomTypeID = 1,
                            LocationAbbreviation = "L",
                            LocationRoomTypeDescription = "Laboratory"
                        },
                        new
                        {
                            LocationRoomTypeID = 2,
                            LocationAbbreviation = "TC",
                            LocationRoomTypeDescription = "Tissue Culture"
                        },
                        new
                        {
                            LocationRoomTypeID = 3,
                            LocationAbbreviation = "E",
                            LocationRoomTypeDescription = "Equipment Room"
                        },
                        new
                        {
                            LocationRoomTypeID = 4,
                            LocationAbbreviation = "R",
                            LocationRoomTypeDescription = "Refrigerator Room"
                        },
                        new
                        {
                            LocationRoomTypeID = 5,
                            LocationAbbreviation = "W",
                            LocationRoomTypeDescription = "Washing Room"
                        },
                        new
                        {
                            LocationRoomTypeID = 6,
                            LocationAbbreviation = "S",
                            LocationRoomTypeDescription = "Storage Room"
                        });
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.LocationType", b =>
                {
                    b.Property<int>("LocationTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Depth")
                        .HasColumnType("int");

                    b.Property<int>("Limit")
                        .HasColumnType("int");

                    b.Property<int?>("LocationTypeChildID")
                        .HasColumnType("int");

                    b.Property<string>("LocationTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocationTypeNameAbbre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LocationTypeParentID")
                        .HasColumnType("int");

                    b.Property<string>("LocationTypePluralName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LocationTypeID");

                    b.HasIndex("LocationTypeChildID");

                    b.HasIndex("LocationTypeParentID");

                    b.ToTable("LocationTypes");

                    b.HasData(
                        new
                        {
                            LocationTypeID = 100,
                            Depth = 0,
                            Limit = 0,
                            LocationTypeChildID = 101,
                            LocationTypeName = "-196°C",
                            LocationTypePluralName = "-196°C"
                        },
                        new
                        {
                            LocationTypeID = 101,
                            Depth = 1,
                            Limit = 0,
                            LocationTypeChildID = 102,
                            LocationTypeName = "Rack",
                            LocationTypeNameAbbre = "R",
                            LocationTypeParentID = 100,
                            LocationTypePluralName = "Racks"
                        },
                        new
                        {
                            LocationTypeID = 102,
                            Depth = 2,
                            Limit = 0,
                            LocationTypeChildID = 103,
                            LocationTypeName = "Box",
                            LocationTypeNameAbbre = "B",
                            LocationTypeParentID = 101,
                            LocationTypePluralName = "Boxes"
                        },
                        new
                        {
                            LocationTypeID = 103,
                            Depth = 3,
                            Limit = 1,
                            LocationTypeName = "Box Unit",
                            LocationTypeNameAbbre = "B",
                            LocationTypeParentID = 102,
                            LocationTypePluralName = "Box Units"
                        },
                        new
                        {
                            LocationTypeID = 200,
                            Depth = 0,
                            Limit = 0,
                            LocationTypeChildID = 201,
                            LocationTypeName = "-80°C",
                            LocationTypePluralName = "-80°C"
                        },
                        new
                        {
                            LocationTypeID = 201,
                            Depth = 1,
                            Limit = 0,
                            LocationTypeChildID = 202,
                            LocationTypeName = "Floor",
                            LocationTypeNameAbbre = "F",
                            LocationTypeParentID = 200,
                            LocationTypePluralName = "Floors"
                        },
                        new
                        {
                            LocationTypeID = 202,
                            Depth = 2,
                            Limit = 0,
                            LocationTypeChildID = 203,
                            LocationTypeName = "Rack",
                            LocationTypeNameAbbre = "R",
                            LocationTypeParentID = 201,
                            LocationTypePluralName = "Racks"
                        },
                        new
                        {
                            LocationTypeID = 203,
                            Depth = 3,
                            Limit = 0,
                            LocationTypeChildID = 204,
                            LocationTypeName = "Shelf",
                            LocationTypeNameAbbre = "S",
                            LocationTypeParentID = 202,
                            LocationTypePluralName = "Shelves"
                        },
                        new
                        {
                            LocationTypeID = 204,
                            Depth = 4,
                            Limit = 0,
                            LocationTypeChildID = 205,
                            LocationTypeName = "Box",
                            LocationTypeNameAbbre = "B",
                            LocationTypeParentID = 203,
                            LocationTypePluralName = "Boxes"
                        },
                        new
                        {
                            LocationTypeID = 205,
                            Depth = 5,
                            Limit = 1,
                            LocationTypeName = "Box Unit",
                            LocationTypeNameAbbre = "B",
                            LocationTypeParentID = 204,
                            LocationTypePluralName = "Box Units"
                        },
                        new
                        {
                            LocationTypeID = 300,
                            Depth = 0,
                            Limit = 0,
                            LocationTypeChildID = 301,
                            LocationTypeName = "-20°C",
                            LocationTypePluralName = "-20°C"
                        },
                        new
                        {
                            LocationTypeID = 301,
                            Depth = 1,
                            Limit = 0,
                            LocationTypeName = "Shelf",
                            LocationTypeNameAbbre = "S",
                            LocationTypeParentID = 300,
                            LocationTypePluralName = "Shelves"
                        },
                        new
                        {
                            LocationTypeID = 400,
                            Depth = 0,
                            Limit = 0,
                            LocationTypeChildID = 401,
                            LocationTypeName = "4°C",
                            LocationTypePluralName = "4°C"
                        },
                        new
                        {
                            LocationTypeID = 401,
                            Depth = 1,
                            Limit = 0,
                            LocationTypeName = "Shelf",
                            LocationTypeNameAbbre = "S",
                            LocationTypeParentID = 400,
                            LocationTypePluralName = "Shelves"
                        },
                        new
                        {
                            LocationTypeID = 500,
                            Depth = 0,
                            Limit = 0,
                            LocationTypeChildID = 501,
                            LocationTypeName = "25°C",
                            LocationTypePluralName = "25°C"
                        },
                        new
                        {
                            LocationTypeID = 501,
                            Depth = 1,
                            Limit = 0,
                            LocationTypeChildID = 502,
                            LocationTypeName = "Location",
                            LocationTypeParentID = 500,
                            LocationTypePluralName = "Locations"
                        },
                        new
                        {
                            LocationTypeID = 502,
                            Depth = 2,
                            Limit = 0,
                            LocationTypeChildID = 503,
                            LocationTypeName = "Lab Part",
                            LocationTypeParentID = 501,
                            LocationTypePluralName = "Lab Parts"
                        },
                        new
                        {
                            LocationTypeID = 503,
                            Depth = 3,
                            Limit = 0,
                            LocationTypeName = "Section",
                            LocationTypeNameAbbre = "S",
                            LocationTypeParentID = 502,
                            LocationTypePluralName = "Sections"
                        });
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.MaritalStatus", b =>
                {
                    b.Property<int>("MaritalStatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MaritalStatusID");

                    b.ToTable("MaritalStatuses");

                    b.HasData(
                        new
                        {
                            MaritalStatusID = 1,
                            Description = "Married"
                        },
                        new
                        {
                            MaritalStatusID = 2,
                            Description = "Single"
                        },
                        new
                        {
                            MaritalStatusID = 3,
                            Description = "Divorced"
                        });
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.Material", b =>
                {
                    b.Property<int>("MaterialID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Info")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaterialCategoryID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.HasKey("MaterialID");

                    b.HasIndex("MaterialCategoryID");

                    b.HasIndex("ProductID");

                    b.ToTable("Materials");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.MaterialCategory", b =>
                {
                    b.Property<int>("MaterialCategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("MaterialCategoryDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MaterialCategoryID");

                    b.ToTable("MaterialCategories");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.MaterialProtocol", b =>
                {
                    b.Property<int>("MaterialID")
                        .HasColumnType("int");

                    b.Property<int>("ProtocolID")
                        .HasColumnType("int");

                    b.HasKey("MaterialID", "ProtocolID");

                    b.HasIndex("ProtocolID");

                    b.ToTable("MaterialProtocols");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.NotificationStatus", b =>
                {
                    b.Property<int>("NotificationStatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NotificationStatusID");

                    b.ToTable("NotificationStatuses");

                    b.HasDiscriminator<string>("Discriminator").HasValue("NotificationStatus");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.OffDayType", b =>
                {
                    b.Property<int>("OffDayTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OffDayTypeID");

                    b.ToTable("OffDayTypes");

                    b.HasData(
                        new
                        {
                            OffDayTypeID = 1,
                            Description = "Sick Day"
                        },
                        new
                        {
                            OffDayTypeID = 2,
                            Description = "Vacation Day"
                        },
                        new
                        {
                            OffDayTypeID = 3,
                            Description = "Maternity Leave"
                        },
                        new
                        {
                            OffDayTypeID = 4,
                            Description = "Special Day"
                        });
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.ParentCategory", b =>
                {
                    b.Property<int>("ParentCategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryTypeID")
                        .HasColumnType("int");

                    b.Property<string>("ParentCategoryDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isProprietary")
                        .HasColumnType("bit");

                    b.HasKey("ParentCategoryID");

                    b.HasIndex("CategoryTypeID");

                    b.ToTable("ParentCategories");

                    b.HasData(
                        new
                        {
                            ParentCategoryID = 1,
                            CategoryTypeID = 1,
                            ParentCategoryDescription = "Plastics",
                            isProprietary = false
                        },
                        new
                        {
                            ParentCategoryID = 2,
                            CategoryTypeID = 1,
                            ParentCategoryDescription = "Reagents And Chemicals",
                            isProprietary = false
                        },
                        new
                        {
                            ParentCategoryID = 3,
                            CategoryTypeID = 1,
                            ParentCategoryDescription = "Cells",
                            isProprietary = false
                        },
                        new
                        {
                            ParentCategoryID = 4,
                            CategoryTypeID = 1,
                            ParentCategoryDescription = "Reusables",
                            isProprietary = false
                        },
                        new
                        {
                            ParentCategoryID = 6,
                            CategoryTypeID = 2,
                            ParentCategoryDescription = "IT",
                            isProprietary = false
                        },
                        new
                        {
                            ParentCategoryID = 8,
                            CategoryTypeID = 2,
                            ParentCategoryDescription = "Day To Day",
                            isProprietary = false
                        },
                        new
                        {
                            ParentCategoryID = 9,
                            CategoryTypeID = 2,
                            ParentCategoryDescription = "Travel",
                            isProprietary = false
                        },
                        new
                        {
                            ParentCategoryID = 10,
                            CategoryTypeID = 2,
                            ParentCategoryDescription = "Advisment",
                            isProprietary = false
                        },
                        new
                        {
                            ParentCategoryID = 11,
                            CategoryTypeID = 2,
                            ParentCategoryDescription = "Regulations",
                            isProprietary = false
                        },
                        new
                        {
                            ParentCategoryID = 12,
                            CategoryTypeID = 2,
                            ParentCategoryDescription = "Governments",
                            isProprietary = false
                        },
                        new
                        {
                            ParentCategoryID = 13,
                            CategoryTypeID = 2,
                            ParentCategoryDescription = "General",
                            isProprietary = false
                        },
                        new
                        {
                            ParentCategoryID = 7,
                            CategoryTypeID = 1,
                            ParentCategoryDescription = "Proprietary",
                            isProprietary = true
                        });
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.ParentQuote", b =>
                {
                    b.Property<int>("ParentQuoteID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("QuoteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("QuoteNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuoteStatusID")
                        .HasColumnType("int");

                    b.HasKey("ParentQuoteID");

                    b.HasIndex("ApplicationUserID");

                    b.HasIndex("QuoteStatusID");

                    b.ToTable("ParentQuotes");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.ParentRequest", b =>
                {
                    b.Property<int>("ParentRequestID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Credit")
                        .HasColumnType("float");

                    b.Property<double>("Discount")
                        .HasColumnType("float");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("OrderNumber")
                        .HasColumnType("int");

                    b.Property<double>("Shipping")
                        .HasColumnType("float");

                    b.Property<string>("SupplierOrderNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Taxes")
                        .HasColumnType("float");

                    b.HasKey("ParentRequestID");

                    b.HasIndex("ApplicationUserID");

                    b.ToTable("ParentRequests");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.Payment", b =>
                {
                    b.Property<int>("PaymentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CheckNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CompanyAccountID")
                        .HasColumnType("int");

                    b.Property<int?>("CreditCardID")
                        .HasColumnType("int");

                    b.Property<bool>("HasInvoice")
                        .HasColumnType("bit");

                    b.Property<int>("InstallmentNumber")
                        .HasColumnType("int");

                    b.Property<int?>("InvoiceID")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<int?>("ParentRequestID")
                        .HasColumnType("int");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PaymentReferenceDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PaymentTypeID")
                        .HasColumnType("int");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RequestID")
                        .HasColumnType("int");

                    b.Property<decimal>("Sum")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("PaymentID");

                    b.HasIndex("CompanyAccountID");

                    b.HasIndex("CreditCardID");

                    b.HasIndex("InvoiceID");

                    b.HasIndex("ParentRequestID");

                    b.HasIndex("PaymentTypeID");

                    b.HasIndex("RequestID");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.PaymentStatus", b =>
                {
                    b.Property<int>("PaymentStatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PaymentStatusDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PaymentStatusID");

                    b.ToTable("PaymentStatuses");

                    b.HasData(
                        new
                        {
                            PaymentStatusID = 2,
                            PaymentStatusDescription = "+ 30"
                        },
                        new
                        {
                            PaymentStatusID = 3,
                            PaymentStatusDescription = "Pay Now"
                        },
                        new
                        {
                            PaymentStatusID = 4,
                            PaymentStatusDescription = "Pay Upon Arrival"
                        },
                        new
                        {
                            PaymentStatusID = 5,
                            PaymentStatusDescription = "Installments"
                        },
                        new
                        {
                            PaymentStatusID = 7,
                            PaymentStatusDescription = "Standing Order"
                        },
                        new
                        {
                            PaymentStatusID = 8,
                            PaymentStatusDescription = "Specify Payment Later"
                        });
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.PaymentType", b =>
                {
                    b.Property<int>("PaymentTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PaymentTypeDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PaymentTypeID");

                    b.ToTable("PaymentTypes");

                    b.HasData(
                        new
                        {
                            PaymentTypeID = 1,
                            PaymentTypeDescription = "Credit Card"
                        },
                        new
                        {
                            PaymentTypeID = 2,
                            PaymentTypeDescription = "Check"
                        },
                        new
                        {
                            PaymentTypeID = 3,
                            PaymentTypeDescription = "Wire"
                        });
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.PhysicalAddress", b =>
                {
                    b.Property<int>("PhysicalAddressID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmployeeID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PhysicalAddressID");

                    b.HasIndex("EmployeeID");

                    b.ToTable("PhysicalAddresses");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.Product", b =>
                {
                    b.Property<int>("ProductID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CatalogNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Handeling")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductComment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ProductCreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("ProductHebrewName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductMedia")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductSubcategoryID")
                        .HasColumnType("int");

                    b.Property<int?>("QuantityPerUnit")
                        .HasColumnType("int");

                    b.Property<int?>("ReorderLevel")
                        .HasColumnType("int");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UnitsInOrder")
                        .HasColumnType("int");

                    b.Property<int?>("UnitsInStock")
                        .HasColumnType("int");

                    b.Property<int?>("VendorID")
                        .HasColumnType("int");

                    b.HasKey("ProductID");

                    b.HasIndex("ProductSubcategoryID");

                    b.HasIndex("VendorID");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.ProductSubcategory", b =>
                {
                    b.Property<int>("ProductSubcategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ImageURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ParentCategoryID")
                        .HasColumnType("int");

                    b.Property<string>("ProductSubcategoryDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductSubcategoryID");

                    b.HasIndex("ParentCategoryID");

                    b.ToTable("ProductSubcategories");

                    b.HasData(
                        new
                        {
                            ProductSubcategoryID = 102,
                            ImageURL = "/images/css/CategoryImages/PCR.png",
                            ParentCategoryID = 1,
                            ProductSubcategoryDescription = "PCR"
                        },
                        new
                        {
                            ProductSubcategoryID = 104,
                            ImageURL = "/images/css/CategoryImages/culture_plates.png",
                            ParentCategoryID = 1,
                            ProductSubcategoryDescription = "Cell Culture Plates"
                        },
                        new
                        {
                            ProductSubcategoryID = 105,
                            ParentCategoryID = 1,
                            ProductSubcategoryDescription = "Petri Dishes"
                        },
                        new
                        {
                            ProductSubcategoryID = 106,
                            ParentCategoryID = 1,
                            ProductSubcategoryDescription = "Tips"
                        },
                        new
                        {
                            ProductSubcategoryID = 107,
                            ImageURL = "/images/css/CategoryImages/pipettes.png",
                            ParentCategoryID = 1,
                            ProductSubcategoryDescription = "Pipets"
                        },
                        new
                        {
                            ProductSubcategoryID = 108,
                            ImageURL = "/images/css/CategoryImages/tubes.png",
                            ParentCategoryID = 1,
                            ProductSubcategoryDescription = "Tubes"
                        },
                        new
                        {
                            ProductSubcategoryID = 109,
                            ParentCategoryID = 1,
                            ProductSubcategoryDescription = "Robot Tips"
                        },
                        new
                        {
                            ProductSubcategoryID = 201,
                            ImageURL = "/images/css/CategoryImages/chemical_powder.png",
                            ParentCategoryID = 2,
                            ProductSubcategoryDescription = "Chemical Powder"
                        },
                        new
                        {
                            ProductSubcategoryID = 202,
                            ImageURL = "/images/css/CategoryImages/dna_enzyme.png",
                            ParentCategoryID = 2,
                            ProductSubcategoryDescription = "Enzyme"
                        },
                        new
                        {
                            ProductSubcategoryID = 203,
                            ImageURL = "/images/css/CategoryImages/antibody.png",
                            ParentCategoryID = 2,
                            ProductSubcategoryDescription = "Antibodies"
                        },
                        new
                        {
                            ProductSubcategoryID = 204,
                            ImageURL = "/images/css/CategoryImages/cell_media.png",
                            ParentCategoryID = 2,
                            ProductSubcategoryDescription = "Cell Media"
                        },
                        new
                        {
                            ProductSubcategoryID = 205,
                            ImageURL = "/images/css/CategoryImages/chemical_solution.png",
                            ParentCategoryID = 2,
                            ProductSubcategoryDescription = "Chemicals Solution"
                        },
                        new
                        {
                            ProductSubcategoryID = 206,
                            ImageURL = "/images/css/CategoryImages/kit.png",
                            ParentCategoryID = 2,
                            ProductSubcategoryDescription = "Kit"
                        },
                        new
                        {
                            ProductSubcategoryID = 207,
                            ImageURL = "/images/css/CategoryImages/PCR.png",
                            ParentCategoryID = 2,
                            ProductSubcategoryDescription = "PCR"
                        },
                        new
                        {
                            ProductSubcategoryID = 208,
                            ImageURL = "/images/css/CategoryImages/ddPCR.png",
                            ParentCategoryID = 2,
                            ProductSubcategoryDescription = "ddPCR"
                        },
                        new
                        {
                            ProductSubcategoryID = 209,
                            ParentCategoryID = 2,
                            ProductSubcategoryDescription = "RT-PCR"
                        },
                        new
                        {
                            ProductSubcategoryID = 210,
                            ImageURL = "/images/css/CategoryImages/dna_probes.png",
                            ParentCategoryID = 2,
                            ProductSubcategoryDescription = "Probes"
                        },
                        new
                        {
                            ProductSubcategoryID = 211,
                            ImageURL = "/images/css/CategoryImages/oligo.png",
                            ParentCategoryID = 2,
                            ProductSubcategoryDescription = "Oligo"
                        },
                        new
                        {
                            ProductSubcategoryID = 212,
                            ImageURL = "/images/css/CategoryImages/media_supplement.png",
                            ParentCategoryID = 2,
                            ProductSubcategoryDescription = "Media Supplement"
                        },
                        new
                        {
                            ProductSubcategoryID = 301,
                            ParentCategoryID = 3,
                            ProductSubcategoryDescription = "Cells"
                        },
                        new
                        {
                            ProductSubcategoryID = 401,
                            ParentCategoryID = 4,
                            ProductSubcategoryDescription = "Reusables"
                        },
                        new
                        {
                            ProductSubcategoryID = 801,
                            ImageURL = "/images/css/CategoryImages/rent.png",
                            ParentCategoryID = 8,
                            ProductSubcategoryDescription = "Rent"
                        },
                        new
                        {
                            ProductSubcategoryID = 602,
                            ImageURL = "/images/css/CategoryImages/communications.png",
                            ParentCategoryID = 6,
                            ProductSubcategoryDescription = "Communication"
                        },
                        new
                        {
                            ProductSubcategoryID = 808,
                            ImageURL = "/images/css/CategoryImages/branding.png",
                            ParentCategoryID = 8,
                            ProductSubcategoryDescription = "Branding"
                        },
                        new
                        {
                            ProductSubcategoryID = 809,
                            ImageURL = "/images/css/CategoryImages/shippment.png",
                            ParentCategoryID = 8,
                            ProductSubcategoryDescription = "Shipment"
                        },
                        new
                        {
                            ProductSubcategoryID = 804,
                            ImageURL = "/images/css/CategoryImages/renovation.png",
                            ParentCategoryID = 8,
                            ProductSubcategoryDescription = "Renovation"
                        },
                        new
                        {
                            ProductSubcategoryID = 812,
                            ImageURL = "/images/css/CategoryImages/bookeeping.png",
                            ParentCategoryID = 8,
                            ProductSubcategoryDescription = "Bookkeeping"
                        },
                        new
                        {
                            ProductSubcategoryID = 1001,
                            ImageURL = "/images/css/CategoryImages/legal.png",
                            ParentCategoryID = 10,
                            ProductSubcategoryDescription = "Law"
                        },
                        new
                        {
                            ProductSubcategoryID = 1201,
                            ImageURL = "/images/css/CategoryImages/taxes.png",
                            ParentCategoryID = 12,
                            ProductSubcategoryDescription = "Tax"
                        },
                        new
                        {
                            ProductSubcategoryID = 811,
                            ImageURL = "/images/css/CategoryImages/books.png",
                            ParentCategoryID = 8,
                            ProductSubcategoryDescription = "Books And Journal"
                        },
                        new
                        {
                            ProductSubcategoryID = 1004,
                            ImageURL = "/images/css/CategoryImages/clinical_regulation.png",
                            ParentCategoryID = 10,
                            ProductSubcategoryDescription = "Clinical Experiments"
                        },
                        new
                        {
                            ProductSubcategoryID = 901,
                            ImageURL = "/images/css/CategoryImages/conference.png",
                            ParentCategoryID = 9,
                            ProductSubcategoryDescription = "Conference"
                        },
                        new
                        {
                            ProductSubcategoryID = 807,
                            ImageURL = "/images/css/CategoryImages/company_events.png",
                            ParentCategoryID = 8,
                            ProductSubcategoryDescription = "Company Events"
                        },
                        new
                        {
                            ProductSubcategoryID = 805,
                            ImageURL = "/images/css/CategoryImages/insurance.png",
                            ParentCategoryID = 8,
                            ProductSubcategoryDescription = "Insurance"
                        },
                        new
                        {
                            ProductSubcategoryID = 1301,
                            ImageURL = "/images/css/CategoryImages/general.png",
                            ParentCategoryID = 13,
                            ProductSubcategoryDescription = "General"
                        },
                        new
                        {
                            ProductSubcategoryID = 1102,
                            ImageURL = "/images/css/CategoryImages/general.png",
                            ParentCategoryID = 11,
                            ProductSubcategoryDescription = "General"
                        },
                        new
                        {
                            ProductSubcategoryID = 604,
                            ImageURL = "/images/css/CategoryImages/general.png",
                            ParentCategoryID = 6,
                            ProductSubcategoryDescription = "General"
                        },
                        new
                        {
                            ProductSubcategoryID = 814,
                            ImageURL = "/images/css/CategoryImages/general.png",
                            ParentCategoryID = 8,
                            ProductSubcategoryDescription = "General"
                        },
                        new
                        {
                            ProductSubcategoryID = 1203,
                            ImageURL = "/images/css/CategoryImages/general.png",
                            ParentCategoryID = 12,
                            ProductSubcategoryDescription = "General"
                        },
                        new
                        {
                            ProductSubcategoryID = 1005,
                            ImageURL = "/images/css/CategoryImages/general.png",
                            ParentCategoryID = 10,
                            ProductSubcategoryDescription = "General"
                        },
                        new
                        {
                            ProductSubcategoryID = 905,
                            ImageURL = "/images/css/CategoryImages/general.png",
                            ParentCategoryID = 9,
                            ProductSubcategoryDescription = "General"
                        },
                        new
                        {
                            ProductSubcategoryID = 601,
                            ImageURL = "/images/css/CategoryImages/software.png",
                            ParentCategoryID = 6,
                            ProductSubcategoryDescription = "Hardware"
                        },
                        new
                        {
                            ProductSubcategoryID = 603,
                            ImageURL = "/images/css/CategoryImages/software.png",
                            ParentCategoryID = 6,
                            ProductSubcategoryDescription = "Cybersecurity"
                        },
                        new
                        {
                            ProductSubcategoryID = 903,
                            ImageURL = "/images/css/CategoryImages/hotels.png",
                            ParentCategoryID = 9,
                            ProductSubcategoryDescription = "Hotels"
                        },
                        new
                        {
                            ProductSubcategoryID = 902,
                            ImageURL = "/images/css/CategoryImages/flight_tickets.png",
                            ParentCategoryID = 9,
                            ProductSubcategoryDescription = "Flight Tickets"
                        },
                        new
                        {
                            ProductSubcategoryID = 1002,
                            ImageURL = "/images/css/CategoryImages/sciemtific_advice.png",
                            ParentCategoryID = 10,
                            ProductSubcategoryDescription = "Scientific"
                        },
                        new
                        {
                            ProductSubcategoryID = 1003,
                            ImageURL = "/images/css/CategoryImages/business_advice.png",
                            ParentCategoryID = 10,
                            ProductSubcategoryDescription = "Business"
                        },
                        new
                        {
                            ProductSubcategoryID = 1101,
                            ImageURL = "/images/css/CategoryImages/safety.png",
                            ParentCategoryID = 11,
                            ProductSubcategoryDescription = "Safety"
                        },
                        new
                        {
                            ProductSubcategoryID = 904,
                            ImageURL = "/images/css/CategoryImages/food.png",
                            ParentCategoryID = 9,
                            ProductSubcategoryDescription = "Food"
                        },
                        new
                        {
                            ProductSubcategoryID = 810,
                            ImageURL = "/images/css/CategoryImages/food.png",
                            ParentCategoryID = 8,
                            ProductSubcategoryDescription = "Food"
                        },
                        new
                        {
                            ProductSubcategoryID = 806,
                            ImageURL = "/images/css/CategoryImages/furniture.png",
                            ParentCategoryID = 8,
                            ProductSubcategoryDescription = "Furniture"
                        },
                        new
                        {
                            ProductSubcategoryID = 802,
                            ParentCategoryID = 8,
                            ProductSubcategoryDescription = "Electricity"
                        },
                        new
                        {
                            ProductSubcategoryID = 803,
                            ParentCategoryID = 8,
                            ProductSubcategoryDescription = "Parking"
                        },
                        new
                        {
                            ProductSubcategoryID = 813,
                            ImageURL = "/images/css/CategoryImages/furniture.png",
                            ParentCategoryID = 8,
                            ProductSubcategoryDescription = "Graphics"
                        },
                        new
                        {
                            ProductSubcategoryID = 1202,
                            ImageURL = "/images/css/CategoryImages/furniture.png",
                            ParentCategoryID = 12,
                            ProductSubcategoryDescription = "Fees"
                        },
                        new
                        {
                            ProductSubcategoryID = 701,
                            ImageURL = "/images/css/CategoryImages/virus.png",
                            ParentCategoryID = 7,
                            ProductSubcategoryDescription = "Virus"
                        },
                        new
                        {
                            ProductSubcategoryID = 702,
                            ImageURL = "/images/css/CategoryImages/plasmid.png",
                            ParentCategoryID = 7,
                            ProductSubcategoryDescription = "Plasmid"
                        },
                        new
                        {
                            ProductSubcategoryID = 703,
                            ParentCategoryID = 7,
                            ProductSubcategoryDescription = "Probes"
                        },
                        new
                        {
                            ProductSubcategoryID = 704,
                            ParentCategoryID = 7,
                            ProductSubcategoryDescription = "Cells"
                        },
                        new
                        {
                            ProductSubcategoryID = 705,
                            ParentCategoryID = 7,
                            ProductSubcategoryDescription = "Bacteria with Plasmids"
                        },
                        new
                        {
                            ProductSubcategoryID = 706,
                            ParentCategoryID = 7,
                            ProductSubcategoryDescription = "Blood"
                        },
                        new
                        {
                            ProductSubcategoryID = 707,
                            ParentCategoryID = 7,
                            ProductSubcategoryDescription = "Serum"
                        });
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.Project", b =>
                {
                    b.Property<int>("ProjectID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ProjectDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProjectID");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            ProjectID = 1,
                            ProjectDescription = "Rejuvenation"
                        },
                        new
                        {
                            ProjectID = 2,
                            ProjectDescription = "Delivery Systems"
                        },
                        new
                        {
                            ProjectID = 3,
                            ProjectDescription = "Biomarkers"
                        },
                        new
                        {
                            ProjectID = 4,
                            ProjectDescription = "Clinical Trials"
                        },
                        new
                        {
                            ProjectID = 5,
                            ProjectDescription = "General"
                        });
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.Protocol", b =>
                {
                    b.Property<int>("ProtocolID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserCreatorID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProtocolSubCategoryID")
                        .HasColumnType("int");

                    b.Property<int>("ProtocolTypeID")
                        .HasColumnType("int");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Theory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UniqueCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VersionNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProtocolID");

                    b.HasIndex("ApplicationUserCreatorID");

                    b.HasIndex("ProtocolSubCategoryID");

                    b.HasIndex("ProtocolTypeID");

                    b.ToTable("Protocols");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.ProtocolCategory", b =>
                {
                    b.Property<int>("ProtocolCategoryTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ProtocolCategoryDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProtocolCategoryTypeID");

                    b.ToTable("ProtocolCategories");

                    b.HasData(
                        new
                        {
                            ProtocolCategoryTypeID = 1,
                            ProtocolCategoryDescription = "Rejuvenation"
                        },
                        new
                        {
                            ProtocolCategoryTypeID = 2,
                            ProtocolCategoryDescription = "Biomarkers"
                        },
                        new
                        {
                            ProtocolCategoryTypeID = 3,
                            ProtocolCategoryDescription = "Delivery Systems"
                        });
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.ProtocolComment", b =>
                {
                    b.Property<int>("ProtocolCommentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserCreatorID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CommentTimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProtocolCommentDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProtocolCommmentType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProtocolCommentID");

                    b.HasIndex("ApplicationUserCreatorID");

                    b.ToTable("ProtocolComments");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.ProtocolInstance", b =>
                {
                    b.Property<int>("ProtocolInstanceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CurrentLineID")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProtocolID")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ProtocolInstanceID");

                    b.HasIndex("ApplicationUserID");

                    b.HasIndex("CurrentLineID");

                    b.HasIndex("ProtocolID");

                    b.ToTable("ProtocolInstances");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.ProtocolInstanceResult", b =>
                {
                    b.Property<int>("ResultID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProtocolInstanceID")
                        .HasColumnType("int");

                    b.Property<string>("ResultDesciption")
                        .HasColumnType("ntext");

                    b.HasKey("ResultID");

                    b.HasIndex("ProtocolInstanceID");

                    b.ToTable("ProtocolInstanceResults");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.ProtocolSubCategory", b =>
                {
                    b.Property<int>("ProtocolSubCategoryTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProtocolCategoryTypeID")
                        .HasColumnType("int");

                    b.Property<string>("ProtocolSubCategoryTypeDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProtocolSubCategoryTypeID");

                    b.HasIndex("ProtocolCategoryTypeID");

                    b.ToTable("ProtocolSubCategories");

                    b.HasData(
                        new
                        {
                            ProtocolSubCategoryTypeID = 1,
                            ProtocolCategoryTypeID = 1,
                            ProtocolSubCategoryTypeDescription = "Telomeres "
                        },
                        new
                        {
                            ProtocolSubCategoryTypeID = 2,
                            ProtocolCategoryTypeID = 1,
                            ProtocolSubCategoryTypeDescription = "Epigenetics"
                        },
                        new
                        {
                            ProtocolSubCategoryTypeID = 3,
                            ProtocolCategoryTypeID = 2,
                            ProtocolSubCategoryTypeDescription = "Telomeres "
                        },
                        new
                        {
                            ProtocolSubCategoryTypeID = 4,
                            ProtocolCategoryTypeID = 2,
                            ProtocolSubCategoryTypeDescription = "Transcription"
                        },
                        new
                        {
                            ProtocolSubCategoryTypeID = 5,
                            ProtocolCategoryTypeID = 2,
                            ProtocolSubCategoryTypeDescription = "Methylation"
                        },
                        new
                        {
                            ProtocolSubCategoryTypeID = 6,
                            ProtocolCategoryTypeID = 3,
                            ProtocolSubCategoryTypeDescription = "AAV"
                        });
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.ProtocolType", b =>
                {
                    b.Property<int>("ProtocolTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ProtocolTypeDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProtocolTypeID");

                    b.ToTable("ProtocolTypes");

                    b.HasData(
                        new
                        {
                            ProtocolTypeID = 1,
                            ProtocolTypeDescription = "Research"
                        },
                        new
                        {
                            ProtocolTypeID = 2,
                            ProtocolTypeDescription = "Kit"
                        },
                        new
                        {
                            ProtocolTypeID = 3,
                            ProtocolTypeDescription = "SOP"
                        },
                        new
                        {
                            ProtocolTypeID = 4,
                            ProtocolTypeDescription = "Buffer"
                        },
                        new
                        {
                            ProtocolTypeID = 5,
                            ProtocolTypeDescription = "Robiotic"
                        },
                        new
                        {
                            ProtocolTypeID = 6,
                            ProtocolTypeDescription = "Maintenance"
                        });
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.QuoteStatus", b =>
                {
                    b.Property<int>("QuoteStatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("QuoteStatusDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("QuoteStatusID");

                    b.ToTable("QuoteStatuses");

                    b.HasData(
                        new
                        {
                            QuoteStatusID = -1,
                            QuoteStatusDescription = "NoStatus"
                        },
                        new
                        {
                            QuoteStatusID = 1,
                            QuoteStatusDescription = "AwaitingRequestOfQuote"
                        },
                        new
                        {
                            QuoteStatusID = 2,
                            QuoteStatusDescription = "AwaitingQuoteResponse"
                        },
                        new
                        {
                            QuoteStatusID = 3,
                            QuoteStatusDescription = "AwaitingQuoteOrder"
                        },
                        new
                        {
                            QuoteStatusID = 4,
                            QuoteStatusDescription = "QuoteRecieved"
                        });
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.Report", b =>
                {
                    b.Property<int>("ReportID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ReportDescription")
                        .HasColumnType("ntext");

                    b.HasKey("ReportID");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.Request", b =>
                {
                    b.Property<int>("RequestID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Amount")
                        .HasColumnType("int");

                    b.Property<long?>("AmountWithInLocation")
                        .HasColumnType("bigint");

                    b.Property<long?>("AmountWithOutLocation")
                        .HasColumnType("bigint");

                    b.Property<string>("ApplicationUserCreatorID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ApplicationUserReceiverID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ArrivalDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Batch")
                        .HasColumnType("int");

                    b.Property<DateTime?>("BatchExpiration")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Currency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ExchangeRate")
                        .HasColumnType("decimal(18,3)");

                    b.Property<byte?>("ExpectedSupplyDays")
                        .HasColumnType("tinyint");

                    b.Property<bool?>("IncludeVAT")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<long?>("Installments")
                        .HasColumnType("bigint");

                    b.Property<int?>("InvoiceID")
                        .HasColumnType("int");

                    b.Property<bool>("IsClarify")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPartial")
                        .HasColumnType("bit");

                    b.Property<string>("NoteForClarifyDelivery")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NoteForPartialDelivery")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NoteToSupplier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentQuoteID")
                        .HasColumnType("int");

                    b.Property<int?>("ParentRequestID")
                        .HasColumnType("int");

                    b.Property<int?>("Passage")
                        .HasColumnType("int");

                    b.Property<int?>("PaymentStatusID")
                        .HasColumnType("int");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<int>("RequestStatusID")
                        .HasColumnType("int");

                    b.Property<int?>("SubProjectID")
                        .HasColumnType("int");

                    b.Property<long?>("SubSubUnit")
                        .HasColumnType("bigint");

                    b.Property<int?>("SubSubUnitTypeID")
                        .HasColumnType("int");

                    b.Property<long?>("SubUnit")
                        .HasColumnType("bigint");

                    b.Property<int?>("SubUnitTypeID")
                        .HasColumnType("int");

                    b.Property<int?>("Terms")
                        .HasColumnType("int");

                    b.Property<string>("URL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Unit")
                        .HasColumnType("bigint");

                    b.Property<int?>("UnitTypeID")
                        .HasColumnType("int");

                    b.Property<byte?>("Warranty")
                        .HasColumnType("tinyint");

                    b.HasKey("RequestID");

                    b.HasIndex("ApplicationUserCreatorID");

                    b.HasIndex("ApplicationUserReceiverID");

                    b.HasIndex("InvoiceID");

                    b.HasIndex("ParentQuoteID");

                    b.HasIndex("ParentRequestID");

                    b.HasIndex("PaymentStatusID");

                    b.HasIndex("ProductID");

                    b.HasIndex("RequestStatusID");

                    b.HasIndex("SubProjectID");

                    b.HasIndex("SubSubUnitTypeID");

                    b.HasIndex("SubUnitTypeID");

                    b.HasIndex("UnitTypeID");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.RequestLocationInstance", b =>
                {
                    b.Property<int>("RequestID")
                        .HasColumnType("int");

                    b.Property<int>("LocationInstanceID")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("ParentLocationInstanceID")
                        .HasColumnType("int");

                    b.HasKey("RequestID", "LocationInstanceID");

                    b.HasIndex("LocationInstanceID");

                    b.HasIndex("ParentLocationInstanceID");

                    b.ToTable("RequestLocationInstance");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.RequestNotification", b =>
                {
                    b.Property<int>("NotificationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Action")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApplicationUserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Controller")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<int>("NotificationStatusID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RequestID")
                        .HasColumnType("int");

                    b.Property<string>("RequestName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("Vendor")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NotificationID");

                    b.HasIndex("ApplicationUserID");

                    b.HasIndex("NotificationStatusID");

                    b.HasIndex("RequestID");

                    b.ToTable("RequestNotifications");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.RequestStatus", b =>
                {
                    b.Property<int>("RequestStatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RequestStatusDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RequestStatusID");

                    b.ToTable("RequestStatuses");

                    b.HasData(
                        new
                        {
                            RequestStatusID = 1,
                            RequestStatusDescription = "New"
                        },
                        new
                        {
                            RequestStatusID = 2,
                            RequestStatusDescription = "Ordered"
                        },
                        new
                        {
                            RequestStatusID = 3,
                            RequestStatusDescription = "RecievedAndIsInventory"
                        },
                        new
                        {
                            RequestStatusID = 6,
                            RequestStatusDescription = "Approved"
                        },
                        new
                        {
                            RequestStatusID = 7,
                            RequestStatusDescription = "Saved To Inventory"
                        });
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.ResourceCategory", b =>
                {
                    b.Property<int>("ResourceCategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsMain")
                        .HasColumnType("bit");

                    b.Property<bool>("IsResourceType")
                        .HasColumnType("bit");

                    b.Property<string>("ResourceCategoryDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ResourceCategoryID");

                    b.ToTable("ResourceCategories");

                    b.HasData(
                        new
                        {
                            ResourceCategoryID = 1,
                            IsMain = true,
                            IsResourceType = false,
                            ResourceCategoryDescription = "Rejuvenation"
                        },
                        new
                        {
                            ResourceCategoryID = 2,
                            IsMain = true,
                            IsResourceType = false,
                            ResourceCategoryDescription = "Biomarkers"
                        },
                        new
                        {
                            ResourceCategoryID = 3,
                            IsMain = true,
                            IsResourceType = false,
                            ResourceCategoryDescription = "Delivery Systems"
                        },
                        new
                        {
                            ResourceCategoryID = 4,
                            IsMain = true,
                            IsResourceType = false,
                            ResourceCategoryDescription = "Clinical Trials"
                        },
                        new
                        {
                            ResourceCategoryID = 5,
                            IsMain = false,
                            IsResourceType = false,
                            ResourceCategoryDescription = "AAV"
                        },
                        new
                        {
                            ResourceCategoryID = 6,
                            IsMain = false,
                            IsResourceType = false,
                            ResourceCategoryDescription = "Telomere Rejuvenation"
                        },
                        new
                        {
                            ResourceCategoryID = 7,
                            IsMain = false,
                            IsResourceType = false,
                            ResourceCategoryDescription = "Telomere Measurement"
                        },
                        new
                        {
                            ResourceCategoryID = 8,
                            IsMain = false,
                            IsResourceType = false,
                            ResourceCategoryDescription = "Methylation Biomarker"
                        },
                        new
                        {
                            ResourceCategoryID = 9,
                            IsMain = false,
                            IsResourceType = false,
                            ResourceCategoryDescription = "Transcriptome"
                        },
                        new
                        {
                            ResourceCategoryID = 10,
                            IsMain = false,
                            IsResourceType = false,
                            ResourceCategoryDescription = "Serum Rejuvenation"
                        },
                        new
                        {
                            ResourceCategoryID = 11,
                            IsMain = false,
                            IsResourceType = false,
                            ResourceCategoryDescription = "Reprogramming"
                        },
                        new
                        {
                            ResourceCategoryID = 12,
                            IsMain = false,
                            IsResourceType = false,
                            ResourceCategoryDescription = "Methylation Rejuvenation"
                        },
                        new
                        {
                            ResourceCategoryID = 13,
                            IsMain = false,
                            IsResourceType = false,
                            ResourceCategoryDescription = "New Methods"
                        },
                        new
                        {
                            ResourceCategoryID = 14,
                            IsMain = false,
                            IsResourceType = true,
                            ResourceCategoryDescription = "Softwares"
                        },
                        new
                        {
                            ResourceCategoryID = 15,
                            IsMain = false,
                            IsResourceType = true,
                            ResourceCategoryDescription = "Learning"
                        },
                        new
                        {
                            ResourceCategoryID = 16,
                            IsMain = false,
                            IsResourceType = true,
                            ResourceCategoryDescription = "Companies"
                        },
                        new
                        {
                            ResourceCategoryID = 17,
                            IsMain = false,
                            IsResourceType = true,
                            ResourceCategoryDescription = "News"
                        });
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.ResourceType", b =>
                {
                    b.Property<int>("ResourceTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ResourceTypeDescription")
                        .HasColumnType("int");

                    b.HasKey("ResourceTypeId");

                    b.ToTable("ResourceTypes");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.SalariedEmployee", b =>
                {
                    b.Property<int>("SalariedEmployeeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EmployeeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("HoursPerDay")
                        .HasColumnType("float");

                    b.HasKey("SalariedEmployeeID");

                    b.HasIndex("EmployeeId")
                        .IsUnique()
                        .HasFilter("[EmployeeId] IS NOT NULL");

                    b.ToTable("SalariedEmployees");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.ShareRequest", b =>
                {
                    b.Property<int>("ShareRequestID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FromApplicationUserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("RequestID")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("ToApplicationUserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ShareRequestID");

                    b.HasIndex("FromApplicationUserID");

                    b.HasIndex("RequestID");

                    b.HasIndex("ToApplicationUserID");

                    b.ToTable("ShareRequests");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.SubProject", b =>
                {
                    b.Property<int>("SubProjectID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProjectID")
                        .HasColumnType("int");

                    b.Property<string>("SubProjectDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SubProjectID");

                    b.HasIndex("ProjectID");

                    b.ToTable("SubProjects");

                    b.HasData(
                        new
                        {
                            SubProjectID = 101,
                            ProjectID = 1,
                            SubProjectDescription = "General"
                        },
                        new
                        {
                            SubProjectID = 102,
                            ProjectID = 1,
                            SubProjectDescription = "Epigenetic Rejuvenation"
                        },
                        new
                        {
                            SubProjectID = 103,
                            ProjectID = 1,
                            SubProjectDescription = "Plasma Rejuvenation"
                        },
                        new
                        {
                            SubProjectID = 201,
                            ProjectID = 2,
                            SubProjectDescription = "General"
                        },
                        new
                        {
                            SubProjectID = 202,
                            ProjectID = 2,
                            SubProjectDescription = "AAV"
                        },
                        new
                        {
                            SubProjectID = 301,
                            ProjectID = 3,
                            SubProjectDescription = "General"
                        },
                        new
                        {
                            SubProjectID = 302,
                            ProjectID = 3,
                            SubProjectDescription = "Epigenetic Clock"
                        },
                        new
                        {
                            SubProjectID = 303,
                            ProjectID = 3,
                            SubProjectDescription = "Telomere Measurement"
                        },
                        new
                        {
                            SubProjectID = 401,
                            ProjectID = 4,
                            SubProjectDescription = "General"
                        },
                        new
                        {
                            SubProjectID = 402,
                            ProjectID = 4,
                            SubProjectDescription = "Biomarker Trial"
                        },
                        new
                        {
                            SubProjectID = 501,
                            ProjectID = 5,
                            SubProjectDescription = "General"
                        });
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.Tag", b =>
                {
                    b.Property<int>("TagID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TagDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TagID");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.TagArticle", b =>
                {
                    b.Property<int>("ArticleID")
                        .HasColumnType("int");

                    b.Property<int>("TagID")
                        .HasColumnType("int");

                    b.HasKey("ArticleID", "TagID");

                    b.HasIndex("TagID");

                    b.ToTable("TagArticles");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.TagProtocol", b =>
                {
                    b.Property<int>("TagID")
                        .HasColumnType("int");

                    b.Property<int>("ProtocolID")
                        .HasColumnType("int");

                    b.HasKey("TagID", "ProtocolID");

                    b.HasIndex("ProtocolID");

                    b.ToTable("TagProtocols");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.TimekeeperNotification", b =>
                {
                    b.Property<int>("NotificationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Action")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApplicationUserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Controller")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployeeHoursID")
                        .HasColumnType("int");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<int>("NotificationStatusID")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.HasKey("NotificationID");

                    b.HasIndex("ApplicationUserID");

                    b.HasIndex("NotificationStatusID");

                    b.ToTable("TimekeeperNotifications");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.UnitParentType", b =>
                {
                    b.Property<int>("UnitParentTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("UnitParentTypeDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UnitParentTypeID");

                    b.ToTable("UnitParentTypes");

                    b.HasData(
                        new
                        {
                            UnitParentTypeID = 1,
                            UnitParentTypeDescription = "Units"
                        },
                        new
                        {
                            UnitParentTypeID = 2,
                            UnitParentTypeDescription = "Weight/Volume"
                        },
                        new
                        {
                            UnitParentTypeID = 3,
                            UnitParentTypeDescription = "Test"
                        });
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.UnitType", b =>
                {
                    b.Property<int>("UnitTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("UnitParentTypeID")
                        .HasColumnType("int");

                    b.Property<string>("UnitTypeDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UnitTypeID");

                    b.HasIndex("UnitParentTypeID");

                    b.ToTable("UnitTypes");

                    b.HasData(
                        new
                        {
                            UnitTypeID = 1,
                            UnitParentTypeID = 1,
                            UnitTypeDescription = "Bottle"
                        },
                        new
                        {
                            UnitTypeID = 2,
                            UnitParentTypeID = 1,
                            UnitTypeDescription = "Box"
                        },
                        new
                        {
                            UnitTypeID = 19,
                            UnitParentTypeID = 1,
                            UnitTypeDescription = "Case"
                        },
                        new
                        {
                            UnitTypeID = 3,
                            UnitParentTypeID = 1,
                            UnitTypeDescription = "Pack"
                        },
                        new
                        {
                            UnitTypeID = 4,
                            UnitParentTypeID = 1,
                            UnitTypeDescription = "Bag"
                        },
                        new
                        {
                            UnitTypeID = 5,
                            UnitParentTypeID = 1,
                            UnitTypeDescription = "Unit"
                        },
                        new
                        {
                            UnitTypeID = 6,
                            UnitParentTypeID = 1,
                            UnitTypeDescription = "Vial"
                        },
                        new
                        {
                            UnitTypeID = 24,
                            UnitParentTypeID = 1,
                            UnitTypeDescription = "Tube"
                        },
                        new
                        {
                            UnitTypeID = 7,
                            UnitParentTypeID = 2,
                            UnitTypeDescription = "Kg"
                        },
                        new
                        {
                            UnitTypeID = 8,
                            UnitParentTypeID = 2,
                            UnitTypeDescription = "gr"
                        },
                        new
                        {
                            UnitTypeID = 9,
                            UnitParentTypeID = 2,
                            UnitTypeDescription = "mg"
                        },
                        new
                        {
                            UnitTypeID = 10,
                            UnitParentTypeID = 2,
                            UnitTypeDescription = "ug"
                        },
                        new
                        {
                            UnitTypeID = 11,
                            UnitParentTypeID = 2,
                            UnitTypeDescription = "Liter"
                        },
                        new
                        {
                            UnitTypeID = 12,
                            UnitParentTypeID = 2,
                            UnitTypeDescription = "ml"
                        },
                        new
                        {
                            UnitTypeID = 13,
                            UnitParentTypeID = 2,
                            UnitTypeDescription = "ul"
                        },
                        new
                        {
                            UnitTypeID = 14,
                            UnitParentTypeID = 2,
                            UnitTypeDescription = "gal"
                        },
                        new
                        {
                            UnitTypeID = 20,
                            UnitParentTypeID = 2,
                            UnitTypeDescription = "pmol"
                        },
                        new
                        {
                            UnitTypeID = 21,
                            UnitParentTypeID = 2,
                            UnitTypeDescription = "nmol"
                        },
                        new
                        {
                            UnitTypeID = 22,
                            UnitParentTypeID = 2,
                            UnitTypeDescription = "umol"
                        },
                        new
                        {
                            UnitTypeID = 23,
                            UnitParentTypeID = 2,
                            UnitTypeDescription = "mol"
                        },
                        new
                        {
                            UnitTypeID = 15,
                            UnitParentTypeID = 3,
                            UnitTypeDescription = "rxhs"
                        },
                        new
                        {
                            UnitTypeID = 16,
                            UnitParentTypeID = 3,
                            UnitTypeDescription = "test"
                        },
                        new
                        {
                            UnitTypeID = 17,
                            UnitParentTypeID = 3,
                            UnitTypeDescription = "preps"
                        },
                        new
                        {
                            UnitTypeID = 18,
                            UnitParentTypeID = 3,
                            UnitTypeDescription = "assays"
                        });
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.UnitTypeParentCategory", b =>
                {
                    b.Property<int>("UnitTypeID")
                        .HasColumnType("int");

                    b.Property<int>("ParentCategoryID")
                        .HasColumnType("int");

                    b.HasKey("UnitTypeID", "ParentCategoryID");

                    b.HasIndex("ParentCategoryID");

                    b.ToTable("UnitTypeParentCategory");

                    b.HasData(
                        new
                        {
                            UnitTypeID = 1,
                            ParentCategoryID = 1
                        },
                        new
                        {
                            UnitTypeID = 2,
                            ParentCategoryID = 1
                        },
                        new
                        {
                            UnitTypeID = 19,
                            ParentCategoryID = 1
                        },
                        new
                        {
                            UnitTypeID = 3,
                            ParentCategoryID = 1
                        },
                        new
                        {
                            UnitTypeID = 5,
                            ParentCategoryID = 1
                        },
                        new
                        {
                            UnitTypeID = 24,
                            ParentCategoryID = 1
                        },
                        new
                        {
                            UnitTypeID = 17,
                            ParentCategoryID = 2
                        },
                        new
                        {
                            UnitTypeID = 18,
                            ParentCategoryID = 2
                        },
                        new
                        {
                            UnitTypeID = 1,
                            ParentCategoryID = 2
                        },
                        new
                        {
                            UnitTypeID = 2,
                            ParentCategoryID = 2
                        },
                        new
                        {
                            UnitTypeID = 19,
                            ParentCategoryID = 2
                        },
                        new
                        {
                            UnitTypeID = 3,
                            ParentCategoryID = 2
                        },
                        new
                        {
                            UnitTypeID = 5,
                            ParentCategoryID = 2
                        },
                        new
                        {
                            UnitTypeID = 7,
                            ParentCategoryID = 2
                        },
                        new
                        {
                            UnitTypeID = 8,
                            ParentCategoryID = 2
                        },
                        new
                        {
                            UnitTypeID = 9,
                            ParentCategoryID = 2
                        },
                        new
                        {
                            UnitTypeID = 10,
                            ParentCategoryID = 2
                        },
                        new
                        {
                            UnitTypeID = 11,
                            ParentCategoryID = 2
                        },
                        new
                        {
                            UnitTypeID = 12,
                            ParentCategoryID = 2
                        },
                        new
                        {
                            UnitTypeID = 13,
                            ParentCategoryID = 2
                        },
                        new
                        {
                            UnitTypeID = 20,
                            ParentCategoryID = 2
                        },
                        new
                        {
                            UnitTypeID = 21,
                            ParentCategoryID = 2
                        },
                        new
                        {
                            UnitTypeID = 22,
                            ParentCategoryID = 2
                        },
                        new
                        {
                            UnitTypeID = 23,
                            ParentCategoryID = 2
                        },
                        new
                        {
                            UnitTypeID = 24,
                            ParentCategoryID = 2
                        },
                        new
                        {
                            UnitTypeID = 5,
                            ParentCategoryID = 3
                        },
                        new
                        {
                            UnitTypeID = 1,
                            ParentCategoryID = 4
                        },
                        new
                        {
                            UnitTypeID = 2,
                            ParentCategoryID = 4
                        },
                        new
                        {
                            UnitTypeID = 19,
                            ParentCategoryID = 4
                        },
                        new
                        {
                            UnitTypeID = 3,
                            ParentCategoryID = 4
                        },
                        new
                        {
                            UnitTypeID = 5,
                            ParentCategoryID = 4
                        },
                        new
                        {
                            UnitTypeID = 24,
                            ParentCategoryID = 4
                        },
                        new
                        {
                            UnitTypeID = 5,
                            ParentCategoryID = 7
                        },
                        new
                        {
                            UnitTypeID = 10,
                            ParentCategoryID = 7
                        },
                        new
                        {
                            UnitTypeID = 9,
                            ParentCategoryID = 7
                        },
                        new
                        {
                            UnitTypeID = 20,
                            ParentCategoryID = 7
                        },
                        new
                        {
                            UnitTypeID = 21,
                            ParentCategoryID = 7
                        },
                        new
                        {
                            UnitTypeID = 22,
                            ParentCategoryID = 7
                        },
                        new
                        {
                            UnitTypeID = 13,
                            ParentCategoryID = 7
                        },
                        new
                        {
                            UnitTypeID = 12,
                            ParentCategoryID = 7
                        },
                        new
                        {
                            UnitTypeID = 11,
                            ParentCategoryID = 7
                        });
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.Vendor", b =>
                {
                    b.Property<int>("VendorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("InfoEmail")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("OrdersEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("VendorAccountNum")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VendorBIC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VendorBank")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("VendorBankBranch")
                        .HasColumnType("nvarchar(4)")
                        .HasMaxLength(4);

                    b.Property<string>("VendorBuisnessID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VendorCellPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VendorCity")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("VendorCountry")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("VendorEnName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("VendorFax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VendorGoldAccount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VendorHeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("VendorRoutingNum")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VendorStreet")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("VendorSwift")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VendorTelephone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VendorWebsite")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VendorZip")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VendorID");

                    b.ToTable("Vendors");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.VendorCategoryType", b =>
                {
                    b.Property<int>("VendorID")
                        .HasColumnType("int");

                    b.Property<int>("CategoryTypeID")
                        .HasColumnType("int");

                    b.HasKey("VendorID", "CategoryTypeID");

                    b.HasIndex("CategoryTypeID");

                    b.ToTable("VendorCategoryType");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.VendorComment", b =>
                {
                    b.Property<int>("VendorCommentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CommentText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CommentTimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("CommentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VendorID")
                        .HasColumnType("int");

                    b.HasKey("VendorCommentID");

                    b.HasIndex("ApplicationUserID");

                    b.HasIndex("VendorID");

                    b.ToTable("VendorComments");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.VendorContact", b =>
                {
                    b.Property<int>("VendorContactID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("VendorContactEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VendorContactName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VendorContactPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VendorID")
                        .HasColumnType("int");

                    b.HasKey("VendorContactID");

                    b.HasIndex("VendorID");

                    b.ToTable("VendorContacts");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.Employee", b =>
                {
                    b.HasBaseType("PrototypeWithAuth.Data.ApplicationUser");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<double>("BonusSickDays")
                        .HasColumnType("float");

                    b.Property<double>("BonusVacationDays")
                        .HasColumnType("float");

                    b.Property<int?>("CitizenshipID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DegreeID")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeStatusID")
                        .HasColumnType("int");

                    b.Property<double>("EmployerTax")
                        .HasColumnType("float");

                    b.Property<double>("GrossSalary")
                        .HasColumnType("float");

                    b.Property<string>("IDNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("IncomeTax")
                        .HasColumnType("float");

                    b.Property<bool>("IsUser")
                        .HasColumnType("bit");

                    b.Property<int?>("JobSubcategoryTypeID")
                        .HasColumnType("int");

                    b.Property<int?>("MaritalStatusID")
                        .HasColumnType("int");

                    b.Property<double>("RollOverSickDays")
                        .HasColumnType("float");

                    b.Property<double>("RollOverVacationDays")
                        .HasColumnType("float");

                    b.Property<double>("SpecialDays")
                        .HasColumnType("float");

                    b.Property<DateTime>("StartedWorking")
                        .HasColumnType("datetime2");

                    b.Property<int>("TaxCredits")
                        .HasColumnType("int");

                    b.Property<double>("VacationDays")
                        .HasColumnType("float");

                    b.HasIndex("CitizenshipID");

                    b.HasIndex("DegreeID");

                    b.HasIndex("EmployeeStatusID");

                    b.HasIndex("JobSubcategoryTypeID");

                    b.HasIndex("MaritalStatusID");

                    b.HasDiscriminator().HasValue("Employee");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.ExternalCalibration", b =>
                {
                    b.HasBaseType("PrototypeWithAuth.Models.Calibration");

                    b.HasDiscriminator().HasValue("ExternalCalibration");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.InternalCalibration", b =>
                {
                    b.HasBaseType("PrototypeWithAuth.Models.Calibration");

                    b.HasDiscriminator().HasValue("InternalCalibration");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.Repair", b =>
                {
                    b.HasBaseType("PrototypeWithAuth.Models.Calibration");

                    b.HasDiscriminator().HasValue("Repair");
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.RequestNotificationStatus", b =>
                {
                    b.HasBaseType("PrototypeWithAuth.Models.NotificationStatus");

                    b.HasDiscriminator().HasValue("RequestNotificationStatus");

                    b.HasData(
                        new
                        {
                            NotificationStatusID = 1,
                            Color = "--notifications-orderlate-color",
                            Description = "OrderLate",
                            Icon = "icon-priority_high-24px"
                        },
                        new
                        {
                            NotificationStatusID = 2,
                            Color = "--notifications-ordered-color",
                            Description = "ItemOrdered",
                            Icon = "icon-centarix-icons-03"
                        },
                        new
                        {
                            NotificationStatusID = 3,
                            Color = "--notifications-approved-color",
                            Description = "ItemApproved",
                            Icon = "icon-done-24px"
                        },
                        new
                        {
                            NotificationStatusID = 4,
                            Color = "--notifications-received-color",
                            Description = "ItemReceived",
                            Icon = "icon-local_mall-24px"
                        });
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.TimekeeperNotificationStatus", b =>
                {
                    b.HasBaseType("PrototypeWithAuth.Models.NotificationStatus");

                    b.HasDiscriminator().HasValue("TimekeeperNotificationStatus");

                    b.HasData(
                        new
                        {
                            NotificationStatusID = 5,
                            Color = "--timekeeper-color",
                            Description = "UpdateHours",
                            Icon = "icon-notification_timekeeper-24px"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PrototypeWithAuth.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PrototypeWithAuth.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PrototypeWithAuth.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PrototypeWithAuth.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.Advisor", b =>
                {
                    b.HasOne("PrototypeWithAuth.Models.Employee", "Employee")
                        .WithOne("Advisor")
                        .HasForeignKey("PrototypeWithAuth.Models.Advisor", "EmployeeID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.Article", b =>
                {
                    b.HasOne("PrototypeWithAuth.Models.ResourceType", "ResourceType")
                        .WithMany()
                        .HasForeignKey("ResourceTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.AuthorProtocol", b =>
                {
                    b.HasOne("PrototypeWithAuth.Models.Author", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PrototypeWithAuth.Models.Protocol", "Protocol")
                        .WithMany()
                        .HasForeignKey("ProtocolID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.Calibration", b =>
                {
                    b.HasOne("PrototypeWithAuth.Models.CalibrationType", "CalibrationType")
                        .WithMany()
                        .HasForeignKey("CalibrationTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PrototypeWithAuth.Models.Request", "Request")
                        .WithMany()
                        .HasForeignKey("RequestID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.CentarixID", b =>
                {
                    b.HasOne("PrototypeWithAuth.Models.Employee", "Employee")
                        .WithMany("CentarixIDs")
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PrototypeWithAuth.Models.EmployeeStatus", "EmployeeStatus")
                        .WithMany()
                        .HasForeignKey("EmployeeStatusID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.Comment", b =>
                {
                    b.HasOne("PrototypeWithAuth.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PrototypeWithAuth.Models.Request", "Request")
                        .WithMany()
                        .HasForeignKey("RequestID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.CompanyDayOff", b =>
                {
                    b.HasOne("PrototypeWithAuth.Models.CompanyDayOffType", "CompanyDayOffType")
                        .WithMany()
                        .HasForeignKey("CompanyDayOffTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.CreditCard", b =>
                {
                    b.HasOne("PrototypeWithAuth.Models.CompanyAccount", "CompanyAccount")
                        .WithMany("CreditCards")
                        .HasForeignKey("CompanyAccountID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.EmployeeHours", b =>
                {
                    b.HasOne("PrototypeWithAuth.Models.CompanyDayOff", "CompanyDayOff")
                        .WithMany()
                        .HasForeignKey("CompanyDayOffID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PrototypeWithAuth.Models.EmployeeHoursStatus", "EmployeeHoursStatusEntry1")
                        .WithMany()
                        .HasForeignKey("EmployeeHoursStatusEntry1ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PrototypeWithAuth.Models.EmployeeHoursStatus", "EmployeeHoursStatusEntry2")
                        .WithMany("EmployeeHours")
                        .HasForeignKey("EmployeeHoursStatusEntry2ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PrototypeWithAuth.Models.Employee", "Employee")
                        .WithMany("EmployeeHours")
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PrototypeWithAuth.Models.OffDayType", "OffDayType")
                        .WithMany("EmployeeHours")
                        .HasForeignKey("OffDayTypeID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PrototypeWithAuth.Models.OffDayType", "PartialOffDayType")
                        .WithMany("EmployeeHoursPartial")
                        .HasForeignKey("PartialOffDayTypeID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.EmployeeHoursAwaitingApproval", b =>
                {
                    b.HasOne("PrototypeWithAuth.Models.EmployeeHours", "EmployeeHours")
                        .WithMany()
                        .HasForeignKey("EmployeeHoursID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PrototypeWithAuth.Models.EmployeeHoursStatus", "EmployeeHoursStatusEntry1")
                        .WithMany()
                        .HasForeignKey("EmployeeHoursStatusEntry1ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PrototypeWithAuth.Models.EmployeeHoursStatus", "EmployeeHoursStatusEntry2")
                        .WithMany("EmployeeHoursAwaitingApprovals")
                        .HasForeignKey("EmployeeHoursStatusEntry2ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PrototypeWithAuth.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PrototypeWithAuth.Models.OffDayType", "OffDayType")
                        .WithMany("EmployeeHoursAwaitingApprovals")
                        .HasForeignKey("OffDayTypeID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PrototypeWithAuth.Models.OffDayType", "PartialOffDayType")
                        .WithMany("EmployeeHoursAwaitingApprovalsPartial")
                        .HasForeignKey("PartialOffDayTypeID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.FavoriteRequest", b =>
                {
                    b.HasOne("PrototypeWithAuth.Data.ApplicationUser", "ApplicationUser")
                        .WithMany("FavoriteRequests")
                        .HasForeignKey("ApplicationUserID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PrototypeWithAuth.Models.Request", "Request")
                        .WithMany("FavoriteRequests")
                        .HasForeignKey("RequestID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.Freelancer", b =>
                {
                    b.HasOne("PrototypeWithAuth.Models.Employee", "Employee")
                        .WithOne("Freelancer")
                        .HasForeignKey("PrototypeWithAuth.Models.Freelancer", "EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.FunctionLine", b =>
                {
                    b.HasOne("PrototypeWithAuth.Models.FunctionType", "FunctionType")
                        .WithMany()
                        .HasForeignKey("FunctionTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PrototypeWithAuth.Models.Line", "Line")
                        .WithMany()
                        .HasForeignKey("LineID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.JobSubcategoryType", b =>
                {
                    b.HasOne("PrototypeWithAuth.Models.JobCategoryType", "JobCategoryType")
                        .WithMany("JobSubcategoryTypes")
                        .HasForeignKey("JobCategoryTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.Line", b =>
                {
                    b.HasOne("PrototypeWithAuth.Models.LineType", "LineType")
                        .WithMany()
                        .HasForeignKey("LineTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PrototypeWithAuth.Models.Line", "ParentLine")
                        .WithMany()
                        .HasForeignKey("ParentLineID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PrototypeWithAuth.Models.Protocol", "Protocol")
                        .WithMany("Line")
                        .HasForeignKey("ProtocolID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.LineType", b =>
                {
                    b.HasOne("PrototypeWithAuth.Models.LineType", "LineTypeChild")
                        .WithMany()
                        .HasForeignKey("LineTypeChildID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PrototypeWithAuth.Models.LineType", "LineTypeParent")
                        .WithMany()
                        .HasForeignKey("LineTypeParentID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.Link", b =>
                {
                    b.HasOne("PrototypeWithAuth.Models.Protocol", "Protocol")
                        .WithMany("Urls")
                        .HasForeignKey("ProtocolID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.LocationInstance", b =>
                {
                    b.HasOne("PrototypeWithAuth.Models.LabPart", "LabPart")
                        .WithMany()
                        .HasForeignKey("LabPartID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PrototypeWithAuth.Models.LocationInstance", "LocationInstanceParent")
                        .WithMany()
                        .HasForeignKey("LocationInstanceParentID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PrototypeWithAuth.Models.LocationRoomType", "LocationRoomType")
                        .WithMany()
                        .HasForeignKey("LocationRoomTypeID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PrototypeWithAuth.Models.LocationType", "LocationType")
                        .WithMany()
                        .HasForeignKey("LocationTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.LocationType", b =>
                {
                    b.HasOne("PrototypeWithAuth.Models.LocationType", "LocationTypeChild")
                        .WithMany()
                        .HasForeignKey("LocationTypeChildID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PrototypeWithAuth.Models.LocationType", "LocationTypeParent")
                        .WithMany()
                        .HasForeignKey("LocationTypeParentID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.Material", b =>
                {
                    b.HasOne("PrototypeWithAuth.Models.MaterialCategory", "MaterialCategory")
                        .WithMany()
                        .HasForeignKey("MaterialCategoryID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PrototypeWithAuth.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.MaterialProtocol", b =>
                {
                    b.HasOne("PrototypeWithAuth.Models.Material", "Material")
                        .WithMany("MaterialProtocols")
                        .HasForeignKey("MaterialID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PrototypeWithAuth.Models.Protocol", "Protocol")
                        .WithMany("MaterialProtocols")
                        .HasForeignKey("ProtocolID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.ParentCategory", b =>
                {
                    b.HasOne("PrototypeWithAuth.Models.CategoryType", "CategoryType")
                        .WithMany("ParentCategories")
                        .HasForeignKey("CategoryTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.ParentQuote", b =>
                {
                    b.HasOne("PrototypeWithAuth.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PrototypeWithAuth.Models.QuoteStatus", "QuoteStatus")
                        .WithMany("ParentQuotes")
                        .HasForeignKey("QuoteStatusID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.ParentRequest", b =>
                {
                    b.HasOne("PrototypeWithAuth.Data.ApplicationUser", "ApplicationUser")
                        .WithMany("ParentRequests")
                        .HasForeignKey("ApplicationUserID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.Payment", b =>
                {
                    b.HasOne("PrototypeWithAuth.Models.CompanyAccount", "CompanyAccount")
                        .WithMany()
                        .HasForeignKey("CompanyAccountID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PrototypeWithAuth.Models.CreditCard", "CreditCard")
                        .WithMany()
                        .HasForeignKey("CreditCardID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PrototypeWithAuth.Models.Invoice", "Invoice")
                        .WithMany()
                        .HasForeignKey("InvoiceID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PrototypeWithAuth.Models.ParentRequest", null)
                        .WithMany("Payments")
                        .HasForeignKey("ParentRequestID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PrototypeWithAuth.Models.PaymentType", "PaymentType")
                        .WithMany()
                        .HasForeignKey("PaymentTypeID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PrototypeWithAuth.Models.Request", "Request")
                        .WithMany("Payments")
                        .HasForeignKey("RequestID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.PhysicalAddress", b =>
                {
                    b.HasOne("PrototypeWithAuth.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.Product", b =>
                {
                    b.HasOne("PrototypeWithAuth.Models.ProductSubcategory", "ProductSubcategory")
                        .WithMany("Products")
                        .HasForeignKey("ProductSubcategoryID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PrototypeWithAuth.Models.Vendor", "Vendor")
                        .WithMany("Products")
                        .HasForeignKey("VendorID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.ProductSubcategory", b =>
                {
                    b.HasOne("PrototypeWithAuth.Models.ParentCategory", "ParentCategory")
                        .WithMany("ProductSubcategories")
                        .HasForeignKey("ParentCategoryID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.Protocol", b =>
                {
                    b.HasOne("PrototypeWithAuth.Data.ApplicationUser", "ApplicationUserCreator")
                        .WithMany()
                        .HasForeignKey("ApplicationUserCreatorID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PrototypeWithAuth.Models.ProtocolSubCategory", "ProtocolSubCategory")
                        .WithMany()
                        .HasForeignKey("ProtocolSubCategoryID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PrototypeWithAuth.Models.ProtocolType", "ProtocolType")
                        .WithMany()
                        .HasForeignKey("ProtocolTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.ProtocolComment", b =>
                {
                    b.HasOne("PrototypeWithAuth.Data.ApplicationUser", "ApplicationUserCreator")
                        .WithMany()
                        .HasForeignKey("ApplicationUserCreatorID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.ProtocolInstance", b =>
                {
                    b.HasOne("PrototypeWithAuth.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PrototypeWithAuth.Models.Line", "CurrentLine")
                        .WithMany()
                        .HasForeignKey("CurrentLineID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PrototypeWithAuth.Models.Protocol", "Protocol")
                        .WithMany()
                        .HasForeignKey("ProtocolID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.ProtocolInstanceResult", b =>
                {
                    b.HasOne("PrototypeWithAuth.Models.ProtocolInstance", "ProtocolInstance")
                        .WithMany()
                        .HasForeignKey("ProtocolInstanceID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.ProtocolSubCategory", b =>
                {
                    b.HasOne("PrototypeWithAuth.Models.ProtocolCategory", "ProtocolCategoryType")
                        .WithMany()
                        .HasForeignKey("ProtocolCategoryTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.Request", b =>
                {
                    b.HasOne("PrototypeWithAuth.Data.ApplicationUser", "ApplicationUserCreator")
                        .WithMany("RequestsCreated")
                        .HasForeignKey("ApplicationUserCreatorID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PrototypeWithAuth.Data.ApplicationUser", "ApplicationUserReceiver")
                        .WithMany("RequestsReceived")
                        .HasForeignKey("ApplicationUserReceiverID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PrototypeWithAuth.Models.Invoice", null)
                        .WithMany("Requests")
                        .HasForeignKey("InvoiceID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PrototypeWithAuth.Models.ParentQuote", "ParentQuote")
                        .WithMany("Requests")
                        .HasForeignKey("ParentQuoteID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PrototypeWithAuth.Models.ParentRequest", "ParentRequest")
                        .WithMany("Requests")
                        .HasForeignKey("ParentRequestID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PrototypeWithAuth.Models.PaymentStatus", "PaymentStatus")
                        .WithMany("Requests")
                        .HasForeignKey("PaymentStatusID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PrototypeWithAuth.Models.Product", "Product")
                        .WithMany("Requests")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PrototypeWithAuth.Models.RequestStatus", "RequestStatus")
                        .WithMany("Requests")
                        .HasForeignKey("RequestStatusID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PrototypeWithAuth.Models.SubProject", "SubProject")
                        .WithMany("Requests")
                        .HasForeignKey("SubProjectID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PrototypeWithAuth.Models.UnitType", "SubSubUnitType")
                        .WithMany()
                        .HasForeignKey("SubSubUnitTypeID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PrototypeWithAuth.Models.UnitType", "SubUnitType")
                        .WithMany()
                        .HasForeignKey("SubUnitTypeID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PrototypeWithAuth.Models.UnitType", "UnitType")
                        .WithMany()
                        .HasForeignKey("UnitTypeID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.RequestLocationInstance", b =>
                {
                    b.HasOne("PrototypeWithAuth.Models.LocationInstance", "LocationInstance")
                        .WithMany("RequestLocationInstances")
                        .HasForeignKey("LocationInstanceID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PrototypeWithAuth.Models.LocationInstance", "ParentLocationInstance")
                        .WithMany("AllRequestLocationInstances")
                        .HasForeignKey("ParentLocationInstanceID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PrototypeWithAuth.Models.Request", "Request")
                        .WithMany("RequestLocationInstances")
                        .HasForeignKey("RequestID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.RequestNotification", b =>
                {
                    b.HasOne("PrototypeWithAuth.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PrototypeWithAuth.Models.RequestNotificationStatus", "NotificationStatus")
                        .WithMany("RequestNotifications")
                        .HasForeignKey("NotificationStatusID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PrototypeWithAuth.Models.Request", "Request")
                        .WithMany("RequestNotifications")
                        .HasForeignKey("RequestID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.SalariedEmployee", b =>
                {
                    b.HasOne("PrototypeWithAuth.Models.Employee", "Employee")
                        .WithOne("SalariedEmployee")
                        .HasForeignKey("PrototypeWithAuth.Models.SalariedEmployee", "EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.ShareRequest", b =>
                {
                    b.HasOne("PrototypeWithAuth.Data.ApplicationUser", "FromApplicationUser")
                        .WithMany("ShareRequestsCreated")
                        .HasForeignKey("FromApplicationUserID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PrototypeWithAuth.Models.Request", "Request")
                        .WithMany("ShareRequests")
                        .HasForeignKey("RequestID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PrototypeWithAuth.Data.ApplicationUser", "ToApplicationUser")
                        .WithMany("ShareRequestsReceived")
                        .HasForeignKey("ToApplicationUserID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.SubProject", b =>
                {
                    b.HasOne("PrototypeWithAuth.Models.Project", "Project")
                        .WithMany("SubProjects")
                        .HasForeignKey("ProjectID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.TagArticle", b =>
                {
                    b.HasOne("PrototypeWithAuth.Models.Article", "Article")
                        .WithMany("TagArticles")
                        .HasForeignKey("ArticleID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PrototypeWithAuth.Models.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.TagProtocol", b =>
                {
                    b.HasOne("PrototypeWithAuth.Models.Protocol", "Protocol")
                        .WithMany("TagProtocols")
                        .HasForeignKey("ProtocolID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PrototypeWithAuth.Models.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.TimekeeperNotification", b =>
                {
                    b.HasOne("PrototypeWithAuth.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PrototypeWithAuth.Models.TimekeeperNotificationStatus", "NotificationStatus")
                        .WithMany("TimekeeperNotifications")
                        .HasForeignKey("NotificationStatusID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.UnitType", b =>
                {
                    b.HasOne("PrototypeWithAuth.Models.UnitParentType", "UnitParentType")
                        .WithMany("UnitTypes")
                        .HasForeignKey("UnitParentTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.UnitTypeParentCategory", b =>
                {
                    b.HasOne("PrototypeWithAuth.Models.ParentCategory", "ParentCategory")
                        .WithMany("UnitTypeParentCategory")
                        .HasForeignKey("ParentCategoryID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PrototypeWithAuth.Models.UnitType", "UnitType")
                        .WithMany("UnitTypeParentCategory")
                        .HasForeignKey("UnitTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.VendorCategoryType", b =>
                {
                    b.HasOne("PrototypeWithAuth.Models.CategoryType", "CategoryType")
                        .WithMany("VendorCategoryTypes")
                        .HasForeignKey("CategoryTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PrototypeWithAuth.Models.Vendor", "Vendor")
                        .WithMany("VendorCategoryTypes")
                        .HasForeignKey("VendorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.VendorComment", b =>
                {
                    b.HasOne("PrototypeWithAuth.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PrototypeWithAuth.Models.Vendor", "Vendor")
                        .WithMany("VendorComments")
                        .HasForeignKey("VendorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.VendorContact", b =>
                {
                    b.HasOne("PrototypeWithAuth.Models.Vendor", "Vendor")
                        .WithMany("VendorContacts")
                        .HasForeignKey("VendorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PrototypeWithAuth.Models.Employee", b =>
                {
                    b.HasOne("PrototypeWithAuth.Models.Citizenship", "Citizenship")
                        .WithMany("Employees")
                        .HasForeignKey("CitizenshipID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PrototypeWithAuth.Models.Degree", "Degree")
                        .WithMany("Employees")
                        .HasForeignKey("DegreeID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PrototypeWithAuth.Models.EmployeeStatus", "EmployeeStatus")
                        .WithMany("Employees")
                        .HasForeignKey("EmployeeStatusID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PrototypeWithAuth.Models.JobSubcategoryType", "JobSubcategoryType")
                        .WithMany("Employees")
                        .HasForeignKey("JobSubcategoryTypeID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PrototypeWithAuth.Models.MaritalStatus", "MaritalStatus")
                        .WithMany("Employees")
                        .HasForeignKey("MaritalStatusID")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
